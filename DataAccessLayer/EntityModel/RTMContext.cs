using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccessLayer.EntityModel
{
    public partial class RTMContext : DbContext
    {
        public RTMContext()
        {
        }

        public RTMContext(DbContextOptions<RTMContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessDetail> AccessDetail { get; set; }
        public virtual DbSet<AccessDetailLog> AccessDetailLog { get; set; }
        public virtual DbSet<AccessGroupMst> AccessGroupMst { get; set; }
        public virtual DbSet<AccessGroupType> AccessGroupType { get; set; }
        public virtual DbSet<AccessLevelDispositionAction> AccessLevelDispositionAction { get; set; }
        public virtual DbSet<AccessLevelGroupMapping> AccessLevelGroupMapping { get; set; }
        public virtual DbSet<AccessLevelMaster> AccessLevelMaster { get; set; }
        public virtual DbSet<AccessLevelStaticPages> AccessLevelStaticPages { get; set; }
        public virtual DbSet<AccountThemeDetails> AccountThemeDetails { get; set; }
        public virtual DbSet<ActionLtwoLog> ActionLtwoLog { get; set; }
        public virtual DbSet<AdditionalAccessDetail> AdditionalAccessDetail { get; set; }
        public virtual DbSet<AdditionalMiscControlDetails> AdditionalMiscControlDetails { get; set; }
        public virtual DbSet<AdditionalMiscControlDetailsLog> AdditionalMiscControlDetailsLog { get; set; }
        public virtual DbSet<Admaster> Admaster { get; set; }
        public virtual DbSet<AdminRoleAssignDetail> AdminRoleAssignDetail { get; set; }
        public virtual DbSet<AdminRoleAssignDetailLog> AdminRoleAssignDetailLog { get; set; }
        public virtual DbSet<AdvisorDetailsHierarachyView> AdvisorDetailsHierarachyView { get; set; }
        public virtual DbSet<AlkemBrandCustomerDiscountMapping> AlkemBrandCustomerDiscountMapping { get; set; }
        public virtual DbSet<AlkemBrandCustomerDiscountMappingLog> AlkemBrandCustomerDiscountMappingLog { get; set; }
        public virtual DbSet<AlkemDivisionMaster> AlkemDivisionMaster { get; set; }
        public virtual DbSet<AlkemDivisionMasterLog> AlkemDivisionMasterLog { get; set; }
        public virtual DbSet<AlkemEmailTicketStatus> AlkemEmailTicketStatus { get; set; }
        public virtual DbSet<AlkemProductBrandMaster> AlkemProductBrandMaster { get; set; }
        public virtual DbSet<AlkemProductBrandMasterLog> AlkemProductBrandMasterLog { get; set; }
        public virtual DbSet<AlkemProductMaster> AlkemProductMaster { get; set; }
        public virtual DbSet<AlkemProductMasterLog> AlkemProductMasterLog { get; set; }
        public virtual DbSet<AlkemUserDivisionMapping> AlkemUserDivisionMapping { get; set; }
        public virtual DbSet<AlkemUserMaster> AlkemUserMaster { get; set; }
        public virtual DbSet<ApIndexerInvoiceProcessing> ApIndexerInvoiceProcessing { get; set; }
        public virtual DbSet<ApIndexerInvoiceProcessingOutcomeDetails> ApIndexerInvoiceProcessingOutcomeDetails { get; set; }
        public virtual DbSet<ApPriorityMappingDetails> ApPriorityMappingDetails { get; set; }
        public virtual DbSet<ApProductionDetails> ApProductionDetails { get; set; }
        public virtual DbSet<ApProductionDetailsTrails> ApProductionDetailsTrails { get; set; }
        public virtual DbSet<ApProductionOutcomeDetails> ApProductionOutcomeDetails { get; set; }
        public virtual DbSet<AphelpdeskProcessingDetails> AphelpdeskProcessingDetails { get; set; }
        public virtual DbSet<ApprocessingDetails> ApprocessingDetails { get; set; }
        public virtual DbSet<ArIndexerDetails> ArIndexerDetails { get; set; }
        public virtual DbSet<ArIndexerInvoiceProcessingDetails> ArIndexerInvoiceProcessingDetails { get; set; }
        public virtual DbSet<ArhelpdeskProcessingDetails> ArhelpdeskProcessingDetails { get; set; }
        public virtual DbSet<ArprocessingDetails> ArprocessingDetails { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<AspectProcessMaster> AspectProcessMaster { get; set; }
        public virtual DbSet<AuditdataDetail> AuditdataDetail { get; set; }
        public virtual DbSet<AutoLogin> AutoLogin { get; set; }
        public virtual DbSet<AutoLoginDetail> AutoLoginDetail { get; set; }
        public virtual DbSet<Auxdetails> Auxdetails { get; set; }
        public virtual DbSet<AuxdetailsBackup> AuxdetailsBackup { get; set; }
        public virtual DbSet<BankReconDetails> BankReconDetails { get; set; }
        public virtual DbSet<BankReconMaster> BankReconMaster { get; set; }
        public virtual DbSet<BulkSmsddetails> BulkSmsddetails { get; set; }
        public virtual DbSet<BulkSmsddetailsLog> BulkSmsddetailsLog { get; set; }
        public virtual DbSet<CallHistory> CallHistory { get; set; }
        public virtual DbSet<CallNatureMaster> CallNatureMaster { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CheckListDetails> CheckListDetails { get; set; }
        public virtual DbSet<ClientLoginMappingDetail> ClientLoginMappingDetail { get; set; }
        public virtual DbSet<ClientLoginMappingDetailLog> ClientLoginMappingDetailLog { get; set; }
        public virtual DbSet<ClientReportMappingMaster> ClientReportMappingMaster { get; set; }
        public virtual DbSet<ClientReportMappingMasterLog> ClientReportMappingMasterLog { get; set; }
        public virtual DbSet<ClientReportMaster> ClientReportMaster { get; set; }
        public virtual DbSet<ClientReportMaster10052018> ClientReportMaster10052018 { get; set; }
        public virtual DbSet<ClientReportMasterlog> ClientReportMasterlog { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Clients26032019> Clients26032019 { get; set; }
        public virtual DbSet<ClientsLog> ClientsLog { get; set; }
        public virtual DbSet<CollectionDataDetail> CollectionDataDetail { get; set; }
        public virtual DbSet<CollectionDataDetailLog> CollectionDataDetailLog { get; set; }
        public virtual DbSet<CollectionProcessingDetails> CollectionProcessingDetails { get; set; }
        public virtual DbSet<CollectionProductionDetails> CollectionProductionDetails { get; set; }
        public virtual DbSet<CollectionProductionInvoiceProcessingDetails> CollectionProductionInvoiceProcessingDetails { get; set; }
        public virtual DbSet<CollectionProductionInvoiceProcessingDetailsOutcome> CollectionProductionInvoiceProcessingDetailsOutcome { get; set; }
        public virtual DbSet<CollectionTemplateConfigurationMaster> CollectionTemplateConfigurationMaster { get; set; }
        public virtual DbSet<CollectionTemplateConfigurationMasterLog> CollectionTemplateConfigurationMasterLog { get; set; }
        public virtual DbSet<CollectionTemplateParameterMaster> CollectionTemplateParameterMaster { get; set; }
        public virtual DbSet<CollectionTemplateParameterMasterLog> CollectionTemplateParameterMasterLog { get; set; }
        public virtual DbSet<CollectionsHelpDeskProductionDetails> CollectionsHelpDeskProductionDetails { get; set; }
        public virtual DbSet<CollectionsHelpdeskProcessingDetails> CollectionsHelpdeskProcessingDetails { get; set; }
        public virtual DbSet<ControlTypeMaster> ControlTypeMaster { get; set; }
        public virtual DbSet<CurrencyMaster> CurrencyMaster { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerListMaster> CustomerListMaster { get; set; }
        public virtual DbSet<CustomerRawDataMaster> CustomerRawDataMaster { get; set; }
        public virtual DbSet<DailyAspectComplianceReport> DailyAspectComplianceReport { get; set; }
        public virtual DbSet<DailyUserAuxstartEndDetails> DailyUserAuxstartEndDetails { get; set; }
        public virtual DbSet<DataColumnMaster> DataColumnMaster { get; set; }
        public virtual DbSet<DataColumnMasterLog> DataColumnMasterLog { get; set; }
        public virtual DbSet<DataDetail> DataDetail { get; set; }
        public virtual DbSet<DataDetail07022018> DataDetail07022018 { get; set; }
        public virtual DbSet<DataDetailLog> DataDetailLog { get; set; }
        public virtual DbSet<DataDetailRamu01052018> DataDetailRamu01052018 { get; set; }
        public virtual DbSet<DataDetailTemp> DataDetailTemp { get; set; }
        public virtual DbSet<DataDetailTempLog> DataDetailTempLog { get; set; }
        public virtual DbSet<DataDetailUploadBatchMapping> DataDetailUploadBatchMapping { get; set; }
        public virtual DbSet<DataDetailUploadBatchMapping07022018> DataDetailUploadBatchMapping07022018 { get; set; }
        public virtual DbSet<DataDetailUploadBatchMappingLog> DataDetailUploadBatchMappingLog { get; set; }
        public virtual DbSet<DataExportTypeMaster> DataExportTypeMaster { get; set; }
        public virtual DbSet<DataExtractionDetails> DataExtractionDetails { get; set; }
        public virtual DbSet<DataExtractionDetailsDeleted> DataExtractionDetailsDeleted { get; set; }
        public virtual DbSet<DataFlowCheckList> DataFlowCheckList { get; set; }
        public virtual DbSet<DataFlowDncexternal> DataFlowDncexternal { get; set; }
        public virtual DbSet<DataFlowDncinternal> DataFlowDncinternal { get; set; }
        public virtual DbSet<DataFlowFileStatusMaster> DataFlowFileStatusMaster { get; set; }
        public virtual DbSet<DataFlowMaster> DataFlowMaster { get; set; }
        public virtual DbSet<DataFlowMasterLog> DataFlowMasterLog { get; set; }
        public virtual DbSet<DataFlowTypeMaster> DataFlowTypeMaster { get; set; }
        public virtual DbSet<DataFlowUploadMaster> DataFlowUploadMaster { get; set; }
        public virtual DbSet<DataFlowUploadTemplatesMaster> DataFlowUploadTemplatesMaster { get; set; }
        public virtual DbSet<DataSearchDetails> DataSearchDetails { get; set; }
        public virtual DbSet<DataSearchDetailsLog> DataSearchDetailsLog { get; set; }
        public virtual DbSet<DataStatusMaster> DataStatusMaster { get; set; }
        public virtual DbSet<DataTypeOperatorMaping> DataTypeOperatorMaping { get; set; }
        public virtual DbSet<DataUploadTypeMaster> DataUploadTypeMaster { get; set; }
        public virtual DbSet<DataflowBatchDetail> DataflowBatchDetail { get; set; }
        public virtual DbSet<DataflowBatchDetail07022018> DataflowBatchDetail07022018 { get; set; }
        public virtual DbSet<DataflowBatchDetailLog> DataflowBatchDetailLog { get; set; }
        public virtual DbSet<DataflowBatchDetailRamu01052018> DataflowBatchDetailRamu01052018 { get; set; }
        public virtual DbSet<DataflowBatchFieldMappingDetail> DataflowBatchFieldMappingDetail { get; set; }
        public virtual DbSet<DataflowBatchMappingDetail> DataflowBatchMappingDetail { get; set; }
        public virtual DbSet<DataflowBatchMappingDetailLog> DataflowBatchMappingDetailLog { get; set; }
        public virtual DbSet<DataflowErrorlog> DataflowErrorlog { get; set; }
        public virtual DbSet<DataflowExclusion> DataflowExclusion { get; set; }
        public virtual DbSet<DataflowExclusionLog> DataflowExclusionLog { get; set; }
        public virtual DbSet<DataflowFieldConfiguration> DataflowFieldConfiguration { get; set; }
        public virtual DbSet<DataflowFieldConfigurationLog> DataflowFieldConfigurationLog { get; set; }
        public virtual DbSet<DataflowFieldConfigurationTemp> DataflowFieldConfigurationTemp { get; set; }
        public virtual DbSet<DataflowMasterisation> DataflowMasterisation { get; set; }
        public virtual DbSet<DataflowMasterisationLog> DataflowMasterisationLog { get; set; }
        public virtual DbSet<DataflowScrubbing> DataflowScrubbing { get; set; }
        public virtual DbSet<DataflowScrubbingLog> DataflowScrubbingLog { get; set; }
        public virtual DbSet<DetailedQueryActionTakenMaster> DetailedQueryActionTakenMaster { get; set; }
        public virtual DbSet<DetectionDisplayControlMaster> DetectionDisplayControlMaster { get; set; }
        public virtual DbSet<DetectionDisplayControlMaster26092018> DetectionDisplayControlMaster26092018 { get; set; }
        public virtual DbSet<DetectionDisplayControlMasterLog> DetectionDisplayControlMasterLog { get; set; }
        public virtual DbSet<DetectionDisplayControlMasterLog26092018> DetectionDisplayControlMasterLog26092018 { get; set; }
        public virtual DbSet<DetectionSearchDetail> DetectionSearchDetail { get; set; }
        public virtual DbSet<DetectionSearchDetail26092018> DetectionSearchDetail26092018 { get; set; }
        public virtual DbSet<DetectionSiteMaster> DetectionSiteMaster { get; set; }
        public virtual DbSet<DetectionSiteMaster26092018> DetectionSiteMaster26092018 { get; set; }
        public virtual DbSet<DetectionSiteMasterLog> DetectionSiteMasterLog { get; set; }
        public virtual DbSet<DetectionSiteMasterLog26092018> DetectionSiteMasterLog26092018 { get; set; }
        public virtual DbSet<DetectionSiteSearchMaster> DetectionSiteSearchMaster { get; set; }
        public virtual DbSet<DetectionSiteSearchMaster26092018> DetectionSiteSearchMaster26092018 { get; set; }
        public virtual DbSet<DetectionSiteSearchMasterlog> DetectionSiteSearchMasterlog { get; set; }
        public virtual DbSet<DetectionSiteSearchMasterlog26092018> DetectionSiteSearchMasterlog26092018 { get; set; }
        public virtual DbSet<DetectionSiteSearchUrl> DetectionSiteSearchUrl { get; set; }
        public virtual DbSet<DetectionSiteSearchUrl26092018> DetectionSiteSearchUrl26092018 { get; set; }
        public virtual DbSet<DiallerExportConfigurationMaster> DiallerExportConfigurationMaster { get; set; }
        public virtual DbSet<DiallerExportConfigurationMasterDeepak> DiallerExportConfigurationMasterDeepak { get; set; }
        public virtual DbSet<DiallerExportConfigurationMasterLog> DiallerExportConfigurationMasterLog { get; set; }
        public virtual DbSet<DiallerLoginLogDetail> DiallerLoginLogDetail { get; set; }
        public virtual DbSet<DiallerTableMaster> DiallerTableMaster { get; set; }
        public virtual DbSet<DiallerTypeMaster> DiallerTypeMaster { get; set; }
        public virtual DbSet<DiallerVersionMaster> DiallerVersionMaster { get; set; }
        public virtual DbSet<Disposition> Disposition { get; set; }
        public virtual DbSet<Disposition04042018> Disposition04042018 { get; set; }
        public virtual DbSet<Disposition09032018> Disposition09032018 { get; set; }
        public virtual DbSet<Disposition1382018> Disposition1382018 { get; set; }
        public virtual DbSet<DispositionControlMapping21082018> DispositionControlMapping21082018 { get; set; }
        public virtual DbSet<DispositionControlMappping> DispositionControlMappping { get; set; }
        public virtual DbSet<DispositionControlMappping121020181712> DispositionControlMappping121020181712 { get; set; }
        public virtual DbSet<DispositionLog> DispositionLog { get; set; }
        public virtual DbSet<DispositionMiscDataMapping> DispositionMiscDataMapping { get; set; }
        public virtual DbSet<DispositionTypeAccessLevelMapping> DispositionTypeAccessLevelMapping { get; set; }
        public virtual DbSet<DispositionTypeAccessLevelMappingLog> DispositionTypeAccessLevelMappingLog { get; set; }
        public virtual DbSet<DispositionTypeMaster> DispositionTypeMaster { get; set; }
        public virtual DbSet<DispositionTypeMasterLog> DispositionTypeMasterLog { get; set; }
        public virtual DbSet<DisputeDetails> DisputeDetails { get; set; }
        public virtual DbSet<DisputeDetailsLog> DisputeDetailsLog { get; set; }
        public virtual DbSet<DynamicDiallerPortalMaster> DynamicDiallerPortalMaster { get; set; }
        public virtual DbSet<DynamicDiallerServiceMaster> DynamicDiallerServiceMaster { get; set; }
        public virtual DbSet<DynamicDiallerVersionMaster> DynamicDiallerVersionMaster { get; set; }
        public virtual DbSet<Edi> Edi { get; set; }
        public virtual DbSet<EdiCuRawDataMaster> EdiCuRawDataMaster { get; set; }
        public virtual DbSet<EdiEuRawDataMaster> EdiEuRawDataMaster { get; set; }
        public virtual DbSet<EdiExecution> EdiExecution { get; set; }
        public virtual DbSet<EdiExecutionError> EdiExecutionError { get; set; }
        public virtual DbSet<EdiFileFormat> EdiFileFormat { get; set; }
        public virtual DbSet<EdiFileStatus> EdiFileStatus { get; set; }
        public virtual DbSet<EdiFileStatusEu> EdiFileStatusEu { get; set; }
        public virtual DbSet<EdiFileUploadMaster> EdiFileUploadMaster { get; set; }
        public virtual DbSet<EdiHeaderColumnMappingMaster> EdiHeaderColumnMappingMaster { get; set; }
        public virtual DbSet<EdiProcessParameters> EdiProcessParameters { get; set; }
        public virtual DbSet<EdiRowTerminatorType> EdiRowTerminatorType { get; set; }
        public virtual DbSet<EdiUploadMaster> EdiUploadMaster { get; set; }
        public virtual DbSet<EmailLog> EmailLog { get; set; }
        public virtual DbSet<EmailMailAttachmentDetail> EmailMailAttachmentDetail { get; set; }
        public virtual DbSet<EmailMailBox> EmailMailBox { get; set; }
        public virtual DbSet<EmailMailBoxLog> EmailMailBoxLog { get; set; }
        public virtual DbSet<EmailMailBoxLogOld17012018> EmailMailBoxLogOld17012018 { get; set; }
        public virtual DbSet<EmailMailDetail> EmailMailDetail { get; set; }
        public virtual DbSet<EmailSlabandMappingDetails> EmailSlabandMappingDetails { get; set; }
        public virtual DbSet<EmailStatusDetail> EmailStatusDetail { get; set; }
        public virtual DbSet<EmailTemplateMappingMaster> EmailTemplateMappingMaster { get; set; }
        public virtual DbSet<EmailTemplateMappingMasterLog> EmailTemplateMappingMasterLog { get; set; }
        public virtual DbSet<EmailTemplateMaster> EmailTemplateMaster { get; set; }
        public virtual DbSet<EmailTemplateMasterLog> EmailTemplateMasterLog { get; set; }
        public virtual DbSet<EmailTicketMappingDetailJunk> EmailTicketMappingDetailJunk { get; set; }
        public virtual DbSet<EmailTicketMappingDetails> EmailTicketMappingDetails { get; set; }
        public virtual DbSet<EmailTocMaster> EmailTocMaster { get; set; }
        public virtual DbSet<EmailTypeMaster> EmailTypeMaster { get; set; }
        public virtual DbSet<EmailVipMailListDetails> EmailVipMailListDetails { get; set; }
        public virtual DbSet<Emaildetails06092016> Emaildetails06092016 { get; set; }
        public virtual DbSet<EmployeeDesignation> EmployeeDesignation { get; set; }
        public virtual DbSet<EmployeeDetails> EmployeeDetails { get; set; }
        public virtual DbSet<EmployeeProcess> EmployeeProcess { get; set; }
        public virtual DbSet<EmployeeRoleMaster> EmployeeRoleMaster { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<EntityMaster> EntityMaster { get; set; }
        public virtual DbSet<ErrorTracer> ErrorTracer { get; set; }
        public virtual DbSet<ErrorTracerCrmToDialer> ErrorTracerCrmToDialer { get; set; }
        public virtual DbSet<EscalationTatmaster> EscalationTatmaster { get; set; }
        public virtual DbSet<EuFileUploadMaster> EuFileUploadMaster { get; set; }
        public virtual DbSet<EuStatusMaster> EuStatusMaster { get; set; }
        public virtual DbSet<EvaluationDetails> EvaluationDetails { get; set; }
        public virtual DbSet<EvaluationMethod> EvaluationMethod { get; set; }
        public virtual DbSet<EvaluationType> EvaluationType { get; set; }
        public virtual DbSet<Ewscategory> Ewscategory { get; set; }
        public virtual DbSet<EwscategoryLog> EwscategoryLog { get; set; }
        public virtual DbSet<EwscategoryOptions> EwscategoryOptions { get; set; }
        public virtual DbSet<EwscategoryOptionsLog> EwscategoryOptionsLog { get; set; }
        public virtual DbSet<EwsdataDetail> EwsdataDetail { get; set; }
        public virtual DbSet<EwsdataDetailLog> EwsdataDetailLog { get; set; }
        public virtual DbSet<EwsdataType> EwsdataType { get; set; }
        public virtual DbSet<Ewsmaster> Ewsmaster { get; set; }
        public virtual DbSet<EwsmasterLog> EwsmasterLog { get; set; }
        public virtual DbSet<EwsparameterMaster> EwsparameterMaster { get; set; }
        public virtual DbSet<EwsstatusMaster> EwsstatusMaster { get; set; }
        public virtual DbSet<EwsstatusMasterLog> EwsstatusMasterLog { get; set; }
        public virtual DbSet<ExcelDataTypeMaster> ExcelDataTypeMaster { get; set; }
        public virtual DbSet<ExternalDataDispositionMaster> ExternalDataDispositionMaster { get; set; }
        public virtual DbSet<ExternalDncmaster> ExternalDncmaster { get; set; }
        public virtual DbSet<FbcommentsDetails> FbcommentsDetails { get; set; }
        public virtual DbSet<FbcommentsDetailsTemp> FbcommentsDetailsTemp { get; set; }
        public virtual DbSet<Fbdetails> Fbdetails { get; set; }
        public virtual DbSet<FbdetailsTemp> FbdetailsTemp { get; set; }
        public virtual DbSet<FbuserMaster> FbuserMaster { get; set; }
        public virtual DbSet<FeedBackDetails> FeedBackDetails { get; set; }
        public virtual DbSet<FileStatusMaster> FileStatusMaster { get; set; }
        public virtual DbSet<FileSynkingDetail> FileSynkingDetail { get; set; }
        public virtual DbSet<FileUploadMaster> FileUploadMaster { get; set; }
        public virtual DbSet<FuFileUploadMasterExternalDnc> FuFileUploadMasterExternalDnc { get; set; }
        public virtual DbSet<GlActivityWorklistTrails> GlActivityWorklistTrails { get; set; }
        public virtual DbSet<GlActivityWorklistTrailsBackup> GlActivityWorklistTrailsBackup { get; set; }
        public virtual DbSet<GlDisposition> GlDisposition { get; set; }
        public virtual DbSet<GlResponsibility> GlResponsibility { get; set; }
        public virtual DbSet<GlactivityMaster> GlactivityMaster { get; set; }
        public virtual DbSet<GlobalUserCallSystemMapping> GlobalUserCallSystemMapping { get; set; }
        public virtual DbSet<GlobalUserCallSystemMappingDefinitions> GlobalUserCallSystemMappingDefinitions { get; set; }
        public virtual DbSet<GlobalUserClients> GlobalUserClients { get; set; }
        public virtual DbSet<GlobalUserProcesss> GlobalUserProcesss { get; set; }
        public virtual DbSet<GlobalUserQueueMapping> GlobalUserQueueMapping { get; set; }
        public virtual DbSet<GlobalUserRoleTypes> GlobalUserRoleTypes { get; set; }
        public virtual DbSet<GlobalUserRoles> GlobalUserRoles { get; set; }
        public virtual DbSet<GlobalUserScript> GlobalUserScript { get; set; }
        public virtual DbSet<GlobalUserScriptLog> GlobalUserScriptLog { get; set; }
        public virtual DbSet<GlobalUserSkillMapping> GlobalUserSkillMapping { get; set; }
        public virtual DbSet<GlobalUserSubProcess> GlobalUserSubProcess { get; set; }
        public virtual DbSet<GlobalUsers> GlobalUsers { get; set; }
        public virtual DbSet<GltaskMaster> GltaskMaster { get; set; }
        public virtual DbSet<HeaderColumnMappingMaster> HeaderColumnMappingMaster { get; set; }
        public virtual DbSet<HeroFincorpClearedCases> HeroFincorpClearedCases { get; set; }
        public virtual DbSet<HfclEdsSoftData> HfclEdsSoftData { get; set; }
        public virtual DbSet<Hrdepartments> Hrdepartments { get; set; }
        public virtual DbSet<HrdepartmentsLog> HrdepartmentsLog { get; set; }
        public virtual DbSet<Hrdivisions> Hrdivisions { get; set; }
        public virtual DbSet<HrdivisionsLog> HrdivisionsLog { get; set; }
        public virtual DbSet<Hrposts> Hrposts { get; set; }
        public virtual DbSet<HrpostsLog> HrpostsLog { get; set; }
        public virtual DbSet<Hrsites> Hrsites { get; set; }
        public virtual DbSet<HrsitesLog> HrsitesLog { get; set; }
        public virtual DbSet<HrsystemSources> HrsystemSources { get; set; }
        public virtual DbSet<HrsystemSourcesLog> HrsystemSourcesLog { get; set; }
        public virtual DbSet<HruserRolesGlobalUsers> HruserRolesGlobalUsers { get; set; }
        public virtual DbSet<HruserRolesGlobalUsers15032018> HruserRolesGlobalUsers15032018 { get; set; }
        public virtual DbSet<KbarticleMaster> KbarticleMaster { get; set; }
        public virtual DbSet<KbarticleMasterLog> KbarticleMasterLog { get; set; }
        public virtual DbSet<KbcategoryMaster> KbcategoryMaster { get; set; }
        public virtual DbSet<KbcategoryMasterLog> KbcategoryMasterLog { get; set; }
        public virtual DbSet<KbsubCategoryMaster> KbsubCategoryMaster { get; set; }
        public virtual DbSet<KbsubCategoryMasterLog> KbsubCategoryMasterLog { get; set; }
        public virtual DbSet<KnowledgeBaseAccessLevelMapping> KnowledgeBaseAccessLevelMapping { get; set; }
        public virtual DbSet<KnowledgeBaseAccessLevelMappingLog> KnowledgeBaseAccessLevelMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseAnalysis> KnowledgeBaseAnalysis { get; set; }
        public virtual DbSet<KnowledgeBaseApprovalMessageDetail> KnowledgeBaseApprovalMessageDetail { get; set; }
        public virtual DbSet<KnowledgeBaseAttachmentDetail> KnowledgeBaseAttachmentDetail { get; set; }
        public virtual DbSet<KnowledgeBaseAttachmentDetailLog> KnowledgeBaseAttachmentDetailLog { get; set; }
        public virtual DbSet<KnowledgeBaseDepartmentLevelMapping> KnowledgeBaseDepartmentLevelMapping { get; set; }
        public virtual DbSet<KnowledgeBaseDepartmentLevelMappingLog> KnowledgeBaseDepartmentLevelMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseDetail> KnowledgeBaseDetail { get; set; }
        public virtual DbSet<KnowledgeBaseDetailLog> KnowledgeBaseDetailLog { get; set; }
        public virtual DbSet<KnowledgeBaseDetailMapping> KnowledgeBaseDetailMapping { get; set; }
        public virtual DbSet<KnowledgeBaseDetailMapping31072018> KnowledgeBaseDetailMapping31072018 { get; set; }
        public virtual DbSet<KnowledgeBaseDetailMappingLog> KnowledgeBaseDetailMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseFaqaccessDetails> KnowledgeBaseFaqaccessDetails { get; set; }
        public virtual DbSet<KnowledgeBaseFaqmapping> KnowledgeBaseFaqmapping { get; set; }
        public virtual DbSet<KnowledgeBaseFaqmappingLog> KnowledgeBaseFaqmappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseFaqmaster> KnowledgeBaseFaqmaster { get; set; }
        public virtual DbSet<KnowledgeBaseFaqmasterLog> KnowledgeBaseFaqmasterLog { get; set; }
        public virtual DbSet<KnowledgeBaseFaqsearchDetails> KnowledgeBaseFaqsearchDetails { get; set; }
        public virtual DbSet<KnowledgeBaseFaqtype> KnowledgeBaseFaqtype { get; set; }
        public virtual DbSet<KnowledgeBaseFeedbackDetail> KnowledgeBaseFeedbackDetail { get; set; }
        public virtual DbSet<KnowledgeBaseFeedbackDetailLog> KnowledgeBaseFeedbackDetailLog { get; set; }
        public virtual DbSet<KnowledgeBaseKeywordsMapping> KnowledgeBaseKeywordsMapping { get; set; }
        public virtual DbSet<KnowledgeBaseKeywordsMappingLog> KnowledgeBaseKeywordsMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseLog> KnowledgeBaseLog { get; set; }
        public virtual DbSet<KnowledgeBaseMaster> KnowledgeBaseMaster { get; set; }
        public virtual DbSet<KnowledgeBaseMasterLog> KnowledgeBaseMasterLog { get; set; }
        public virtual DbSet<KnowledgeBaseNodeAnalysis> KnowledgeBaseNodeAnalysis { get; set; }
        public virtual DbSet<KnowledgeBaseProcessLevelMapping> KnowledgeBaseProcessLevelMapping { get; set; }
        public virtual DbSet<KnowledgeBaseProcessLevelMappingLog> KnowledgeBaseProcessLevelMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseScriptLevelMapping> KnowledgeBaseScriptLevelMapping { get; set; }
        public virtual DbSet<KnowledgeBaseScriptLevelMappingLog> KnowledgeBaseScriptLevelMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseStatusHistory> KnowledgeBaseStatusHistory { get; set; }
        public virtual DbSet<KnowledgeBaseStatusHistoryLog> KnowledgeBaseStatusHistoryLog { get; set; }
        public virtual DbSet<KnowledgeBaseVersionDetail> KnowledgeBaseVersionDetail { get; set; }
        public virtual DbSet<KnowledgeBaseVersionDetailLog> KnowledgeBaseVersionDetailLog { get; set; }
        public virtual DbSet<KnowledgeBaseVersionDetailMapping> KnowledgeBaseVersionDetailMapping { get; set; }
        public virtual DbSet<KnowledgeBaseVersionDetailMappingLog> KnowledgeBaseVersionDetailMappingLog { get; set; }
        public virtual DbSet<KnowledgeBaseVersionMaster> KnowledgeBaseVersionMaster { get; set; }
        public virtual DbSet<KnowledgeBaseVersionMasterLog> KnowledgeBaseVersionMasterLog { get; set; }
        public virtual DbSet<LanguageMaster> LanguageMaster { get; set; }
        public virtual DbSet<LoginLogDetail> LoginLogDetail { get; set; }
        public virtual DbSet<LoginMaster> LoginMaster { get; set; }
        public virtual DbSet<LoginMaster17072018> LoginMaster17072018 { get; set; }
        public virtual DbSet<LoginMasterBackUp02012019> LoginMasterBackUp02012019 { get; set; }
        public virtual DbSet<LoginMasterLog> LoginMasterLog { get; set; }
        public virtual DbSet<LoginMasterRamu02052018> LoginMasterRamu02052018 { get; set; }
        public virtual DbSet<MailGroupMaster> MailGroupMaster { get; set; }
        public virtual DbSet<MailGroupMasterLog> MailGroupMasterLog { get; set; }
        public virtual DbSet<ManualSmssend> ManualSmssend { get; set; }
        public virtual DbSet<MarketMaster> MarketMaster { get; set; }
        public virtual DbSet<MenuMaster> MenuMaster { get; set; }
        public virtual DbSet<MenuMasterDetail> MenuMasterDetail { get; set; }
        public virtual DbSet<MenuMasterDetailLog> MenuMasterDetailLog { get; set; }
        public virtual DbSet<MenuMasterExceptionDetail> MenuMasterExceptionDetail { get; set; }
        public virtual DbSet<MenuMasterExceptionDetailLog> MenuMasterExceptionDetailLog { get; set; }
        public virtual DbSet<MessageBroadcast> MessageBroadcast { get; set; }
        public virtual DbSet<MessageBroadcastCategory> MessageBroadcastCategory { get; set; }
        public virtual DbSet<MessageBroadcastLog> MessageBroadcastLog { get; set; }
        public virtual DbSet<MessageBroadcastLog1> MessageBroadcastLog1 { get; set; }
        public virtual DbSet<MessageBroadcastMapping> MessageBroadcastMapping { get; set; }
        public virtual DbSet<MessageBroadcastMappingLog> MessageBroadcastMappingLog { get; set; }
        public virtual DbSet<MessageBroadcastRead> MessageBroadcastRead { get; set; }
        public virtual DbSet<MigrationHistory> MigrationHistory { get; set; }
        public virtual DbSet<MilestoneDetails> MilestoneDetails { get; set; }
        public virtual DbSet<MiscColValidationMaster> MiscColValidationMaster { get; set; }
        public virtual DbSet<MiscColumnMaster> MiscColumnMaster { get; set; }
        public virtual DbSet<MiscColumnMasterLog> MiscColumnMasterLog { get; set; }
        public virtual DbSet<MiscColumnMasterRamu03052018> MiscColumnMasterRamu03052018 { get; set; }
        public virtual DbSet<MiscExternalDataColMaster> MiscExternalDataColMaster { get; set; }
        public virtual DbSet<MiscExternalDataColMasterLog> MiscExternalDataColMasterLog { get; set; }
        public virtual DbSet<MiscExternalDataTypeMaster> MiscExternalDataTypeMaster { get; set; }
        public virtual DbSet<MiscExternalDataTypeMasterLog> MiscExternalDataTypeMasterLog { get; set; }
        public virtual DbSet<MiscExternalListDataMaster> MiscExternalListDataMaster { get; set; }
        public virtual DbSet<MiscExternalListDataMasterLog> MiscExternalListDataMasterLog { get; set; }
        public virtual DbSet<MiscListDataMaster> MiscListDataMaster { get; set; }
        public virtual DbSet<MiscListDataMaster18052018> MiscListDataMaster18052018 { get; set; }
        public virtual DbSet<MiscListDataMasterLog> MiscListDataMasterLog { get; set; }
        public virtual DbSet<MiscSearchDataColMaster> MiscSearchDataColMaster { get; set; }
        public virtual DbSet<MiscSearchDataMaster> MiscSearchDataMaster { get; set; }
        public virtual DbSet<MiscSearchMaster> MiscSearchMaster { get; set; }
        public virtual DbSet<MiscSearchTypeMaster> MiscSearchTypeMaster { get; set; }
        public virtual DbSet<ObScriptTypeMaster> ObScriptTypeMaster { get; set; }
        public virtual DbSet<ObscriptDetails> ObscriptDetails { get; set; }
        public virtual DbSet<ObscriptDetailsLog> ObscriptDetailsLog { get; set; }
        public virtual DbSet<ObscriptMaster> ObscriptMaster { get; set; }
        public virtual DbSet<ObscriptMasterLog> ObscriptMasterLog { get; set; }
        public virtual DbSet<OcrData> OcrData { get; set; }
        public virtual DbSet<OnHoldResolution> OnHoldResolution { get; set; }
        public virtual DbSet<OperatorMaster> OperatorMaster { get; set; }
        public virtual DbSet<OutcomeControlAccessLevelDetail> OutcomeControlAccessLevelDetail { get; set; }
        public virtual DbSet<OutcomeControlAccessLevelDetailLog> OutcomeControlAccessLevelDetailLog { get; set; }
        public virtual DbSet<OutcomeControlMappingDetail> OutcomeControlMappingDetail { get; set; }
        public virtual DbSet<OutcomeControlMappingDetailLog> OutcomeControlMappingDetailLog { get; set; }
        public virtual DbSet<OutcomeMaster> OutcomeMaster { get; set; }
        public virtual DbSet<OutcomeMasterLog> OutcomeMasterLog { get; set; }
        public virtual DbSet<PriorityMaster> PriorityMaster { get; set; }
        public virtual DbSet<PriorityUsers> PriorityUsers { get; set; }
        public virtual DbSet<PriorityUsersLog> PriorityUsersLog { get; set; }
        public virtual DbSet<ProcessLoginMappingDetail> ProcessLoginMappingDetail { get; set; }
        public virtual DbSet<ProcessLoginMappingDetailLog> ProcessLoginMappingDetailLog { get; set; }
        public virtual DbSet<ProcessLoginMappingDetailLogRamu14052018> ProcessLoginMappingDetailLogRamu14052018 { get; set; }
        public virtual DbSet<ProcessMaster> ProcessMaster { get; set; }
        public virtual DbSet<ProcessMasterLog> ProcessMasterLog { get; set; }
        public virtual DbSet<ProcessorEscalationTrails> ProcessorEscalationTrails { get; set; }
        public virtual DbSet<ProcessorTrailsDetails> ProcessorTrailsDetails { get; set; }
        public virtual DbSet<ProjectAccessMappingMaster> ProjectAccessMappingMaster { get; set; }
        public virtual DbSet<PublishKeyMapDialler> PublishKeyMapDialler { get; set; }
        public virtual DbSet<QmsAuditSheetCategoryConfigMaster> QmsAuditSheetCategoryConfigMaster { get; set; }
        public virtual DbSet<QmsAuditSheetConfiguration> QmsAuditSheetConfiguration { get; set; }
        public virtual DbSet<QmsAuditSheetConfigurationLog> QmsAuditSheetConfigurationLog { get; set; }
        public virtual DbSet<QmsAuditSheetMaster> QmsAuditSheetMaster { get; set; }
        public virtual DbSet<QmsAuditSheetMasterlog> QmsAuditSheetMasterlog { get; set; }
        public virtual DbSet<QmsAuditSheetScriptMapping> QmsAuditSheetScriptMapping { get; set; }
        public virtual DbSet<QmsAuditSheetScriptMappingLog> QmsAuditSheetScriptMappingLog { get; set; }
        public virtual DbSet<QmsScoreSectionVisibility> QmsScoreSectionVisibility { get; set; }
        public virtual DbSet<QmsVwAuditViewSheetMaster> QmsVwAuditViewSheetMaster { get; set; }
        public virtual DbSet<QueryTypeMaster> QueryTypeMaster { get; set; }
        public virtual DbSet<QueueMaster> QueueMaster { get; set; }
        public virtual DbSet<QueueMasterLog> QueueMasterLog { get; set; }
        public virtual DbSet<ReTweetDetails> ReTweetDetails { get; set; }
        public virtual DbSet<ReTweetDetailsTemp> ReTweetDetailsTemp { get; set; }
        public virtual DbSet<ReportDetailPackGenerator> ReportDetailPackGenerator { get; set; }
        public virtual DbSet<ReportDumpPackMaster> ReportDumpPackMaster { get; set; }
        public virtual DbSet<ReportDumpPackMasterLog> ReportDumpPackMasterLog { get; set; }
        public virtual DbSet<ReportFolder> ReportFolder { get; set; }
        public virtual DbSet<ReportFolder10052018> ReportFolder10052018 { get; set; }
        public virtual DbSet<ReportGroupMaster> ReportGroupMaster { get; set; }
        public virtual DbSet<ReportMaster> ReportMaster { get; set; }
        public virtual DbSet<ReportMasterAdditionalDetail> ReportMasterAdditionalDetail { get; set; }
        public virtual DbSet<ReportMasterDetail> ReportMasterDetail { get; set; }
        public virtual DbSet<ReportMasterDetail10052018> ReportMasterDetail10052018 { get; set; }
        public virtual DbSet<ReportMasterDetailLog> ReportMasterDetailLog { get; set; }
        public virtual DbSet<ReportMasterUidetail> ReportMasterUidetail { get; set; }
        public virtual DbSet<ReportMasterUidetail10052018> ReportMasterUidetail10052018 { get; set; }
        public virtual DbSet<ReportMasterUidetailExt> ReportMasterUidetailExt { get; set; }
        public virtual DbSet<ReportMasterUidetailExt10052018> ReportMasterUidetailExt10052018 { get; set; }
        public virtual DbSet<ReportMasterUistaticData> ReportMasterUistaticData { get; set; }
        public virtual DbSet<ReportServer> ReportServer { get; set; }
        public virtual DbSet<ReportServer10052018> ReportServer10052018 { get; set; }
        public virtual DbSet<ReportStatusMaster> ReportStatusMaster { get; set; }
        public virtual DbSet<ReportTypeMaster> ReportTypeMaster { get; set; }
        public virtual DbSet<RtmprocessMaster> RtmprocessMaster { get; set; }
        public virtual DbSet<RtmtimeZoneMaster> RtmtimeZoneMaster { get; set; }
        public virtual DbSet<SameDayDuplicateEntryLog> SameDayDuplicateEntryLog { get; set; }
        public virtual DbSet<Samlclients> Samlclients { get; set; }
        public virtual DbSet<ScenarioMaster> ScenarioMaster { get; set; }
        public virtual DbSet<ScheduleTask> ScheduleTask { get; set; }
        public virtual DbSet<ScriptDiallerPortalMappingMaster> ScriptDiallerPortalMappingMaster { get; set; }
        public virtual DbSet<ScriptDiallerSetting> ScriptDiallerSetting { get; set; }
        public virtual DbSet<ScriptDiallerSettingRamu04052018> ScriptDiallerSettingRamu04052018 { get; set; }
        public virtual DbSet<ScriptMailboxMappingDetail> ScriptMailboxMappingDetail { get; set; }
        public virtual DbSet<ScriptMailboxMappingDetailLog> ScriptMailboxMappingDetailLog { get; set; }
        public virtual DbSet<ScriptMailing> ScriptMailing { get; set; }
        public virtual DbSet<ScriptMiscSettings> ScriptMiscSettings { get; set; }
        public virtual DbSet<ScriptTabMaster> ScriptTabMaster { get; set; }
        public virtual DbSet<ScriptTabMasterLog> ScriptTabMasterLog { get; set; }
        public virtual DbSet<ScrubbingOperatorMaster> ScrubbingOperatorMaster { get; set; }
        public virtual DbSet<SecurityQuestions> SecurityQuestions { get; set; }
        public virtual DbSet<ServerMaster> ServerMaster { get; set; }
        public virtual DbSet<SessionDataColumnMaster> SessionDataColumnMaster { get; set; }
        public virtual DbSet<SkillMaster> SkillMaster { get; set; }
        public virtual DbSet<SkillMasterLog> SkillMasterLog { get; set; }
        public virtual DbSet<SlabandMaster> SlabandMaster { get; set; }
        public virtual DbSet<SmedepartmentMappingDetails> SmedepartmentMappingDetails { get; set; }
        public virtual DbSet<Smemaster> Smemaster { get; set; }
        public virtual DbSet<SmsTemplate> SmsTemplate { get; set; }
        public virtual DbSet<Smsddetails> Smsddetails { get; set; }
        public virtual DbSet<SmsddetailsLog> SmsddetailsLog { get; set; }
        public virtual DbSet<SmstextMaster> SmstextMaster { get; set; }
        public virtual DbSet<SmstypeMaster> SmstypeMaster { get; set; }
        public virtual DbSet<SmstypeMasterLog> SmstypeMasterLog { get; set; }
        public virtual DbSet<SocialMediaComment> SocialMediaComment { get; set; }
        public virtual DbSet<SocialMediaCommentTemp> SocialMediaCommentTemp { get; set; }
        public virtual DbSet<SocialMediaPageConfiguration> SocialMediaPageConfiguration { get; set; }
        public virtual DbSet<SocialMediaPageConfigurationLog> SocialMediaPageConfigurationLog { get; set; }
        public virtual DbSet<SocialMediaPost> SocialMediaPost { get; set; }
        public virtual DbSet<SocialMediaPostTemp> SocialMediaPostTemp { get; set; }
        public virtual DbSet<SocialMediaXml> SocialMediaXml { get; set; }
        public virtual DbSet<StaticPagesMaster> StaticPagesMaster { get; set; }
        public virtual DbSet<StatusMaster> StatusMaster { get; set; }
        public virtual DbSet<SubOutcomeMaster> SubOutcomeMaster { get; set; }
        public virtual DbSet<SubOutcomeMasterLog> SubOutcomeMasterLog { get; set; }
        public virtual DbSet<SubOutcomeTypeMaster> SubOutcomeTypeMaster { get; set; }
        public virtual DbSet<SubProcessLoginMappingDetail> SubProcessLoginMappingDetail { get; set; }
        public virtual DbSet<SubProcessLoginMappingDetailLog> SubProcessLoginMappingDetailLog { get; set; }
        public virtual DbSet<SubProcessMaster> SubProcessMaster { get; set; }
        public virtual DbSet<SubProcessMasterLog> SubProcessMasterLog { get; set; }
        public virtual DbSet<SubQueueMaster> SubQueueMaster { get; set; }
        public virtual DbSet<SyncMappingDetail> SyncMappingDetail { get; set; }
        public virtual DbSet<SyncMappingDetailLog> SyncMappingDetailLog { get; set; }
        public virtual DbSet<SyncStatusDetail> SyncStatusDetail { get; set; }
        public virtual DbSet<SyncTableMaster> SyncTableMaster { get; set; }
        public virtual DbSet<SyncTypeMaster> SyncTypeMaster { get; set; }
        public virtual DbSet<TableChangeLogMaster> TableChangeLogMaster { get; set; }
        public virtual DbSet<TaxMaster> TaxMaster { get; set; }
        public virtual DbSet<TblCourse> TblCourse { get; set; }
        public virtual DbSet<TblCustomer> TblCustomer { get; set; }
        public virtual DbSet<TblEmailSearchAutocomplete> TblEmailSearchAutocomplete { get; set; }
        public virtual DbSet<TblInsertTransCommit> TblInsertTransCommit { get; set; }
        public virtual DbSet<TblOrders> TblOrders { get; set; }
        public virtual DbSet<TblState> TblState { get; set; }
        public virtual DbSet<TblStudent> TblStudent { get; set; }
        public virtual DbSet<TblWebServicesAuthentication> TblWebServicesAuthentication { get; set; }
        public virtual DbSet<TeamMailGroupMappingDetail> TeamMailGroupMappingDetail { get; set; }
        public virtual DbSet<TeamMailGroupMappingDetailLog> TeamMailGroupMappingDetailLog { get; set; }
        public virtual DbSet<TeamMaster> TeamMaster { get; set; }
        public virtual DbSet<TeamMasterLog> TeamMasterLog { get; set; }
        public virtual DbSet<TeamTicketMappingDetail> TeamTicketMappingDetail { get; set; }
        public virtual DbSet<TeamUserMappingDetail> TeamUserMappingDetail { get; set; }
        public virtual DbSet<TeamUserMappingDetailLog> TeamUserMappingDetailLog { get; set; }
        public virtual DbSet<TempMenuMasterDetail> TempMenuMasterDetail { get; set; }
        public virtual DbSet<Tempdata> Tempdata { get; set; }
        public virtual DbSet<ThemeMaster> ThemeMaster { get; set; }
        public virtual DbSet<TicketAssignmentDetail> TicketAssignmentDetail { get; set; }
        public virtual DbSet<TicketDescription> TicketDescription { get; set; }
        public virtual DbSet<TicketDescriptionLog> TicketDescriptionLog { get; set; }
        public virtual DbSet<TicketDetails> TicketDetails { get; set; }
        public virtual DbSet<TicketDetailsLog> TicketDetailsLog { get; set; }
        public virtual DbSet<TicketSmeemailDetails> TicketSmeemailDetails { get; set; }
        public virtual DbSet<TicketStatusMaster> TicketStatusMaster { get; set; }
        public virtual DbSet<TimeZoneMaster> TimeZoneMaster { get; set; }
        public virtual DbSet<TimezoneDlconfig> TimezoneDlconfig { get; set; }
        public virtual DbSet<TweetDetails> TweetDetails { get; set; }
        public virtual DbSet<TweetDetailsTemp> TweetDetailsTemp { get; set; }
        public virtual DbSet<TwitterTemplate> TwitterTemplate { get; set; }
        public virtual DbSet<TwitterUserMaster> TwitterUserMaster { get; set; }
        public virtual DbSet<UserDefaultRedirect> UserDefaultRedirect { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserProfileDetail> UserProfileDetail { get; set; }
        public virtual DbSet<UserProfileDetailLog> UserProfileDetailLog { get; set; }
        public virtual DbSet<UserSecuirtyQuestions> UserSecuirtyQuestions { get; set; }
        public virtual DbSet<UserSecuirtyQuestionsLog> UserSecuirtyQuestionsLog { get; set; }
        public virtual DbSet<VendorMaster> VendorMaster { get; set; }
        public virtual DbSet<WatActionStatusDetail> WatActionStatusDetail { get; set; }
        public virtual DbSet<WatActionStatusMaster> WatActionStatusMaster { get; set; }
        public virtual DbSet<WatActivityDataDetail> WatActivityDataDetail { get; set; }
        public virtual DbSet<WebApiMaster> WebApiMaster { get; set; }
        public virtual DbSet<WebApiOutputDetail> WebApiOutputDetail { get; set; }
        public virtual DbSet<WebApiParameterDetail> WebApiParameterDetail { get; set; }
        public virtual DbSet<Webapimaster9may2019> Webapimaster9may2019 { get; set; }
        public virtual DbSet<WeekMaster> WeekMaster { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=PC170707453;Database=RTM;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccessDid)
                    .HasColumnName("AccessDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");
            });

            modelBuilder.Entity<AccessDetailLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccessDid).HasColumnName("AccessDID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");
            });

            modelBuilder.Entity<AccessGroupMst>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccessGroupMST");

                entity.Property(e => e.AccessGmid)
                    .HasColumnName("AccessGMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");

                entity.Property(e => e.Smdescription)
                    .HasColumnName("SMDescription")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AccessGroupType>(entity =>
            {
                entity.HasKey(e => e.AccessGroupTypeMid);

                entity.Property(e => e.AccessGroupTypeMid).HasColumnName("AccessGroupTypeMID");

                entity.Property(e => e.AccessGroupType1)
                    .HasColumnName("AccessGroupType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Applicable)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Ops')");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AccessLevelDispositionAction>(entity =>
            {
                entity.HasKey(e => e.AccessLevelDispositionAid);

                entity.Property(e => e.AccessLevelDispositionAid).HasColumnName("AccessLevelDispositionAID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<AccessLevelGroupMapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccessGroupTypeId).HasColumnName("AccessGroupTypeID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AccessLevelMaster>(entity =>
            {
                entity.HasKey(e => e.AccessLmid);

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.AccessGroupTypeId).HasColumnName("AccessGroupTypeID");

                entity.Property(e => e.Accesslevel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AccessLevelStaticPages>(entity =>
            {
                entity.HasKey(e => e.AccessLspid)
                    .HasName("PK_AccessLevelMenuDetail");

                entity.Property(e => e.AccessLspid).HasColumnName("AccessLSPID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Smdescription)
                    .HasColumnName("SMDescription")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StaticPagesId).HasColumnName("StaticPagesID");
            });

            modelBuilder.Entity<AccountThemeDetails>(entity =>
            {
                entity.HasKey(e => e.ThemeDid);

                entity.Property(e => e.ThemeDid).HasColumnName("ThemeDID");

                entity.Property(e => e.BodyHeadingText)
                    .HasColumnName("bodyHeadingText")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ButtonBackground)
                    .HasColumnName("buttonBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ButtonBackgroundHover)
                    .HasColumnName("buttonBackgroundHover")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ButtonTextColor)
                    .HasColumnName("buttonTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ButtonTextColorHover)
                    .HasColumnName("buttonTextColorHover")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FooterBackground)
                    .HasColumnName("footerBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FooterTextColor)
                    .HasColumnName("footerTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderBackgroundColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MenuBackground)
                    .HasColumnName("menuBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MenuTextColor)
                    .HasColumnName("menuTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PopupHeaderBackground)
                    .HasColumnName("popupHeaderBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PopupHeaderCloseTextColor)
                    .HasColumnName("popupHeaderCloseTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PopupHeaderTextColor)
                    .HasColumnName("popupHeaderTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenuNextPreBackground)
                    .HasColumnName("rightMenuNextPreBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenuNextPreBackgroundHover)
                    .HasColumnName("rightMenuNextPreBackgroundHover")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenuNextPreTextColor)
                    .HasColumnName("rightMenuNextPreTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenuNextPreTextColorHover)
                    .HasColumnName("rightMenuNextPreTextColorHover")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenuTextColor)
                    .HasColumnName("rightMenuTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenubackground)
                    .HasColumnName("rightMenubackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RightMenuborder)
                    .HasColumnName("rightMenuborder")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SearchButtonBackground)
                    .HasColumnName("searchButtonBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SearchButtonBackgroundHover)
                    .HasColumnName("searchButtonBackgroundHover")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SearchButtonTextColor)
                    .HasColumnName("searchButtonTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SearchButtonTextColorHover)
                    .HasColumnName("searchButtonTextColorHover")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StylesheetName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TableBackground)
                    .HasColumnName("tableBackground")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.WelcomeTextColor)
                    .HasColumnName("welcomeTextColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActionLtwoLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Action_LTwoLog");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.ActionLogId)
                    .HasColumnName("ActionLogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AttachmentFileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CallHistoryMid).HasColumnName("CallHistoryMID");

                entity.Property(e => e.Chmnumber)
                    .HasColumnName("CHMNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.ContentType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdditionalAccessDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Createddatetime)
                    .HasColumnName("createddatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Freezestatus)
                    .HasColumnName("freezestatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PageName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AdditionalMiscControlDetails>(entity =>
            {
                entity.HasKey(e => e.MappingMid);

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DependentMiscMid).HasColumnName("DependentMiscMID");

                entity.Property(e => e.DependentMiscTypeId).HasColumnName("DependentMiscTypeID");

                entity.Property(e => e.EncMiscDid)
                    .HasColumnName("EncMiscDID")
                    .IsUnicode(false)
                    .HasComputedColumnSql("([dbo].[fn_str_TO_BASE64]([MiscDID]))");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsHidden).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Validation)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AdditionalMiscControlDetailsLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("AdditionalMiscControlDetails_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DependentMiscMid).HasColumnName("DependentMiscMID");

                entity.Property(e => e.DependentMiscTypeId).HasColumnName("DependentMiscTypeID");

                entity.Property(e => e.EncMiscDid)
                    .HasColumnName("EncMiscDID")
                    .IsUnicode(false)
                    .HasComputedColumnSql("([dbo].[fn_str_TO_BASE64]([MiscDID]))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Validation)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Admaster>(entity =>
            {
                entity.HasKey(e => e.Admid);

                entity.ToTable("ADMaster");

                entity.Property(e => e.Admid).HasColumnName("ADMID");

                entity.Property(e => e.Adname)
                    .HasColumnName("ADName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Adpath)
                    .HasColumnName("ADPath")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdminRoleAssignDetail>(entity =>
            {
                entity.HasKey(e => e.AdminRadid)
                    .HasName("PK__Admin_Ro__B281630858E70A0D");

                entity.ToTable("Admin_RoleAssignDetail");

                entity.Property(e => e.AdminRadid).HasColumnName("AdminRADID");

                entity.Property(e => e.AssignedRoleEndDate).HasColumnType("datetime");

                entity.Property(e => e.AssignedRoleStartDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMidRoleAssignedBy).HasColumnName("LoginMID_RoleAssignedBy");

                entity.Property(e => e.LoginMidRoleAssignedTo).HasColumnName("LoginMID_RoleAssignedTo");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdminRoleAssignDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Admin_Ro__5E5499A8660BFB01");

                entity.ToTable("Admin_RoleAssignDetailLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AdminRadid).HasColumnName("AdminRADID");

                entity.Property(e => e.AssignedRoleEndDate).HasColumnType("date");

                entity.Property(e => e.AssignedRoleStartDate).HasColumnType("date");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMidRoleAssignedBy).HasColumnName("LoginMID_RoleAssignedBy");

                entity.Property(e => e.LoginMidRoleAssignedTo).HasColumnName("LoginMID_RoleAssignedTo");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdvisorDetailsHierarachyView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AdvisorDetailsHierarachyView");

                entity.Property(e => e.AdvisorEmployeeName).HasMaxLength(100);

                entity.Property(e => e.AdvisorEmployeeNumber).HasMaxLength(50);

                entity.Property(e => e.AdvisorManager).HasMaxLength(100);

                entity.Property(e => e.AdvisorTeamLeader).HasMaxLength(100);

                entity.Property(e => e.AdvisorTeamManager).HasMaxLength(100);

                entity.Property(e => e.DateOfJoining).HasColumnType("datetime");

                entity.Property(e => e.Isactive).HasColumnName("ISActive");

                entity.Property(e => e.Process).HasMaxLength(100);

                entity.Property(e => e.ProductionDate).HasColumnType("datetime");

                entity.Property(e => e.Tenure)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.WindowsLoginId)
                    .HasColumnName("WindowsLoginID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AlkemBrandCustomerDiscountMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Alkem_BrandCustomerDiscountMapping");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DiscountMid)
                    .HasColumnName("DiscountMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AlkemBrandCustomerDiscountMappingLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Alkem_BrandCustomerDiscountMapping_Log");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DiscountLogMid)
                    .HasColumnName("DiscountLogMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DiscountMid).HasColumnName("DiscountMID");

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemDivisionMaster>(entity =>
            {
                entity.HasKey(e => e.DivisionId);

                entity.ToTable("Alkem_DivisionMaster");

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DivisionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemDivisionMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("Alkem_DivisionMaster_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.DivisionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemEmailTicketStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Alkem_EmailTicketStatus");

                entity.Property(e => e.CallBackComments).IsUnicode(false);

                entity.Property(e => e.CallBackDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TicketId).HasColumnName("TicketID");
            });

            modelBuilder.Entity<AlkemProductBrandMaster>(entity =>
            {
                entity.HasKey(e => e.ProductBrandId);

                entity.ToTable("Alkem_ProductBrandMaster");

                entity.Property(e => e.ProductBrandId).HasColumnName("ProductBrandID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProductBrandName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemProductBrandMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("Alkem_ProductBrandMaster_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProductBrandId).HasColumnName("ProductBrandID");

                entity.Property(e => e.ProductBrandName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemProductMaster>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.ToTable("Alkem_ProductMaster");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProductBrandId).HasColumnName("ProductBrandID");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemProductMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("Alkem_ProductMaster_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProductBrandId).HasColumnName("ProductBrandID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AlkemUserDivisionMapping>(entity =>
            {
                entity.HasKey(e => e.AlkemUserDivisionMid);

                entity.Property(e => e.AlkemUserDivisionMid).HasColumnName("AlkemUserDivisionMID");

                entity.Property(e => e.AlkemUserId).HasColumnName("AlkemUserID");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DivisionId).HasColumnName("DivisionID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AlkemUserMaster>(entity =>
            {
                entity.HasKey(e => e.AlkemUserId);

                entity.ToTable("Alkem_UserMaster");

                entity.Property(e => e.AlkemUserId).HasColumnName("AlkemUserID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Freezestatus)
                    .HasColumnName("freezestatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApIndexerInvoiceProcessing>(entity =>
            {
                entity.ToTable("AP_Indexer_InvoiceProcessing");

                entity.Property(e => e.ApindexerInvoiceProcessingId)
                    .HasColumnName("APIndexerInvoiceProcessingID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BatchId)
                    .HasColumnName("BatchID")
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryOnHold).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DetailedQueryActionTaken).HasMaxLength(100);

                entity.Property(e => e.EmailSendDate).HasMaxLength(50);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.EntryDate)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpenseType).HasMaxLength(100);

                entity.Property(e => e.Followup1Comment).HasMaxLength(500);

                entity.Property(e => e.Followup1EmailDate).HasMaxLength(50);

                entity.Property(e => e.Followup1EmailFrom).HasMaxLength(50);

                entity.Property(e => e.Followup1EmailSubject).HasMaxLength(50);

                entity.Property(e => e.Followup1EmailTo).HasMaxLength(50);

                entity.Property(e => e.Followup1date).HasMaxLength(50);

                entity.Property(e => e.Glcode)
                    .HasColumnName("GLCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Gpnumber)
                    .HasColumnName("GPNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.GppostedDate)
                    .HasColumnName("GPPostedDate")
                    .HasMaxLength(50);

                entity.Property(e => e.GpvoucherId)
                    .HasColumnName("GPVoucherID")
                    .HasMaxLength(50);

                entity.Property(e => e.Grnno)
                    .HasColumnName("GRNNo")
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceCategory).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryType).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate).HasMaxLength(50);

                entity.Property(e => e.InvoiceDescription).HasMaxLength(50);

                entity.Property(e => e.InvoiceEndTime).HasMaxLength(50);

                entity.Property(e => e.InvoiceFirstTouchDate).HasMaxLength(50);

                entity.Property(e => e.InvoiceNumber).HasMaxLength(50);

                entity.Property(e => e.InvoiceQuantity).HasMaxLength(50);

                entity.Property(e => e.InvoiceStartDate).HasMaxLength(50);

                entity.Property(e => e.InvoiceState)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('Received')");

                entity.Property(e => e.OnHoldReason).HasMaxLength(150);

                entity.Property(e => e.OnHoldReasonComment).HasMaxLength(50);

                entity.Property(e => e.OnHoldResolution).HasMaxLength(150);

                entity.Property(e => e.OnHoldResolutionDate).HasMaxLength(50);

                entity.Property(e => e.PoNonPo).HasMaxLength(50);

                entity.Property(e => e.PoQuantityUsed).HasMaxLength(50);

                entity.Property(e => e.Ponumber)
                    .HasColumnName("PONumber")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessingDate).HasMaxLength(50);

                entity.Property(e => e.QueryType).HasMaxLength(50);

                entity.Property(e => e.Recjection).HasMaxLength(50);

                entity.Property(e => e.Requisitioner).HasMaxLength(100);

                entity.Property(e => e.Role).HasMaxLength(50);

                entity.Property(e => e.SecondaryReasons).HasMaxLength(100);

                entity.Property(e => e.StartTime).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubTotal).HasMaxLength(50);

                entity.Property(e => e.TotalAmount).HasMaxLength(50);

                entity.Property(e => e.UnitId)
                    .HasColumnName("UnitID")
                    .HasMaxLength(50);

                entity.Property(e => e.VatTax).HasMaxLength(50);

                entity.Property(e => e.VendorEmailId)
                    .HasColumnName("VendorEmailID")
                    .HasMaxLength(100);

                entity.Property(e => e.VendorId)
                    .HasColumnName("VendorID")
                    .HasMaxLength(50);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorPhoneNo).HasMaxLength(100);

                entity.Property(e => e.VoidedReason).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedDate).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedInvAmt).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedInvNo).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedVendorId)
                    .HasColumnName("VoidedReprocessedVendorID")
                    .HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedVendorName).HasMaxLength(50);

                entity.Property(e => e.VoidedTransactionDate).HasMaxLength(50);

                entity.Property(e => e.WorkplaceId)
                    .HasColumnName("WorkplaceID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ApIndexerInvoiceProcessingOutcomeDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AP_Indexer_InvoiceProcessing_OutcomeDetails");

                entity.Property(e => e.ApindexerInvoiceProcessingId)
                    .HasColumnName("APIndexerInvoiceProcessingID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ApindexerInvoiceProcessingOutcomeDetailsId)
                    .HasColumnName("APIndexerInvoiceProcessingOutcomeDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BatchId)
                    .HasColumnName("BatchID")
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryOnHold).HasMaxLength(50);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DetailedQueryActionTaken).HasMaxLength(100);

                entity.Property(e => e.EntryDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.Followup1Comment).HasMaxLength(500);

                entity.Property(e => e.Followup1EmailDate).HasMaxLength(50);

                entity.Property(e => e.Followup1EmailFrom).HasMaxLength(50);

                entity.Property(e => e.Followup1EmailSubject).HasMaxLength(50);

                entity.Property(e => e.Followup1EmailTo).HasMaxLength(50);

                entity.Property(e => e.Followup1date).HasMaxLength(50);

                entity.Property(e => e.Gpnumber)
                    .HasColumnName("GPNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.GppostedDate)
                    .HasColumnName("GPPostedDate")
                    .HasMaxLength(50);

                entity.Property(e => e.GpvoucherId)
                    .HasColumnName("GPVoucherID")
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceCategory).HasMaxLength(50);

                entity.Property(e => e.InvoiceDescription).HasMaxLength(50);

                entity.Property(e => e.InvoiceEndTime).HasMaxLength(50);

                entity.Property(e => e.InvoiceFirstTouchDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceQuantity).HasMaxLength(50);

                entity.Property(e => e.InvoiceStartDate).HasMaxLength(50);

                entity.Property(e => e.OnHoldReason).HasMaxLength(150);

                entity.Property(e => e.OnHoldResolution).HasMaxLength(50);

                entity.Property(e => e.OnHoldResolutionDate).HasMaxLength(50);

                entity.Property(e => e.PoNonPo).HasMaxLength(50);

                entity.Property(e => e.PoQuantityUsed).HasMaxLength(50);

                entity.Property(e => e.Ponumber)
                    .HasColumnName("PONumber")
                    .HasMaxLength(50);

                entity.Property(e => e.QueryType).HasMaxLength(50);

                entity.Property(e => e.Recjection).HasMaxLength(50);

                entity.Property(e => e.Requisitioner).HasMaxLength(100);

                entity.Property(e => e.SecondaryReasons).HasMaxLength(100);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubTotal).HasMaxLength(50);

                entity.Property(e => e.VatTax).HasMaxLength(50);

                entity.Property(e => e.VoidedReason).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedDate).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedInvAmt).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedInvNo).HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedVendorId)
                    .HasColumnName("VoidedReprocessedVendorID")
                    .HasMaxLength(50);

                entity.Property(e => e.VoidedReprocessedVendorName).HasMaxLength(50);

                entity.Property(e => e.VoidedTransactionDate).HasMaxLength(50);

                entity.Property(e => e.WorkplaceId)
                    .HasColumnName("WorkplaceID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ApPriorityMappingDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AP_Priority_MappingDetails");

                entity.Property(e => e.AppriorityMappingDetailsId)
                    .HasColumnName("APPriorityMappingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.MarketPriority1).HasMaxLength(100);

                entity.Property(e => e.MarketPriority2).HasMaxLength(100);

                entity.Property(e => e.MarketPriority3).HasMaxLength(100);

                entity.Property(e => e.PriorityType).HasMaxLength(50);

                entity.Property(e => e.QueuePriority1).HasMaxLength(100);

                entity.Property(e => e.QueuePriority2).HasMaxLength(100);

                entity.Property(e => e.QueuePriority3).HasMaxLength(100);
            });

            modelBuilder.Entity<ApProductionDetails>(entity =>
            {
                entity.ToTable("AP_Production_Details");

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AssignedBy).HasMaxLength(50);

                entity.Property(e => e.AssignedComments).HasMaxLength(500);

                entity.Property(e => e.AssignedDateTime).HasMaxLength(50);

                entity.Property(e => e.AssignedStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.AssignedUser).HasMaxLength(50);

                entity.Property(e => e.CompletedDateTime).HasMaxLength(50);

                entity.Property(e => e.Disposition).HasMaxLength(100);

                entity.Property(e => e.EmailState)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('Received')");

                entity.Property(e => e.EmailType).HasMaxLength(100);

                entity.Property(e => e.EntityName).HasMaxLength(50);

                entity.Property(e => e.EscalationStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstTouchDate).HasMaxLength(50);

                entity.Property(e => e.IndexedBy).HasMaxLength(50);

                entity.Property(e => e.IndexerComments).HasMaxLength(500);

                entity.Property(e => e.IndexerEndTime).HasMaxLength(50);

                entity.Property(e => e.IndexerStartTime).HasMaxLength(50);

                entity.Property(e => e.InputCategory).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategory).HasMaxLength(50);

                entity.Property(e => e.InvoiceDescription).HasMaxLength(50);

                entity.Property(e => e.Market).HasMaxLength(500);

                entity.Property(e => e.MessageId)
                    .HasColumnName("MessageID")
                    .HasMaxLength(200);

                entity.Property(e => e.NoOfAttachment).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfTransaction).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfTransactionsProcessor)
                    .HasColumnName("NoOfTransactions_Processor")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OnHoldReason).HasMaxLength(150);

                entity.Property(e => e.OnHoldResolution).HasMaxLength(150);

                entity.Property(e => e.OnHoldStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessorComments).HasMaxLength(500);

                entity.Property(e => e.ProcessorEndTime).HasMaxLength(50);

                entity.Property(e => e.ProcessorStartTime).HasMaxLength(50);

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.Property(e => e.ReceivedFrom).HasMaxLength(500);

                entity.Property(e => e.ReceivedTime).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.ServerReceivedTime).HasMaxLength(50);

                entity.Property(e => e.SourceofStatement).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubDisposition).HasMaxLength(100);

                entity.Property(e => e.SubQueue).HasMaxLength(100);

                entity.Property(e => e.Subject).HasMaxLength(4000);

                entity.Property(e => e.TicketId)
                    .HasColumnName("TicketID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ToEmailAddress).HasMaxLength(500);

                entity.Property(e => e.UrgentCase).HasMaxLength(50);

                entity.Property(e => e.VendorEmailId)
                    .HasColumnName("VendorEmailID")
                    .HasMaxLength(100);

                entity.Property(e => e.VendorPhoneNo).HasMaxLength(10);

                entity.Property(e => e.WornglyIndexedComments).HasMaxLength(500);

                entity.Property(e => e.WronglyIndexedComments).HasMaxLength(500);
            });

            modelBuilder.Entity<ApProductionDetailsTrails>(entity =>
            {
                entity.ToTable("AP_Production_Details_Trails");

                entity.Property(e => e.ApproductionDetailsTrailsId)
                    .HasColumnName("APProductionDetailsTrailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AssignedBy).HasMaxLength(50);

                entity.Property(e => e.AssignedComments).HasMaxLength(500);

                entity.Property(e => e.AssignedDateTime).HasColumnType("datetime");

                entity.Property(e => e.AssignedUser).HasMaxLength(50);

                entity.Property(e => e.CompletedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Disposition).HasMaxLength(100);

                entity.Property(e => e.EmailState).HasMaxLength(100);

                entity.Property(e => e.EmailType).HasMaxLength(100);

                entity.Property(e => e.EntityName).HasMaxLength(50);

                entity.Property(e => e.FirstTouchDate).HasColumnType("datetime");

                entity.Property(e => e.IndexedBy).HasMaxLength(50);

                entity.Property(e => e.IndexerComments).HasMaxLength(500);

                entity.Property(e => e.IndexerEndTime).HasColumnType("datetime");

                entity.Property(e => e.IndexerStartTime).HasColumnType("datetime");

                entity.Property(e => e.InputCategory).HasMaxLength(50);

                entity.Property(e => e.InvoiceDescription).HasMaxLength(50);

                entity.Property(e => e.Market).HasMaxLength(50);

                entity.Property(e => e.MessageId)
                    .HasColumnName("MessageID")
                    .HasMaxLength(200);

                entity.Property(e => e.NoOfAttachment).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfTransaction).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfTransactionsProcessor)
                    .HasColumnName("NoOfTransactions_Processor")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OnHoldReason).HasMaxLength(150);

                entity.Property(e => e.OnHoldResolution).HasMaxLength(150);

                entity.Property(e => e.ProcessorComments).HasMaxLength(500);

                entity.Property(e => e.ProcessorEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessorStartTime).HasColumnType("datetime");

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.Property(e => e.ReceivedFrom).HasMaxLength(500);

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.ServerReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.SourceofStatement).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubDisposition).HasMaxLength(100);

                entity.Property(e => e.SubQueue).HasMaxLength(100);

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.Property(e => e.ToEmailAddress).HasMaxLength(500);

                entity.Property(e => e.TrailsBy).HasMaxLength(50);

                entity.Property(e => e.TrailsDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UrgentCase).HasMaxLength(50);

                entity.Property(e => e.VendorEmailId)
                    .HasColumnName("VendorEmailID")
                    .HasMaxLength(100);

                entity.Property(e => e.VendorPhoneNo).HasMaxLength(10);

                entity.Property(e => e.WornglyIndexedComments).HasMaxLength(500);

                entity.Property(e => e.WronglyIndexedComments).HasMaxLength(500);
            });

            modelBuilder.Entity<ApProductionOutcomeDetails>(entity =>
            {
                entity.ToTable("AP_Production_OutcomeDetails");

                entity.Property(e => e.ApproductionOutcomeDetailsId)
                    .HasColumnName("APProductionOutcomeDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.EntryDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(100);
            });

            modelBuilder.Entity<AphelpdeskProcessingDetails>(entity =>
            {
                entity.ToTable("APHelpdeskProcessingDetails");

                entity.Property(e => e.AphelpdeskProcessingDetailsId)
                    .HasColumnName("APHelpdeskProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CallNature).HasMaxLength(50);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.Scenario).HasMaxLength(50);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ApprocessingDetails>(entity =>
            {
                entity.ToTable("APProcessingDetails");

                entity.Property(e => e.ApprocessingDetailsId)
                    .HasColumnName("APProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AcknowledgeAgingDays).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.ClassId)
                    .HasColumnName("ClassID")
                    .HasMaxLength(50);

                entity.Property(e => e.ClearingDate).HasMaxLength(50);

                entity.Property(e => e.CoCode).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DelayedAgeing).HasMaxLength(50);

                entity.Property(e => e.DelayedAgingDays).HasMaxLength(50);

                entity.Property(e => e.DocumentNumber).HasMaxLength(50);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Gross).HasMaxLength(50);

                entity.Property(e => e.HoldReason).HasMaxLength(150);

                entity.Property(e => e.InvoiceAmount).HasMaxLength(50);

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Market).HasMaxLength(150);

                entity.Property(e => e.OnTimeDelayed).HasMaxLength(50);

                entity.Property(e => e.PaymentId)
                    .HasColumnName("PaymentID")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessedInGp)
                    .HasColumnName("ProcessedInGP")
                    .HasMaxLength(50);

                entity.Property(e => e.QueryRaisedBy).HasMaxLength(50);

                entity.Property(e => e.QueryRaisedToMarket).HasMaxLength(150);

                entity.Property(e => e.QueryType).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.Scenario).HasMaxLength(50);

                entity.Property(e => e.SubQueue).HasMaxLength(150);

                entity.Property(e => e.TicketNumber).HasMaxLength(50);

                entity.Property(e => e.TransactionAuditDuration).HasMaxLength(50);

                entity.Property(e => e.TransactionDate).HasMaxLength(50);

                entity.Property(e => e.VendorId)
                    .HasColumnName("VendorID")
                    .HasMaxLength(50);

                entity.Property(e => e.VendorName).HasMaxLength(50);

                entity.Property(e => e.VolumeType).HasMaxLength(50);
            });

            modelBuilder.Entity<ArIndexerDetails>(entity =>
            {
                entity.HasKey(e => e.ArindexerId);

                entity.ToTable("AR_Indexer_Details");

                entity.Property(e => e.ArindexerId)
                    .HasColumnName("ARIndexerID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BatchId)
                    .HasColumnName("BatchID")
                    .HasMaxLength(50);

                entity.Property(e => e.CompletedDateTime).HasMaxLength(50);

                entity.Property(e => e.EmailFrom).HasMaxLength(200);

                entity.Property(e => e.EmailReceivedTime).HasMaxLength(50);

                entity.Property(e => e.EmailTo).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.EntryDate).HasMaxLength(50);

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.InputCategory).HasMaxLength(50);

                entity.Property(e => e.MailSubject).HasMaxLength(200);

                entity.Property(e => e.Market).HasMaxLength(200);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.Process).HasMaxLength(200);

                entity.Property(e => e.StartTime).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.SubQueue).HasMaxLength(200);
            });

            modelBuilder.Entity<ArIndexerInvoiceProcessingDetails>(entity =>
            {
                entity.HasKey(e => e.ArinvoiceProcessingDetailsId);

                entity.ToTable("AR_Indexer_Invoice_ProcessingDetails");

                entity.Property(e => e.ArinvoiceProcessingDetailsId)
                    .HasColumnName("ARInvoiceProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ArindexerId)
                    .HasColumnName("ARIndexerID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AssignedBy).HasMaxLength(50);

                entity.Property(e => e.AssignedDate).HasMaxLength(50);

                entity.Property(e => e.AssignedUser).HasMaxLength(50);

                entity.Property(e => e.BatchDate).HasMaxLength(50);

                entity.Property(e => e.BatchId)
                    .HasColumnName("BatchID")
                    .HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(200);

                entity.Property(e => e.CustomerId)
                    .HasColumnName("CustomerID")
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerName).HasMaxLength(200);

                entity.Property(e => e.ErrorControl).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.IndexedDate).HasMaxLength(50);

                entity.Property(e => e.IndexedUser).HasMaxLength(50);

                entity.Property(e => e.IndexerEndTime).HasMaxLength(50);

                entity.Property(e => e.IndexerStartTime).HasMaxLength(50);

                entity.Property(e => e.InernalQcfeedbackComment).HasColumnName("InernalQCFeedbackComment");

                entity.Property(e => e.InernalQcstatus)
                    .HasColumnName("InernalQCStatus")
                    .HasMaxLength(50);

                entity.Property(e => e.InputExpectedDate).HasMaxLength(50);

                entity.Property(e => e.InternalQcAssignedDate).HasMaxLength(50);

                entity.Property(e => e.InternalQcassignedUser)
                    .HasColumnName("InternalQCAssignedUser")
                    .HasMaxLength(50);

                entity.Property(e => e.InternalQccheck).HasColumnName("InternalQCCheck");

                entity.Property(e => e.InternalQcprocessedDate)
                    .HasColumnName("InternalQCProcessedDate")
                    .HasMaxLength(50);

                entity.Property(e => e.InternalQcrejectedReason)
                    .HasColumnName("InternalQCRejectedReason")
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceNumber).HasMaxLength(100);

                entity.Property(e => e.InvoiceValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OnHoldReason).HasMaxLength(200);

                entity.Property(e => e.ProcessorCompletedStatus).HasMaxLength(50);

                entity.Property(e => e.ProcessorEndTime).HasMaxLength(50);

                entity.Property(e => e.ProcessorStartTime).HasMaxLength(50);

                entity.Property(e => e.QueryTo).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasMaxLength(50);

                entity.Property(e => e.Ref).HasMaxLength(200);

                entity.Property(e => e.ResolutionReason).HasMaxLength(150);

                entity.Property(e => e.ResolutionStatus).HasMaxLength(150);

                entity.Property(e => e.Status).HasMaxLength(100);

                entity.Property(e => e.SubTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Supervisor).HasMaxLength(50);

                entity.Property(e => e.Tax).HasMaxLength(50);

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TradeDiscount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VoidedReason).HasMaxLength(200);
            });

            modelBuilder.Entity<ArhelpdeskProcessingDetails>(entity =>
            {
                entity.ToTable("ARHelpdeskProcessingDetails");

                entity.Property(e => e.ArhelpdeskProcessingDetailsId)
                    .HasColumnName("ARHelpdeskProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CallNature).HasMaxLength(50);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.Scenario).HasMaxLength(50);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ArprocessingDetails>(entity =>
            {
                entity.ToTable("ARProcessingDetails");

                entity.Property(e => e.ArprocessingDetailsId)
                    .HasColumnName("ARProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Activities).HasMaxLength(50);

                entity.Property(e => e.Categorization).HasMaxLength(50);

                entity.Property(e => e.DocumentNumber).HasMaxLength(50);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.TransactionAudit).HasMaxLength(50);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.VolumeType).HasMaxLength(50);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("RoleNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_dbo.AspNetUserLogins");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_dbo.AspNetUserRoles");

                entity.HasIndex(e => e.RoleId)
                    .HasName("IX_RoleId");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.RoleId).HasMaxLength(128);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.UserName)
                    .HasName("UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspectProcessMaster>(entity =>
            {
                entity.HasKey(e => e.ProcessMid)
                    .HasName("PK__AspectPr__217EE2DFA71321E6");

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dbname)
                    .HasColumnName("DBName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AuditdataDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AdvisorType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentComments).IsUnicode(false);

                entity.Property(e => e.AgentFeedbackBy)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentFeedbackDate).HasColumnType("datetime");

                entity.Property(e => e.AssesmentDate).HasColumnType("datetime");

                entity.Property(e => e.AuditDate).HasColumnType("datetime");

                entity.Property(e => e.AuditDdid).HasColumnName("AuditDDID");

                entity.Property(e => e.AuditScmid).HasColumnName("AuditSCMID");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.AuditStartTime).HasColumnType("datetime");

                entity.Property(e => e.AuditorLoginMid).HasColumnName("AuditorLoginMID");

                entity.Property(e => e.CallAuditType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallDate).HasColumnType("datetime");

                entity.Property(e => e.CallDuration)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallOpp).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CallScore).HasColumnType("decimal(25, 2)");

                entity.Property(e => e.CallScoreFatel).HasColumnType("decimal(25, 2)");

                entity.Property(e => e.CallScr).HasColumnType("decimal(25, 2)");

                entity.Property(e => e.CallScrFatel).HasColumnType("decimal(25, 2)");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CallType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Callcategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignCallType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignId).HasColumnName("CampaignID");

                entity.Property(e => e.CampaignName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Deletecomments)
                    .HasColumnName("deletecomments")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Eiddatetime)
                    .HasColumnName("EIDDatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Eiqdatetime)
                    .HasColumnName("EIQDatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Encpassword)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackBy)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackDate).HasColumnType("datetime");

                entity.Property(e => e.Filename)
                    .HasColumnName("FILENAME")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Filepath)
                    .HasColumnName("FILEPATH")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Optional1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Optional2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Optional3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OutComeId).HasColumnName("OutComeID");

                entity.Property(e => e.ParentGlobalUserId)
                    .HasColumnName("ParentGlobalUserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentGlobalUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PercentageOnlyFatal).HasColumnType("decimal(25, 2)");

                entity.Property(e => e.Pilot)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.QbpcallEndTime)
                    .HasColumnName("QBPCallEndTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.QbpcallStartTime)
                    .HasColumnName("QBPCallStartTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.RandomizerDataMid).HasColumnName("RandomizerDataMID");

                entity.Property(e => e.RecordingMid).HasColumnName("RecordingMID");

                entity.Property(e => e.ScoreOnlyFatal).HasColumnType("decimal(25, 2)");

                entity.Property(e => e.SdgHdmid).HasColumnName("SDG_HDMID");

                entity.Property(e => e.SourceFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SupportUrn)
                    .HasColumnName("SupportURN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SystemUpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Tenure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tmaction)
                    .HasColumnName("TMAction")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Tmcomments)
                    .HasColumnName("TMComments")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Urn)
                    .HasColumnName("URN")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AutoLogin>(entity =>
            {
                entity.HasKey(e => e.Alid)
                    .HasName("PK__AutoLogi__433941A1D0FA59AA");

                entity.Property(e => e.Alid).HasColumnName("ALID");

                entity.Property(e => e.AutoType).HasComment("1 - Login and Menu Replciation 2 - Only Menu Replication");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.TemplateUserLoginMid).HasColumnName("TemplateUserLoginMID");
            });

            modelBuilder.Entity<AutoLoginDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alid).HasColumnName("ALID");

                entity.Property(e => e.DefaultPassword)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GlobaluserId)
                    .HasColumnName("GlobaluserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HremployeeName)
                    .HasColumnName("HREmployeeName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SaltKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Auxdetails>(entity =>
            {
                entity.ToTable("AUXDetails");

                entity.Property(e => e.AuxdetailsId)
                    .HasColumnName("AUXDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Auxcode)
                    .HasColumnName("AUXCode")
                    .HasMaxLength(100);

                entity.Property(e => e.AuxendTime)
                    .HasColumnName("AUXEndTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuxendTimeUpdatedBy)
                    .HasColumnName("AUXEndTimeUpdatedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.AuxstartTime)
                    .HasColumnName("AUXStartTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.DayStartStatus).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50);

                entity.Property(e => e.Pcname)
                    .HasColumnName("PCName")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.SecondsTickedBySystem).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WindowsLoginId)
                    .HasColumnName("WindowsLoginID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AuxdetailsBackup>(entity =>
            {
                entity.HasKey(e => e.AuxdetailsId);

                entity.ToTable("AUXDetails_Backup");

                entity.Property(e => e.AuxdetailsId)
                    .HasColumnName("AUXDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Auxcode)
                    .HasColumnName("AUXCode")
                    .HasMaxLength(100);

                entity.Property(e => e.AuxdetailsBackupId)
                    .HasColumnName("AUXDetailsBackupID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AuxendTime)
                    .HasColumnName("AUXEndTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuxendTimeUpdatedBy)
                    .HasColumnName("AUXEndTimeUpdatedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.AuxstartTime)
                    .HasColumnName("AUXStartTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuxupdatedByEmployeeId)
                    .HasColumnName("AUXUpdatedByEmployeeID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AuxupdatedByWindowsLoginId)
                    .HasColumnName("AUXUpdatedByWindowsLoginID")
                    .HasMaxLength(50);

                entity.Property(e => e.BackupDate).HasColumnType("datetime");

                entity.Property(e => e.BackupUser).HasMaxLength(50);

                entity.Property(e => e.DayStartStatus).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50);

                entity.Property(e => e.Pcname)
                    .HasColumnName("PCName")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.SecondsTickedBySystem).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WindowsLoginId)
                    .HasColumnName("WindowsLoginID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BankReconDetails>(entity =>
            {
                entity.HasKey(e => e.BankReconId);

                entity.Property(e => e.BankReconId)
                    .HasColumnName("BankReconID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountType).HasMaxLength(50);

                entity.Property(e => e.CheckBookId).HasMaxLength(100);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DateofReceiptofStatement).HasMaxLength(50);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.FrequencyofStatement).HasMaxLength(50);

                entity.Property(e => e.Glcode)
                    .HasColumnName("GLCode")
                    .HasMaxLength(100);

                entity.Property(e => e.Market).HasMaxLength(250);

                entity.Property(e => e.MarketId)
                    .HasColumnName("MarketID")
                    .HasMaxLength(10);

                entity.Property(e => e.ReconciledDate).HasMaxLength(50);

                entity.Property(e => e.SourceofStatement).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<BankReconMaster>(entity =>
            {
                entity.HasKey(e => e.BankReconId);

                entity.Property(e => e.BankReconId)
                    .HasColumnName("BankReconID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountType).HasMaxLength(50);

                entity.Property(e => e.CheckBookId)
                    .HasColumnName("CheckBookID")
                    .HasMaxLength(250);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Glcode)
                    .HasColumnName("GLCode")
                    .HasMaxLength(100);

                entity.Property(e => e.Gldescription)
                    .HasColumnName("GLDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Market).HasMaxLength(250);

                entity.Property(e => e.MarketId)
                    .HasColumnName("MarketID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ownership).HasMaxLength(50);
            });

            modelBuilder.Entity<BulkSmsddetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BulkSMSDDetails");

                entity.Property(e => e.Bucket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BulkSmsdid)
                    .HasColumnName("BulkSMSDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SmssendCount)
                    .HasColumnName("SMSSendCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SmssentFlag)
                    .HasColumnName("SMSSentFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BulkSmsddetailsLog>(entity =>
            {
                entity.HasKey(e => e.BulkSmslogMid);

                entity.ToTable("BulkSMSDDetails_Log");

                entity.Property(e => e.BulkSmslogMid).HasColumnName("BulkSMSLogMID");

                entity.Property(e => e.Bucket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BulkSmsdid).HasColumnName("BulkSMSDID");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.SmsreturnCode)
                    .HasColumnName("SMSReturnCode")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SmssendDateTime)
                    .HasColumnName("SMSSendDateTime")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SmssentNumber)
                    .HasColumnName("SMSSentNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Smstext)
                    .HasColumnName("SMSText")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CallHistory>(entity =>
            {
                entity.HasKey(e => e.CallHistoryMid);

                entity.Property(e => e.CallHistoryMid).HasColumnName("CallHistoryMID");

                entity.Property(e => e.CallBackDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallEndDateTimeUtc)
                    .HasColumnName("CallEndDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CallStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallStartDateTimeUtc)
                    .HasColumnName("CallStartDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CallerId).HasColumnName("CallerID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para51).IsUnicode(false);

                entity.Property(e => e.Para52).IsUnicode(false);

                entity.Property(e => e.Para53).IsUnicode(false);

                entity.Property(e => e.Para54).IsUnicode(false);

                entity.Property(e => e.Para55).IsUnicode(false);

                entity.Property(e => e.Para56).IsUnicode(false);

                entity.Property(e => e.Para57).IsUnicode(false);

                entity.Property(e => e.Para58).IsUnicode(false);

                entity.Property(e => e.Para59).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para60).IsUnicode(false);

                entity.Property(e => e.Para61).IsUnicode(false);

                entity.Property(e => e.Para62).IsUnicode(false);

                entity.Property(e => e.Para63).IsUnicode(false);

                entity.Property(e => e.Para64).IsUnicode(false);

                entity.Property(e => e.Para65).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.PurchaseNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReOpenDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestSource)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 For Call, 2 For Email");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CallNatureMaster>(entity =>
            {
                entity.HasKey(e => e.CallNatureId)
                    .HasName("PK_Scenario_Master");

                entity.ToTable("CallNature_Master");

                entity.Property(e => e.CallNatureId).HasColumnName("CallNatureID");

                entity.Property(e => e.CallNatureName)
                    .HasColumnName("CallNature_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<CheckListDetails>(entity =>
            {
                entity.HasKey(e => e.CheckListDid);

                entity.Property(e => e.CheckListDid).HasColumnName("CheckListDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid)
                    .HasColumnName("MiscDID")
                    .IsUnicode(false);

                entity.Property(e => e.RequestType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 For Service Ticket, 2 For Dispute");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClientLoginMappingDetail>(entity =>
            {
                entity.HasKey(e => e.ClientLmdid)
                    .HasName("PK__ClientLo__0F88C6766DAD1CC9");

                entity.Property(e => e.ClientLmdid).HasColumnName("ClientLMDID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClientLoginMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__ClientLo__5E5499A8717DADAD");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientLmdid).HasColumnName("ClientLMDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClientReportMappingMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientReportMid).HasColumnName("ClientReportMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.MappingMid)
                    .HasColumnName("MappingMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClientReportMappingMasterLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClientReportMappingMaster_Log");

                entity.Property(e => e.ClientReportMid).HasColumnName("ClientReportMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogMappingMid)
                    .HasColumnName("LogMappingMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClientReportMaster>(entity =>
            {
                entity.HasKey(e => e.ClientReportMid)
                    .HasName("PK_ClientReportMaster_Latest");

                entity.Property(e => e.ClientReportMid).HasColumnName("ClientReportMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.ClientReportName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReportPage)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomiseRdid).HasColumnName("CustomiseRDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoBack)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderPart)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Iscustomise).HasColumnName("ISCustomise");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ParentClientReportMid).HasColumnName("ParentClientReportMID");

                entity.Property(e => e.RdlreportType)
                    .HasColumnName("RDLReportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailId).HasColumnName("ReportDetailID");

                entity.Property(e => e.ReportType).HasComment(@"1 For Intraday, 
2 For Daily, 
3 For Weekly, 
4 For Monthly, 
5 For Daily with DateFrom only, 
6 Date Range With Intraday
7 For Intraday with FromMonth/Year(With Time Slot), 
8 For Week single Dropdown with Date
9 Single Period
10 Period From - Period To");

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientReportMaster10052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClientReportMaster_10052018");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.ClientReportMid)
                    .HasColumnName("ClientReportMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ClientReportName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReportPage)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomiseRdid).HasColumnName("CustomiseRDID");

                entity.Property(e => e.GoBack)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderPart)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Iscustomise).HasColumnName("ISCustomise");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ParentClientReportMid).HasColumnName("ParentClientReportMID");

                entity.Property(e => e.RdlreportType)
                    .HasColumnName("RDLReportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailId).HasColumnName("ReportDetailID");

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientReportMasterlog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.ClientReportMid).HasColumnName("ClientReportMID");

                entity.Property(e => e.ClientReportName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReportPage)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomiseRdid).HasColumnName("CustomiseRDID");

                entity.Property(e => e.GoBack)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderPart)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Iscustomise).HasColumnName("ISCustomise");

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ParentClientReportMid).HasColumnName("ParentClientReportMID");

                entity.Property(e => e.RdlreportType)
                    .HasColumnName("RDLReportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailId).HasColumnName("ReportDetailID");

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Clients>(entity =>
            {
                entity.HasKey(e => e.ClientMid);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dbname)
                    .HasColumnName("DBName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Clients26032019>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Clients_26032019");

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Dbname)
                    .HasColumnName("DBName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClientsLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Dbname)
                    .HasColumnName("DBName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionDataDetail>(entity =>
            {
                entity.HasKey(e => e.CollectionDdid);

                entity.Property(e => e.CollectionDdid).HasColumnName("CollectionDDID");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Para301).IsUnicode(false);

                entity.Property(e => e.Para302).IsUnicode(false);

                entity.Property(e => e.Para303).IsUnicode(false);

                entity.Property(e => e.Para304).IsUnicode(false);

                entity.Property(e => e.Para305).IsUnicode(false);

                entity.Property(e => e.Para306).IsUnicode(false);

                entity.Property(e => e.Para307).IsUnicode(false);

                entity.Property(e => e.Para308).IsUnicode(false);

                entity.Property(e => e.Para309).IsUnicode(false);

                entity.Property(e => e.Para310).IsUnicode(false);

                entity.Property(e => e.Para311).IsUnicode(false);

                entity.Property(e => e.Para312).IsUnicode(false);

                entity.Property(e => e.Para313).IsUnicode(false);

                entity.Property(e => e.Para314).IsUnicode(false);

                entity.Property(e => e.Para315).IsUnicode(false);

                entity.Property(e => e.Para316).IsUnicode(false);

                entity.Property(e => e.Para317).IsUnicode(false);

                entity.Property(e => e.Para318).IsUnicode(false);

                entity.Property(e => e.Para319).IsUnicode(false);

                entity.Property(e => e.Para320).IsUnicode(false);

                entity.Property(e => e.Para321).IsUnicode(false);

                entity.Property(e => e.Para322).IsUnicode(false);

                entity.Property(e => e.Para323).IsUnicode(false);

                entity.Property(e => e.Para324).IsUnicode(false);

                entity.Property(e => e.Para325).IsUnicode(false);

                entity.Property(e => e.Para326).IsUnicode(false);

                entity.Property(e => e.Para327).IsUnicode(false);

                entity.Property(e => e.Para328).IsUnicode(false);

                entity.Property(e => e.Para329).IsUnicode(false);

                entity.Property(e => e.Para330).IsUnicode(false);

                entity.Property(e => e.Para331).IsUnicode(false);

                entity.Property(e => e.Para332).IsUnicode(false);

                entity.Property(e => e.Para333).IsUnicode(false);

                entity.Property(e => e.Para334).IsUnicode(false);

                entity.Property(e => e.Para335).IsUnicode(false);

                entity.Property(e => e.Para336).IsUnicode(false);

                entity.Property(e => e.Para337).IsUnicode(false);

                entity.Property(e => e.Para338).IsUnicode(false);

                entity.Property(e => e.Para339).IsUnicode(false);

                entity.Property(e => e.Para340).IsUnicode(false);

                entity.Property(e => e.Para341).IsUnicode(false);

                entity.Property(e => e.Para342).IsUnicode(false);

                entity.Property(e => e.Para343).IsUnicode(false);

                entity.Property(e => e.Para344).IsUnicode(false);

                entity.Property(e => e.Para345).IsUnicode(false);

                entity.Property(e => e.Para346).IsUnicode(false);

                entity.Property(e => e.Para347).IsUnicode(false);

                entity.Property(e => e.Para348).IsUnicode(false);

                entity.Property(e => e.Para349).IsUnicode(false);

                entity.Property(e => e.Para350).IsUnicode(false);

                entity.Property(e => e.Para351).IsUnicode(false);

                entity.Property(e => e.Para352).IsUnicode(false);

                entity.Property(e => e.Para353).IsUnicode(false);

                entity.Property(e => e.Para354).IsUnicode(false);

                entity.Property(e => e.Para355).IsUnicode(false);

                entity.Property(e => e.Para356).IsUnicode(false);

                entity.Property(e => e.Para357).IsUnicode(false);

                entity.Property(e => e.Para358).IsUnicode(false);

                entity.Property(e => e.Para359).IsUnicode(false);

                entity.Property(e => e.Para360).IsUnicode(false);

                entity.Property(e => e.Para361).IsUnicode(false);

                entity.Property(e => e.Para362).IsUnicode(false);

                entity.Property(e => e.Para363).IsUnicode(false);

                entity.Property(e => e.Para364).IsUnicode(false);

                entity.Property(e => e.Para365).IsUnicode(false);

                entity.Property(e => e.Para366).IsUnicode(false);

                entity.Property(e => e.Para367).IsUnicode(false);

                entity.Property(e => e.Para368).IsUnicode(false);

                entity.Property(e => e.Para369).IsUnicode(false);

                entity.Property(e => e.Para370).IsUnicode(false);

                entity.Property(e => e.Para371).IsUnicode(false);

                entity.Property(e => e.Para372).IsUnicode(false);

                entity.Property(e => e.Para373).IsUnicode(false);

                entity.Property(e => e.Para374).IsUnicode(false);

                entity.Property(e => e.Para375).IsUnicode(false);

                entity.Property(e => e.Para376).IsUnicode(false);

                entity.Property(e => e.Para377).IsUnicode(false);

                entity.Property(e => e.Para378).IsUnicode(false);

                entity.Property(e => e.Para379).IsUnicode(false);

                entity.Property(e => e.Para380).IsUnicode(false);

                entity.Property(e => e.Para381).IsUnicode(false);

                entity.Property(e => e.Para382).IsUnicode(false);

                entity.Property(e => e.Para383).IsUnicode(false);

                entity.Property(e => e.Para384).IsUnicode(false);

                entity.Property(e => e.Para385).IsUnicode(false);

                entity.Property(e => e.Para386).IsUnicode(false);

                entity.Property(e => e.Para387).IsUnicode(false);

                entity.Property(e => e.Para388).IsUnicode(false);

                entity.Property(e => e.Para389).IsUnicode(false);

                entity.Property(e => e.Para390).IsUnicode(false);

                entity.Property(e => e.Para391).IsUnicode(false);

                entity.Property(e => e.Para392).IsUnicode(false);

                entity.Property(e => e.Para393).IsUnicode(false);

                entity.Property(e => e.Para394).IsUnicode(false);

                entity.Property(e => e.Para395).IsUnicode(false);

                entity.Property(e => e.Para396).IsUnicode(false);

                entity.Property(e => e.Para397).IsUnicode(false);

                entity.Property(e => e.Para398).IsUnicode(false);

                entity.Property(e => e.Para399).IsUnicode(false);

                entity.Property(e => e.Para400).IsUnicode(false);

                entity.Property(e => e.Para401).IsUnicode(false);

                entity.Property(e => e.Para402).IsUnicode(false);

                entity.Property(e => e.Para403).IsUnicode(false);

                entity.Property(e => e.Para404).IsUnicode(false);

                entity.Property(e => e.Para405).IsUnicode(false);

                entity.Property(e => e.Para406).IsUnicode(false);

                entity.Property(e => e.Para407).IsUnicode(false);

                entity.Property(e => e.Para408).IsUnicode(false);

                entity.Property(e => e.Para409).IsUnicode(false);

                entity.Property(e => e.Para410).IsUnicode(false);

                entity.Property(e => e.Para411).IsUnicode(false);

                entity.Property(e => e.Para412).IsUnicode(false);

                entity.Property(e => e.Para413).IsUnicode(false);

                entity.Property(e => e.Para414).IsUnicode(false);

                entity.Property(e => e.Para415).IsUnicode(false);

                entity.Property(e => e.Para416).IsUnicode(false);

                entity.Property(e => e.Para417).IsUnicode(false);

                entity.Property(e => e.Para418).IsUnicode(false);

                entity.Property(e => e.Para419).IsUnicode(false);

                entity.Property(e => e.Para420).IsUnicode(false);

                entity.Property(e => e.Para421).IsUnicode(false);

                entity.Property(e => e.Para422).IsUnicode(false);

                entity.Property(e => e.Para423).IsUnicode(false);

                entity.Property(e => e.Para424).IsUnicode(false);

                entity.Property(e => e.Para425).IsUnicode(false);

                entity.Property(e => e.Para426).IsUnicode(false);

                entity.Property(e => e.Para427).IsUnicode(false);

                entity.Property(e => e.Para428).IsUnicode(false);

                entity.Property(e => e.Para429).IsUnicode(false);

                entity.Property(e => e.Para430).IsUnicode(false);

                entity.Property(e => e.Para431).IsUnicode(false);

                entity.Property(e => e.Para432).IsUnicode(false);

                entity.Property(e => e.Para433).IsUnicode(false);

                entity.Property(e => e.Para434).IsUnicode(false);

                entity.Property(e => e.Para435).IsUnicode(false);

                entity.Property(e => e.Para436).IsUnicode(false);

                entity.Property(e => e.Para437).IsUnicode(false);

                entity.Property(e => e.Para438).IsUnicode(false);

                entity.Property(e => e.Para439).IsUnicode(false);

                entity.Property(e => e.Para440).IsUnicode(false);

                entity.Property(e => e.Para441).IsUnicode(false);

                entity.Property(e => e.Para442).IsUnicode(false);

                entity.Property(e => e.Para443).IsUnicode(false);

                entity.Property(e => e.Para444).IsUnicode(false);

                entity.Property(e => e.Para445).IsUnicode(false);

                entity.Property(e => e.Para446).IsUnicode(false);

                entity.Property(e => e.Para447).IsUnicode(false);

                entity.Property(e => e.Para448).IsUnicode(false);

                entity.Property(e => e.Para449).IsUnicode(false);

                entity.Property(e => e.Para450).IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionDataDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.CollectionDdid).HasColumnName("CollectionDDID");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Para301).IsUnicode(false);

                entity.Property(e => e.Para302).IsUnicode(false);

                entity.Property(e => e.Para303).IsUnicode(false);

                entity.Property(e => e.Para304).IsUnicode(false);

                entity.Property(e => e.Para305).IsUnicode(false);

                entity.Property(e => e.Para306).IsUnicode(false);

                entity.Property(e => e.Para307).IsUnicode(false);

                entity.Property(e => e.Para308).IsUnicode(false);

                entity.Property(e => e.Para309).IsUnicode(false);

                entity.Property(e => e.Para310).IsUnicode(false);

                entity.Property(e => e.Para311).IsUnicode(false);

                entity.Property(e => e.Para312).IsUnicode(false);

                entity.Property(e => e.Para313).IsUnicode(false);

                entity.Property(e => e.Para314).IsUnicode(false);

                entity.Property(e => e.Para315).IsUnicode(false);

                entity.Property(e => e.Para316).IsUnicode(false);

                entity.Property(e => e.Para317).IsUnicode(false);

                entity.Property(e => e.Para318).IsUnicode(false);

                entity.Property(e => e.Para319).IsUnicode(false);

                entity.Property(e => e.Para320).IsUnicode(false);

                entity.Property(e => e.Para321).IsUnicode(false);

                entity.Property(e => e.Para322).IsUnicode(false);

                entity.Property(e => e.Para323).IsUnicode(false);

                entity.Property(e => e.Para324).IsUnicode(false);

                entity.Property(e => e.Para325).IsUnicode(false);

                entity.Property(e => e.Para326).IsUnicode(false);

                entity.Property(e => e.Para327).IsUnicode(false);

                entity.Property(e => e.Para328).IsUnicode(false);

                entity.Property(e => e.Para329).IsUnicode(false);

                entity.Property(e => e.Para330).IsUnicode(false);

                entity.Property(e => e.Para331).IsUnicode(false);

                entity.Property(e => e.Para332).IsUnicode(false);

                entity.Property(e => e.Para333).IsUnicode(false);

                entity.Property(e => e.Para334).IsUnicode(false);

                entity.Property(e => e.Para335).IsUnicode(false);

                entity.Property(e => e.Para336).IsUnicode(false);

                entity.Property(e => e.Para337).IsUnicode(false);

                entity.Property(e => e.Para338).IsUnicode(false);

                entity.Property(e => e.Para339).IsUnicode(false);

                entity.Property(e => e.Para340).IsUnicode(false);

                entity.Property(e => e.Para341).IsUnicode(false);

                entity.Property(e => e.Para342).IsUnicode(false);

                entity.Property(e => e.Para343).IsUnicode(false);

                entity.Property(e => e.Para344).IsUnicode(false);

                entity.Property(e => e.Para345).IsUnicode(false);

                entity.Property(e => e.Para346).IsUnicode(false);

                entity.Property(e => e.Para347).IsUnicode(false);

                entity.Property(e => e.Para348).IsUnicode(false);

                entity.Property(e => e.Para349).IsUnicode(false);

                entity.Property(e => e.Para350).IsUnicode(false);

                entity.Property(e => e.Para351).IsUnicode(false);

                entity.Property(e => e.Para352).IsUnicode(false);

                entity.Property(e => e.Para353).IsUnicode(false);

                entity.Property(e => e.Para354).IsUnicode(false);

                entity.Property(e => e.Para355).IsUnicode(false);

                entity.Property(e => e.Para356).IsUnicode(false);

                entity.Property(e => e.Para357).IsUnicode(false);

                entity.Property(e => e.Para358).IsUnicode(false);

                entity.Property(e => e.Para359).IsUnicode(false);

                entity.Property(e => e.Para360).IsUnicode(false);

                entity.Property(e => e.Para361).IsUnicode(false);

                entity.Property(e => e.Para362).IsUnicode(false);

                entity.Property(e => e.Para363).IsUnicode(false);

                entity.Property(e => e.Para364).IsUnicode(false);

                entity.Property(e => e.Para365).IsUnicode(false);

                entity.Property(e => e.Para366).IsUnicode(false);

                entity.Property(e => e.Para367).IsUnicode(false);

                entity.Property(e => e.Para368).IsUnicode(false);

                entity.Property(e => e.Para369).IsUnicode(false);

                entity.Property(e => e.Para370).IsUnicode(false);

                entity.Property(e => e.Para371).IsUnicode(false);

                entity.Property(e => e.Para372).IsUnicode(false);

                entity.Property(e => e.Para373).IsUnicode(false);

                entity.Property(e => e.Para374).IsUnicode(false);

                entity.Property(e => e.Para375).IsUnicode(false);

                entity.Property(e => e.Para376).IsUnicode(false);

                entity.Property(e => e.Para377).IsUnicode(false);

                entity.Property(e => e.Para378).IsUnicode(false);

                entity.Property(e => e.Para379).IsUnicode(false);

                entity.Property(e => e.Para380).IsUnicode(false);

                entity.Property(e => e.Para381).IsUnicode(false);

                entity.Property(e => e.Para382).IsUnicode(false);

                entity.Property(e => e.Para383).IsUnicode(false);

                entity.Property(e => e.Para384).IsUnicode(false);

                entity.Property(e => e.Para385).IsUnicode(false);

                entity.Property(e => e.Para386).IsUnicode(false);

                entity.Property(e => e.Para387).IsUnicode(false);

                entity.Property(e => e.Para388).IsUnicode(false);

                entity.Property(e => e.Para389).IsUnicode(false);

                entity.Property(e => e.Para390).IsUnicode(false);

                entity.Property(e => e.Para391).IsUnicode(false);

                entity.Property(e => e.Para392).IsUnicode(false);

                entity.Property(e => e.Para393).IsUnicode(false);

                entity.Property(e => e.Para394).IsUnicode(false);

                entity.Property(e => e.Para395).IsUnicode(false);

                entity.Property(e => e.Para396).IsUnicode(false);

                entity.Property(e => e.Para397).IsUnicode(false);

                entity.Property(e => e.Para398).IsUnicode(false);

                entity.Property(e => e.Para399).IsUnicode(false);

                entity.Property(e => e.Para400).IsUnicode(false);

                entity.Property(e => e.Para401).IsUnicode(false);

                entity.Property(e => e.Para402).IsUnicode(false);

                entity.Property(e => e.Para403).IsUnicode(false);

                entity.Property(e => e.Para404).IsUnicode(false);

                entity.Property(e => e.Para405).IsUnicode(false);

                entity.Property(e => e.Para406).IsUnicode(false);

                entity.Property(e => e.Para407).IsUnicode(false);

                entity.Property(e => e.Para408).IsUnicode(false);

                entity.Property(e => e.Para409).IsUnicode(false);

                entity.Property(e => e.Para410).IsUnicode(false);

                entity.Property(e => e.Para411).IsUnicode(false);

                entity.Property(e => e.Para412).IsUnicode(false);

                entity.Property(e => e.Para413).IsUnicode(false);

                entity.Property(e => e.Para414).IsUnicode(false);

                entity.Property(e => e.Para415).IsUnicode(false);

                entity.Property(e => e.Para416).IsUnicode(false);

                entity.Property(e => e.Para417).IsUnicode(false);

                entity.Property(e => e.Para418).IsUnicode(false);

                entity.Property(e => e.Para419).IsUnicode(false);

                entity.Property(e => e.Para420).IsUnicode(false);

                entity.Property(e => e.Para421).IsUnicode(false);

                entity.Property(e => e.Para422).IsUnicode(false);

                entity.Property(e => e.Para423).IsUnicode(false);

                entity.Property(e => e.Para424).IsUnicode(false);

                entity.Property(e => e.Para425).IsUnicode(false);

                entity.Property(e => e.Para426).IsUnicode(false);

                entity.Property(e => e.Para427).IsUnicode(false);

                entity.Property(e => e.Para428).IsUnicode(false);

                entity.Property(e => e.Para429).IsUnicode(false);

                entity.Property(e => e.Para430).IsUnicode(false);

                entity.Property(e => e.Para431).IsUnicode(false);

                entity.Property(e => e.Para432).IsUnicode(false);

                entity.Property(e => e.Para433).IsUnicode(false);

                entity.Property(e => e.Para434).IsUnicode(false);

                entity.Property(e => e.Para435).IsUnicode(false);

                entity.Property(e => e.Para436).IsUnicode(false);

                entity.Property(e => e.Para437).IsUnicode(false);

                entity.Property(e => e.Para438).IsUnicode(false);

                entity.Property(e => e.Para439).IsUnicode(false);

                entity.Property(e => e.Para440).IsUnicode(false);

                entity.Property(e => e.Para441).IsUnicode(false);

                entity.Property(e => e.Para442).IsUnicode(false);

                entity.Property(e => e.Para443).IsUnicode(false);

                entity.Property(e => e.Para444).IsUnicode(false);

                entity.Property(e => e.Para445).IsUnicode(false);

                entity.Property(e => e.Para446).IsUnicode(false);

                entity.Property(e => e.Para447).IsUnicode(false);

                entity.Property(e => e.Para448).IsUnicode(false);

                entity.Property(e => e.Para449).IsUnicode(false);

                entity.Property(e => e.Para450).IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionProcessingDetails>(entity =>
            {
                entity.Property(e => e.CollectionProcessingDetailsId)
                    .HasColumnName("CollectionProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Amount).HasMaxLength(50);

                entity.Property(e => e.CollectionCallNature).HasMaxLength(50);

                entity.Property(e => e.DocumentNumber).HasMaxLength(50);

                entity.Property(e => e.DrillDown).HasMaxLength(50);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Operation).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.Scenario).HasMaxLength(50);

                entity.Property(e => e.TransactionDate).HasMaxLength(50);

                entity.Property(e => e.VolumeType).HasMaxLength(50);
            });

            modelBuilder.Entity<CollectionProductionDetails>(entity =>
            {
                entity.HasKey(e => e.CollectionIndexerId);

                entity.ToTable("Collection_ProductionDetails");

                entity.Property(e => e.CollectionIndexerId)
                    .HasColumnName("CollectionIndexerID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BatchId)
                    .HasColumnName("BatchID")
                    .HasMaxLength(50);

                entity.Property(e => e.CompletedDateTime).HasMaxLength(50);

                entity.Property(e => e.EmailFrom).HasMaxLength(200);

                entity.Property(e => e.EmailReceivedTime).HasMaxLength(50);

                entity.Property(e => e.EmailTo).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.EntryDate).HasMaxLength(50);

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.InputCategory).HasMaxLength(50);

                entity.Property(e => e.MailSubject).HasMaxLength(200);

                entity.Property(e => e.Market).HasMaxLength(200);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.Process).HasMaxLength(200);

                entity.Property(e => e.SourceOfInout).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(200);

                entity.Property(e => e.SubQueue).HasMaxLength(200);
            });

            modelBuilder.Entity<CollectionProductionInvoiceProcessingDetails>(entity =>
            {
                entity.HasKey(e => e.CollectionInvoiceProcessingDetailsId);

                entity.ToTable("Collection_Production_Invoice_ProcessingDetails");

                entity.Property(e => e.CollectionInvoiceProcessingDetailsId)
                    .HasColumnName("CollectionInvoiceProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Actiontakenforpending).HasMaxLength(200);

                entity.Property(e => e.AssignedBy).HasMaxLength(50);

                entity.Property(e => e.AssignedDate).HasMaxLength(50);

                entity.Property(e => e.AssignedUser).HasMaxLength(50);

                entity.Property(e => e.BanOrcustomerNo)
                    .HasColumnName("BanORCustomerNo")
                    .HasMaxLength(50);

                entity.Property(e => e.BankChequeBookId)
                    .HasColumnName("Bank_ChequeBookID")
                    .HasMaxLength(200);

                entity.Property(e => e.Categorization).HasMaxLength(50);

                entity.Property(e => e.CollectionIndexerId)
                    .HasColumnName("CollectionIndexerID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Currency).HasMaxLength(200);

                entity.Property(e => e.CurrencyRate).HasMaxLength(50);

                entity.Property(e => e.Gpreference)
                    .HasColumnName("GPReference")
                    .HasMaxLength(200);

                entity.Property(e => e.IndexedDate).HasMaxLength(50);

                entity.Property(e => e.IndexedUser).HasMaxLength(50);

                entity.Property(e => e.IndexerEndTime).HasMaxLength(50);

                entity.Property(e => e.IndexerStartTime).HasMaxLength(50);

                entity.Property(e => e.InputReceivedDate).HasMaxLength(50);

                entity.Property(e => e.LocalAmount).HasMaxLength(200);

                entity.Property(e => e.ModeofPayment).HasMaxLength(50);

                entity.Property(e => e.ProcessorEndTime).HasMaxLength(50);

                entity.Property(e => e.ProcessorStartTime).HasMaxLength(50);

                entity.Property(e => e.ReasonforOnHold).HasMaxLength(50);

                entity.Property(e => e.ReasonsforPartiallyposted).HasMaxLength(50);

                entity.Property(e => e.ReceiptType).HasMaxLength(100);

                entity.Property(e => e.ReslutionComment).HasMaxLength(250);

                entity.Property(e => e.Ticket)
                    .HasColumnName("Ticket#")
                    .HasMaxLength(200);

                entity.Property(e => e.TransactionDate).HasMaxLength(50);

                entity.Property(e => e.Usdamount)
                    .HasColumnName("USDAmount")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CollectionProductionInvoiceProcessingDetailsOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Collection_Production_Invoice_ProcessingDetails_Outcome");

                entity.Property(e => e.Actiontakenforpending).HasMaxLength(200);

                entity.Property(e => e.AssignedBy).HasMaxLength(50);

                entity.Property(e => e.AssignedDate).HasMaxLength(50);

                entity.Property(e => e.AssignedUser).HasMaxLength(50);

                entity.Property(e => e.BanOrcustomerNo)
                    .HasColumnName("BanORCustomerNo")
                    .HasMaxLength(50);

                entity.Property(e => e.BankChequeBookId)
                    .HasColumnName("Bank_ChequeBookID")
                    .HasMaxLength(200);

                entity.Property(e => e.Categorization).HasMaxLength(50);

                entity.Property(e => e.CollectionIndexerId)
                    .HasColumnName("CollectionIndexerID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CollectionInvoiceProcessingDetailsId)
                    .HasColumnName("CollectionInvoiceProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CollectionInvoiceProcessingDetailsOutcomeId)
                    .HasColumnName("CollectionInvoiceProcessingDetailsOutcomeID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Currency).HasMaxLength(200);

                entity.Property(e => e.CurrencyRate).HasMaxLength(50);

                entity.Property(e => e.Gpreference)
                    .HasColumnName("GPReference")
                    .HasMaxLength(200);

                entity.Property(e => e.IndexedDate).HasMaxLength(50);

                entity.Property(e => e.IndexedUser).HasMaxLength(50);

                entity.Property(e => e.IndexerEndTime).HasMaxLength(50);

                entity.Property(e => e.IndexerStartTime).HasMaxLength(50);

                entity.Property(e => e.InputReceivedDate).HasMaxLength(50);

                entity.Property(e => e.LocalAmount).HasMaxLength(200);

                entity.Property(e => e.ModeofPayment).HasMaxLength(50);

                entity.Property(e => e.ProcessorEndTime).HasMaxLength(50);

                entity.Property(e => e.ProcessorStartTime).HasMaxLength(50);

                entity.Property(e => e.ReasonforOnHold).HasMaxLength(50);

                entity.Property(e => e.ReasonsforPartiallyposted).HasMaxLength(50);

                entity.Property(e => e.ReceiptType).HasMaxLength(100);

                entity.Property(e => e.ReslutionComment).HasMaxLength(250);

                entity.Property(e => e.Ticket)
                    .HasColumnName("Ticket#")
                    .HasMaxLength(200);

                entity.Property(e => e.TransactionDate).HasMaxLength(50);

                entity.Property(e => e.Usdamount)
                    .HasColumnName("USDAmount")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CollectionTemplateConfigurationMaster>(entity =>
            {
                entity.HasKey(e => e.CollectionTcmid);

                entity.Property(e => e.CollectionTcmid).HasColumnName("CollectionTCMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionTemplateConfigurationMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CollectionTcmid).HasColumnName("CollectionTCMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionTemplateParameterMaster>(entity =>
            {
                entity.HasKey(e => e.CollectionTpmid);

                entity.Property(e => e.CollectionTpmid).HasColumnName("CollectionTPMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CollectionTcmid).HasColumnName("CollectionTCMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataColumnValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionTemplateParameterMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CollectionTcmid).HasColumnName("CollectionTCMID");

                entity.Property(e => e.CollectionTpmid).HasColumnName("CollectionTPMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataColumnValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CollectionsHelpDeskProductionDetails>(entity =>
            {
                entity.ToTable("Collections_HelpDesk_ProductionDetails");

                entity.Property(e => e.CollectionsHelpDeskProductionDetailsId)
                    .HasColumnName("Collections_HelpDesk_ProductionDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Apt)
                    .HasColumnName("APT")
                    .HasMaxLength(50);

                entity.Property(e => e.Disposition).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.Market).HasMaxLength(200);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TicketNumber).HasMaxLength(200);

                entity.Property(e => e.TicketType).HasMaxLength(200);
            });

            modelBuilder.Entity<CollectionsHelpdeskProcessingDetails>(entity =>
            {
                entity.Property(e => e.CollectionsHelpdeskProcessingDetailsId)
                    .HasColumnName("CollectionsHelpdeskProcessingDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CallNature).HasMaxLength(50);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RefNo).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.Scenario).HasMaxLength(50);

                entity.Property(e => e.TransactionDate).HasMaxLength(50);
            });

            modelBuilder.Entity<ControlTypeMaster>(entity =>
            {
                entity.HasKey(e => e.ControlTypeMid);

                entity.Property(e => e.ControlTypeMid)
                    .HasColumnName("ControlTypeMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ControlType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Csattype).HasColumnName("CSATType");
            });

            modelBuilder.Entity<CurrencyMaster>(entity =>
            {
                entity.HasKey(e => e.CurrencyId);

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CountryName).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustId).ValueGeneratedOnAdd();

                entity.Property(e => e.Gender)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustomerListMaster>(entity =>
            {
                entity.HasKey(e => e.CustomerListId);

                entity.Property(e => e.CustomerListId)
                    .HasColumnName("CustomerListID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CustomerName).HasMaxLength(200);

                entity.Property(e => e.CustomerNumber).HasMaxLength(150);

                entity.Property(e => e.Market).HasMaxLength(50);

                entity.Property(e => e.MarketId)
                    .HasColumnName("MarketID")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CustomerRawDataMaster>(entity =>
            {
                entity.HasKey(e => e.RawDmid)
                    .HasName("PK_Alkem_RawDataMaster");

                entity.ToTable("Customer_RawDataMaster");

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para51).IsUnicode(false);

                entity.Property(e => e.Para52).IsUnicode(false);

                entity.Property(e => e.Para53).IsUnicode(false);

                entity.Property(e => e.Para54).IsUnicode(false);

                entity.Property(e => e.Para55).IsUnicode(false);

                entity.Property(e => e.Para56).IsUnicode(false);

                entity.Property(e => e.Para57).IsUnicode(false);

                entity.Property(e => e.Para58).IsUnicode(false);

                entity.Property(e => e.Para59).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para60).IsUnicode(false);

                entity.Property(e => e.Para61).IsUnicode(false);

                entity.Property(e => e.Para62).IsUnicode(false);

                entity.Property(e => e.Para63).IsUnicode(false);

                entity.Property(e => e.Para64).IsUnicode(false);

                entity.Property(e => e.Para65).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.Reason).IsUnicode(false);
            });

            modelBuilder.Entity<DailyAspectComplianceReport>(entity =>
            {
                entity.ToTable("Daily_AspectComplianceReport");

                entity.Property(e => e.AspectVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Missing)
                    .HasColumnName("Missing%")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Process)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Recording)
                    .HasColumnName("Recording%")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DailyUserAuxstartEndDetails>(entity =>
            {
                entity.ToTable("DailyUserAUXStartEndDetails");

                entity.Property(e => e.DailyUserAuxstartEndDetailsId)
                    .HasColumnName("DailyUserAUXStartEndDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.FirstAuxdetailsId)
                    .HasColumnName("FirstAUXDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastAuxdetailsId)
                    .HasColumnName("LastAUXDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.WindowsLoginId)
                    .HasColumnName("WindowsLoginID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DataColumnMaster>(entity =>
            {
                entity.HasKey(e => e.DataColumnMid);

                entity.Property(e => e.DataColumnMid).HasColumnName("DataColumnMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataColumnValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataColumnMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataColumnMid).HasColumnName("DataColumnMID");

                entity.Property(e => e.DataColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataColumnValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetail>(entity =>
            {
                entity.HasKey(e => e.DataDid);

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para51).IsUnicode(false);

                entity.Property(e => e.Para52).IsUnicode(false);

                entity.Property(e => e.Para53).IsUnicode(false);

                entity.Property(e => e.Para54).IsUnicode(false);

                entity.Property(e => e.Para55).IsUnicode(false);

                entity.Property(e => e.Para56).IsUnicode(false);

                entity.Property(e => e.Para57).IsUnicode(false);

                entity.Property(e => e.Para58).IsUnicode(false);

                entity.Property(e => e.Para59).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para60).IsUnicode(false);

                entity.Property(e => e.Para61).IsUnicode(false);

                entity.Property(e => e.Para62).IsUnicode(false);

                entity.Property(e => e.Para63).IsUnicode(false);

                entity.Property(e => e.Para64).IsUnicode(false);

                entity.Property(e => e.Para65).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.Queue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Skill)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetail07022018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataDetail_07022018");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid)
                    .HasColumnName("DataDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para51).IsUnicode(false);

                entity.Property(e => e.Para52).IsUnicode(false);

                entity.Property(e => e.Para53).IsUnicode(false);

                entity.Property(e => e.Para54).IsUnicode(false);

                entity.Property(e => e.Para55).IsUnicode(false);

                entity.Property(e => e.Para56).IsUnicode(false);

                entity.Property(e => e.Para57).IsUnicode(false);

                entity.Property(e => e.Para58).IsUnicode(false);

                entity.Property(e => e.Para59).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para60).IsUnicode(false);

                entity.Property(e => e.Para61).IsUnicode(false);

                entity.Property(e => e.Para62).IsUnicode(false);

                entity.Property(e => e.Para63).IsUnicode(false);

                entity.Property(e => e.Para64).IsUnicode(false);

                entity.Property(e => e.Para65).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.Queue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Skill)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.HasIndex(e => new { e.DataDid, e.CreatedDateTime })
                    .HasName("NonClusteredIndex-20180222-183133");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para51).IsUnicode(false);

                entity.Property(e => e.Para52).IsUnicode(false);

                entity.Property(e => e.Para53).IsUnicode(false);

                entity.Property(e => e.Para54).IsUnicode(false);

                entity.Property(e => e.Para55).IsUnicode(false);

                entity.Property(e => e.Para56).IsUnicode(false);

                entity.Property(e => e.Para57).IsUnicode(false);

                entity.Property(e => e.Para58).IsUnicode(false);

                entity.Property(e => e.Para59).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para60).IsUnicode(false);

                entity.Property(e => e.Para61).IsUnicode(false);

                entity.Property(e => e.Para62).IsUnicode(false);

                entity.Property(e => e.Para63).IsUnicode(false);

                entity.Property(e => e.Para64).IsUnicode(false);

                entity.Property(e => e.Para65).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.Queue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Skill)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetailRamu01052018>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid)
                    .HasColumnName("DataDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para51).IsUnicode(false);

                entity.Property(e => e.Para52).IsUnicode(false);

                entity.Property(e => e.Para53).IsUnicode(false);

                entity.Property(e => e.Para54).IsUnicode(false);

                entity.Property(e => e.Para55).IsUnicode(false);

                entity.Property(e => e.Para56).IsUnicode(false);

                entity.Property(e => e.Para57).IsUnicode(false);

                entity.Property(e => e.Para58).IsUnicode(false);

                entity.Property(e => e.Para59).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para60).IsUnicode(false);

                entity.Property(e => e.Para61).IsUnicode(false);

                entity.Property(e => e.Para62).IsUnicode(false);

                entity.Property(e => e.Para63).IsUnicode(false);

                entity.Property(e => e.Para64).IsUnicode(false);

                entity.Property(e => e.Para65).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.Queue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Skill)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetailTemp>(entity =>
            {
                entity.HasKey(e => e.TempDataDid);

                entity.ToTable("DataDetail_Temp");

                entity.Property(e => e.TempDataDid).HasColumnName("TempDataDID");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para11)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para12)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para13)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para14)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para15)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para16)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para20)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para30)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para32)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para33)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para34)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para35)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para36)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para37)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para38)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para39)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para40)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para41)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para42)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para43)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para44)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para45)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para46)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para47)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para48)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para49)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para50)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para51)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para52)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para53)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para54)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para55)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para56)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para57)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para58)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para59)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para60)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para61)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para62)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para63)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para64)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para65)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para9)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Queue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Skill)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetailTempLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataDetail_Temp_Log");

                entity.Property(e => e.ContactedNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogMid)
                    .HasColumnName("LogMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.Para1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para11)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para12)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para13)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para14)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para15)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para16)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para161).IsUnicode(false);

                entity.Property(e => e.Para162).IsUnicode(false);

                entity.Property(e => e.Para163).IsUnicode(false);

                entity.Property(e => e.Para164).IsUnicode(false);

                entity.Property(e => e.Para165).IsUnicode(false);

                entity.Property(e => e.Para166).IsUnicode(false);

                entity.Property(e => e.Para167).IsUnicode(false);

                entity.Property(e => e.Para168).IsUnicode(false);

                entity.Property(e => e.Para169).IsUnicode(false);

                entity.Property(e => e.Para17)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para170).IsUnicode(false);

                entity.Property(e => e.Para171).IsUnicode(false);

                entity.Property(e => e.Para172).IsUnicode(false);

                entity.Property(e => e.Para173).IsUnicode(false);

                entity.Property(e => e.Para174).IsUnicode(false);

                entity.Property(e => e.Para175).IsUnicode(false);

                entity.Property(e => e.Para176).IsUnicode(false);

                entity.Property(e => e.Para177).IsUnicode(false);

                entity.Property(e => e.Para178).IsUnicode(false);

                entity.Property(e => e.Para179).IsUnicode(false);

                entity.Property(e => e.Para18)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para180).IsUnicode(false);

                entity.Property(e => e.Para181).IsUnicode(false);

                entity.Property(e => e.Para182).IsUnicode(false);

                entity.Property(e => e.Para183).IsUnicode(false);

                entity.Property(e => e.Para184).IsUnicode(false);

                entity.Property(e => e.Para185).IsUnicode(false);

                entity.Property(e => e.Para186).IsUnicode(false);

                entity.Property(e => e.Para187).IsUnicode(false);

                entity.Property(e => e.Para188).IsUnicode(false);

                entity.Property(e => e.Para189).IsUnicode(false);

                entity.Property(e => e.Para19)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para190).IsUnicode(false);

                entity.Property(e => e.Para191).IsUnicode(false);

                entity.Property(e => e.Para192).IsUnicode(false);

                entity.Property(e => e.Para193).IsUnicode(false);

                entity.Property(e => e.Para194).IsUnicode(false);

                entity.Property(e => e.Para195).IsUnicode(false);

                entity.Property(e => e.Para196).IsUnicode(false);

                entity.Property(e => e.Para197).IsUnicode(false);

                entity.Property(e => e.Para198).IsUnicode(false);

                entity.Property(e => e.Para199).IsUnicode(false);

                entity.Property(e => e.Para2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para20)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para200).IsUnicode(false);

                entity.Property(e => e.Para201).IsUnicode(false);

                entity.Property(e => e.Para202).IsUnicode(false);

                entity.Property(e => e.Para203).IsUnicode(false);

                entity.Property(e => e.Para204).IsUnicode(false);

                entity.Property(e => e.Para205).IsUnicode(false);

                entity.Property(e => e.Para206).IsUnicode(false);

                entity.Property(e => e.Para207).IsUnicode(false);

                entity.Property(e => e.Para208).IsUnicode(false);

                entity.Property(e => e.Para209).IsUnicode(false);

                entity.Property(e => e.Para21)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para210).IsUnicode(false);

                entity.Property(e => e.Para211).IsUnicode(false);

                entity.Property(e => e.Para212).IsUnicode(false);

                entity.Property(e => e.Para213).IsUnicode(false);

                entity.Property(e => e.Para214).IsUnicode(false);

                entity.Property(e => e.Para215).IsUnicode(false);

                entity.Property(e => e.Para216).IsUnicode(false);

                entity.Property(e => e.Para217).IsUnicode(false);

                entity.Property(e => e.Para218).IsUnicode(false);

                entity.Property(e => e.Para219).IsUnicode(false);

                entity.Property(e => e.Para22)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para220).IsUnicode(false);

                entity.Property(e => e.Para221).IsUnicode(false);

                entity.Property(e => e.Para222).IsUnicode(false);

                entity.Property(e => e.Para223).IsUnicode(false);

                entity.Property(e => e.Para224).IsUnicode(false);

                entity.Property(e => e.Para225).IsUnicode(false);

                entity.Property(e => e.Para226).IsUnicode(false);

                entity.Property(e => e.Para227).IsUnicode(false);

                entity.Property(e => e.Para228).IsUnicode(false);

                entity.Property(e => e.Para229).IsUnicode(false);

                entity.Property(e => e.Para23)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para230).IsUnicode(false);

                entity.Property(e => e.Para231).IsUnicode(false);

                entity.Property(e => e.Para232).IsUnicode(false);

                entity.Property(e => e.Para233).IsUnicode(false);

                entity.Property(e => e.Para234).IsUnicode(false);

                entity.Property(e => e.Para235).IsUnicode(false);

                entity.Property(e => e.Para236).IsUnicode(false);

                entity.Property(e => e.Para237).IsUnicode(false);

                entity.Property(e => e.Para238).IsUnicode(false);

                entity.Property(e => e.Para239).IsUnicode(false);

                entity.Property(e => e.Para24)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para240).IsUnicode(false);

                entity.Property(e => e.Para241).IsUnicode(false);

                entity.Property(e => e.Para242).IsUnicode(false);

                entity.Property(e => e.Para243).IsUnicode(false);

                entity.Property(e => e.Para244).IsUnicode(false);

                entity.Property(e => e.Para245).IsUnicode(false);

                entity.Property(e => e.Para246).IsUnicode(false);

                entity.Property(e => e.Para247).IsUnicode(false);

                entity.Property(e => e.Para248).IsUnicode(false);

                entity.Property(e => e.Para249).IsUnicode(false);

                entity.Property(e => e.Para25)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para250).IsUnicode(false);

                entity.Property(e => e.Para251).IsUnicode(false);

                entity.Property(e => e.Para252).IsUnicode(false);

                entity.Property(e => e.Para253).IsUnicode(false);

                entity.Property(e => e.Para254).IsUnicode(false);

                entity.Property(e => e.Para255).IsUnicode(false);

                entity.Property(e => e.Para256).IsUnicode(false);

                entity.Property(e => e.Para257).IsUnicode(false);

                entity.Property(e => e.Para258).IsUnicode(false);

                entity.Property(e => e.Para259).IsUnicode(false);

                entity.Property(e => e.Para26)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para260).IsUnicode(false);

                entity.Property(e => e.Para261).IsUnicode(false);

                entity.Property(e => e.Para262).IsUnicode(false);

                entity.Property(e => e.Para263).IsUnicode(false);

                entity.Property(e => e.Para264).IsUnicode(false);

                entity.Property(e => e.Para265).IsUnicode(false);

                entity.Property(e => e.Para266).IsUnicode(false);

                entity.Property(e => e.Para267).IsUnicode(false);

                entity.Property(e => e.Para268).IsUnicode(false);

                entity.Property(e => e.Para269).IsUnicode(false);

                entity.Property(e => e.Para27)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para270).IsUnicode(false);

                entity.Property(e => e.Para271).IsUnicode(false);

                entity.Property(e => e.Para272).IsUnicode(false);

                entity.Property(e => e.Para273).IsUnicode(false);

                entity.Property(e => e.Para274).IsUnicode(false);

                entity.Property(e => e.Para275).IsUnicode(false);

                entity.Property(e => e.Para276).IsUnicode(false);

                entity.Property(e => e.Para277).IsUnicode(false);

                entity.Property(e => e.Para278).IsUnicode(false);

                entity.Property(e => e.Para279).IsUnicode(false);

                entity.Property(e => e.Para28)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para280).IsUnicode(false);

                entity.Property(e => e.Para281).IsUnicode(false);

                entity.Property(e => e.Para282).IsUnicode(false);

                entity.Property(e => e.Para283).IsUnicode(false);

                entity.Property(e => e.Para284).IsUnicode(false);

                entity.Property(e => e.Para285).IsUnicode(false);

                entity.Property(e => e.Para286).IsUnicode(false);

                entity.Property(e => e.Para287).IsUnicode(false);

                entity.Property(e => e.Para288).IsUnicode(false);

                entity.Property(e => e.Para289).IsUnicode(false);

                entity.Property(e => e.Para29)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para290).IsUnicode(false);

                entity.Property(e => e.Para291).IsUnicode(false);

                entity.Property(e => e.Para292).IsUnicode(false);

                entity.Property(e => e.Para293).IsUnicode(false);

                entity.Property(e => e.Para294).IsUnicode(false);

                entity.Property(e => e.Para295).IsUnicode(false);

                entity.Property(e => e.Para296).IsUnicode(false);

                entity.Property(e => e.Para297).IsUnicode(false);

                entity.Property(e => e.Para298).IsUnicode(false);

                entity.Property(e => e.Para299).IsUnicode(false);

                entity.Property(e => e.Para3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para30)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para300).IsUnicode(false);

                entity.Property(e => e.Para31)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para32)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para33)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para34)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para35)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para36)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para37)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para38)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para39)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para40)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para41)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para42)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para43)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para44)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para45)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para46)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para47)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para48)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para49)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para50)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para51)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para52)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para53)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para54)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para55)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para56)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para57)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para58)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para59)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para60)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para61)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para62)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para63)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para64)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para65)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para9)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Queue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Skill)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.TempDataDid).HasColumnName("TempDataDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDetailUploadBatchMapping>(entity =>
            {
                entity.HasKey(e => e.Ddubmid)
                    .HasName("PK__DataDeta__8CFE92559F1DE057");

                entity.Property(e => e.Ddubmid).HasColumnName("DDUBMID");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.TempDataDid).HasColumnName("TempDataDID");
            });

            modelBuilder.Entity<DataDetailUploadBatchMapping07022018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataDetailUploadBatchMapping_07022018");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.Ddubmid)
                    .HasColumnName("DDUBMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TempDataDid).HasColumnName("TempDataDID");
            });

            modelBuilder.Entity<DataDetailUploadBatchMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__DataDeta__D3261104155315CF");

                entity.ToTable("DataDetailUploadBatchMapping_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.Ddubmid).HasColumnName("DDUBMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TempDataDid).HasColumnName("TempDataDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataExportTypeMaster>(entity =>
            {
                entity.HasKey(e => e.DataExportTypeMid);

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataExportType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataExtractionDetails>(entity =>
            {
                entity.HasKey(e => e.DataExtractDid);

                entity.Property(e => e.DataExtractDid).HasColumnName("DataExtractDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.DataSearchDid).HasColumnName("DataSearchDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LastCallDateTime).HasColumnType("datetime");

                entity.Property(e => e.LastDispositionMid).HasColumnName("LastDispositionMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<DataExtractionDetailsDeleted>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("DataExtractionDetails_Deleted");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.DataExtractDid).HasColumnName("DataExtractDID");

                entity.Property(e => e.DataSearchDid).HasColumnName("DataSearchDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LastCallDateTime).HasColumnType("datetime");

                entity.Property(e => e.LastDispositionMid).HasColumnName("LastDispositionMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogCreatedDateTimeUtc)
                    .HasColumnName("LogCreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<DataFlowCheckList>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CheckList)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowDncexternal>(entity =>
            {
                entity.HasKey(e => e.Dnceid)
                    .HasName("PK__DataFlow__54BE0914941209A7");

                entity.ToTable("DataFlowDNCExternal");

                entity.Property(e => e.Dnceid).HasColumnName("DNCEID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dncdate)
                    .HasColumnName("DNCDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2099-12-31')");

                entity.Property(e => e.FreeezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowDncinternal>(entity =>
            {
                entity.HasKey(e => e.Dnciid)
                    .HasName("PK__DataFlow__56208257F09208ED");

                entity.ToTable("DataFlowDNCInternal");

                entity.Property(e => e.Dnciid).HasColumnName("DNCIID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dncdate)
                    .HasColumnName("DNCDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2099-12-31')");

                entity.Property(e => e.FreeezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowFileStatusMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusDid)
                    .HasColumnName("StatusDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowMaster>(entity =>
            {
                entity.HasKey(e => e.DataFlowMid);

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataFlowTypeMid).HasColumnName("DataFlowTypeMID");

                entity.Property(e => e.DataUploadTableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataUploadType).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExclusionRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExternalDnc)
                    .HasColumnName("ExternalDNC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InternalDnc).HasColumnName("InternalDNC");

                entity.Property(e => e.MasterCheckRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.ScrubbingRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("DataFlowMaster_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DataFlowName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataFlowTypeMid).HasColumnName("DataFlowTypeMID");

                entity.Property(e => e.DataUploadTableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataUploadType).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExternalDnc).HasColumnName("ExternalDNC");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InternalDnc).HasColumnName("InternalDNC");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowTypeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataFlowTypeMid)
                    .HasColumnName("DataFlowTypeMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataFlowUploadMaster>(entity =>
            {
                entity.HasKey(e => e.FileMid);

                entity.Property(e => e.FileMid).HasColumnName("FileMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(300);

                entity.Property(e => e.ExecutionDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExecutionStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExecutionStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileNameSystem)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilePathSystem)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataFlowUploadTemplatesMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Freezestatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateMid).ValueGeneratedOnAdd();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataSearchDetails>(entity =>
            {
                entity.HasKey(e => e.DataSearchDid);

                entity.Property(e => e.DataSearchDid).HasColumnName("DataSearchDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SearchText).IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<DataSearchDetailsLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("DataSearchDetails_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.DataSearchDid).HasColumnName("DataSearchDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogCreatedDateTimeUtc)
                    .HasColumnName("LogCreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SearchText).IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<DataStatusMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StatusMid)
                    .HasColumnName("StatusMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataUploadTypeMaster>(entity =>
            {
                entity.HasKey(e => e.TypeMid);

                entity.Property(e => e.TypeMid).HasColumnName("TypeMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataUploadType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreeseStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<DataflowBatchDetail>(entity =>
            {
                entity.HasKey(e => e.DataFlowBdid)
                    .HasName("PK__Dataflow__918285594FAAF0BB");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.BatchName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExcludedData).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExlusionTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MasterisationTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowBatchDetail07022018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataflowBatchDetail_07022018");

                entity.Property(e => e.BatchName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowBdid)
                    .HasColumnName("DataFlowBDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExlusionTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MasterisationTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowBatchDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Dataflow__5E5499A84AE26AFE");

                entity.ToTable("DataflowBatchDetail_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExlusionTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MasterisationTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowBatchDetailRamu01052018>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BatchName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowBdid)
                    .HasColumnName("DataFlowBDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExlusionTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MasterisationTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowBatchFieldMappingDetail>(entity =>
            {
                entity.HasKey(e => e.DataFlowBfmid)
                    .HasName("PK__Dataflow__87561E9EE287E0AC");

                entity.Property(e => e.DataFlowBfmid).HasColumnName("DataFlowBFMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowFcid).HasColumnName("DataFlowFCID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowBatchMappingDetail>(entity =>
            {
                entity.HasKey(e => e.DataFlowBmdid)
                    .HasName("PK__Dataflow__A3C801DC544F20F7");

                entity.Property(e => e.DataFlowBmdid).HasColumnName("DataFlowBMDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DestinationAlias)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JoinType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceAlias)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowBatchMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Dataflow__5E5499A8DB280C33");

                entity.ToTable("DataflowBatchMappingDetail_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowBdid).HasColumnName("DataFlowBDID");

                entity.Property(e => e.DataFlowBmdid).HasColumnName("DataFlowBMDID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DestinationAlias)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JoinType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceAlias)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowErrorlog>(entity =>
            {
                entity.HasKey(e => e.DataFelid)
                    .HasName("PK__Dataflow__D0711BCAEE827FD1");

                entity.ToTable("DataflowERRORLog");

                entity.Property(e => e.DataFelid).HasColumnName("DataFELID");

                entity.Property(e => e.CreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomiseError).IsUnicode(false);

                entity.Property(e => e.ErrorMessage).IsUnicode(false);

                entity.Property(e => e.ErrorNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceId)
                    .HasColumnName("ReferenceID")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataflowExclusion>(entity =>
            {
                entity.HasKey(e => e.DataFlowEid)
                    .HasName("PK__Dataflow__79DE593B129A6AE7");

                entity.Property(e => e.DataFlowEid).HasColumnName("DataFlowEID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.Displayquery).IsUnicode(false);

                entity.Property(e => e.ExclusionQuery).IsUnicode(false);

                entity.Property(e => e.ExclusionReason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowExclusionLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Dataflow__5E5499A83F30E9FF");

                entity.ToTable("DataflowExclusion_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowEid).HasColumnName("DataFlowEID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.Displayquery).IsUnicode(false);

                entity.Property(e => e.ExclusionQuery).IsUnicode(false);

                entity.Property(e => e.ExclusionReason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowFieldConfiguration>(entity =>
            {
                entity.HasKey(e => e.DataFlowFcid);

                entity.Property(e => e.DataFlowFcid).HasColumnName("DataFlowFCID");

                entity.Property(e => e.AllocationRequired).HasColumnName("Allocation_required");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExternalDnc).HasColumnName("ExternalDNC");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InternalDnc).HasColumnName("InternalDNC");

                entity.Property(e => e.Isgrouping).HasColumnName("ISGrouping");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowFieldConfigurationLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Dataflow__5E5499A813B611AB");

                entity.ToTable("DataflowFieldConfiguration_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AllocationRequired).HasColumnName("Allocation_required");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowFcid).HasColumnName("DataFlowFCID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExternalDnc).HasColumnName("ExternalDNC");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InternalDnc).HasColumnName("InternalDNC");

                entity.Property(e => e.Isgrouping).HasColumnName("ISGrouping");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowFieldConfigurationTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataflowFieldConfiguration_Temp");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowFcid)
                    .HasColumnName("DataFlowFCID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExternalDnc).HasColumnName("ExternalDNC");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InternalDnc).HasColumnName("InternalDNC");

                entity.Property(e => e.Isgrouping).HasColumnName("ISGrouping");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowMasterisation>(entity =>
            {
                entity.HasKey(e => e.DataFlowMsid)
                    .HasName("PK__Dataflow__3479AF85A295BDBD");

                entity.Property(e => e.DataFlowMsid).HasColumnName("DataFlowMSID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowFcid).HasColumnName("DataFlowFCID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Value).HasMaxLength(2000);
            });

            modelBuilder.Entity<DataflowMasterisationLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Dataflow__5E5499A87C7E30CC");

                entity.ToTable("DataflowMasterisation_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowFcid).HasColumnName("DataFlowFCID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DataFlowMsid).HasColumnName("DataFlowMSID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Value).HasMaxLength(2000);
            });

            modelBuilder.Entity<DataflowScrubbing>(entity =>
            {
                entity.HasKey(e => e.DataFlowSid)
                    .HasName("PK__Dataflow__C7EEC063D3825737");

                entity.Property(e => e.DataFlowSid).HasColumnName("DataFlowSID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.Displayquery).IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataflowScrubbingLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Dataflow__5E5499A82EDCC2D0");

                entity.ToTable("DataflowScrubbing_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DataFlowSid).HasColumnName("DataFlowSID");

                entity.Property(e => e.Displayquery).IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetailedQueryActionTakenMaster>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DetailedQueryActionTaken).HasMaxLength(250);
            });

            modelBuilder.Entity<DetectionDisplayControlMaster>(entity =>
            {
                entity.HasKey(e => e.DetDcmmid)
                    .HasName("PK__Detectio__34F8006AD6B7368F");

                entity.ToTable("Detection_DisplayControlMaster");

                entity.Property(e => e.DetDcmmid).HasColumnName("DetDCMMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.Outputvalue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionDisplayControlMaster26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_DisplayControlMaster_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetDcmmid)
                    .HasColumnName("DetDCMMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.Outputvalue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionDisplayControlMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Detectio__5E5499A8817A08C0");

                entity.ToTable("Detection_DisplayControlMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetDcmmid).HasColumnName("DetDCMMID");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.Outputvalue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionDisplayControlMasterLog26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_DisplayControlMasterLog_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetDcmmid).HasColumnName("DetDCMMID");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.Outputvalue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSearchDetail>(entity =>
            {
                entity.HasKey(e => e.DetSdid)
                    .HasName("PK__Detectio__39B2128AD91A0994");

                entity.ToTable("Detection_SearchDetail");

                entity.Property(e => e.DetSdid).HasColumnName("DetSDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSearchDetail26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_SearchDetail_26092018");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSdid)
                    .HasColumnName("DetSDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSiteMaster>(entity =>
            {
                entity.HasKey(e => e.DetSmid)
                    .HasName("PK__Detectio__3CEFC07CD7BBD6CA");

                entity.ToTable("Detection_SiteMaster");

                entity.Property(e => e.DetSmid).HasColumnName("DetSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ControlLoginButton)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FixedLogin)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0-NR, 1-Fixed Login ,2 -Individual Login");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 - Active 1- Deative");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DetectionSiteMaster26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_SiteMaster_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ControlLoginButton)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSmid)
                    .HasColumnName("DetSMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DetectionSiteMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Detectio__5E5499A82F2554D6");

                entity.ToTable("Detection_SiteMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ControlLoginButton)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSmid).HasColumnName("DetSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DetectionSiteMasterLog26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_SiteMasterLog_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ControlLoginButton)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControlUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSmid).HasColumnName("DetSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DetectionSiteSearchMaster>(entity =>
            {
                entity.HasKey(e => e.DetSsmid)
                    .HasName("PK__Detectio__D74C27E17908DC09");

                entity.ToTable("Detection_SiteSearchMaster");

                entity.Property(e => e.DetSsmid).HasColumnName("DetSSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 - Active 1- Deactive");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSiteSearchMaster26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_SiteSearchMaster_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSsmid)
                    .HasColumnName("DetSSMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSiteSearchMasterlog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__Detectio__5E5499A835756D1D");

                entity.ToTable("Detection_SiteSearchMasterlog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetSsmid).HasColumnName("DetSSMID");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSiteSearchMasterlog26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_SiteSearchMasterlog_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSsmid).HasColumnName("DetSSMID");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSiteSearchUrl>(entity =>
            {
                entity.HasKey(e => e.DetSsuid);

                entity.ToTable("Detection_SiteSearchURL");

                entity.Property(e => e.DetSsuid).HasColumnName("DetSSUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetSmid).HasColumnName("DetSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SiteUrl)
                    .HasColumnName("SiteURL")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DetectionSiteSearchUrl26092018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detection_SiteSearchURL_26092018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DetSmid).HasColumnName("DetSMID");

                entity.Property(e => e.DetSsuid)
                    .HasColumnName("DetSSUID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SiteUrl)
                    .HasColumnName("SiteURL")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DiallerExportConfigurationMaster>(entity =>
            {
                entity.HasKey(e => e.DiallerEcmid);

                entity.Property(e => e.DiallerEcmid).HasColumnName("DiallerECMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Columnlength).HasColumnName("columnlength");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomizedColumn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.ExportName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DiallerExportConfigurationMasterDeepak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DiallerExportConfigurationMaster_Deepak");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Columnlength).HasColumnName("columnlength");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomizedColumn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DiallerEcmid)
                    .HasColumnName("DiallerECMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ExportName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DiallerExportConfigurationMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Columnlength).HasColumnName("columnlength");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomizedColumn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DataExportTypeMid).HasColumnName("DataExportTypeMID");

                entity.Property(e => e.DataFlowMid).HasColumnName("DataFlowMID");

                entity.Property(e => e.DiallerEcmid).HasColumnName("DiallerECMID");

                entity.Property(e => e.ExportName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DiallerLoginLogDetail>(entity =>
            {
                entity.HasKey(e => e.DiallerLldid);

                entity.Property(e => e.DiallerLldid).HasColumnName("DiallerLLDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Extension)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogOuttime)
                    .HasColumnName("LogOUTTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PortalId)
                    .HasColumnName("PortalID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("ServiceID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DiallerTableMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerTableMid)
                    .HasColumnName("DiallerTableMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DiallerTypeMaster>(entity =>
            {
                entity.HasKey(e => e.DiallerTypeMid);

                entity.Property(e => e.DiallerTypeMid).HasColumnName("DiallerTypeMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiallerType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DiallerVersionMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiallerVersion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerVersionMid)
                    .HasColumnName("DiallerVersionMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Disposition>(entity =>
            {
                entity.HasKey(e => e.DispositionMid);

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerMode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 For No Dialler, 1 For Predictive/Preview, 2 For Manual Dialler Mode, 3 For All");

                entity.Property(e => e.Disposition1)
                    .HasColumnName("Disposition")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ParentDid)
                    .HasColumnName("ParentDID")
                    .HasComment("Parent Desposition ID");

                entity.Property(e => e.PerformanceCriteria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Disposition04042018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Disposition_04042018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Disposition)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionMid)
                    .HasColumnName("DispositionMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ParentDid).HasColumnName("ParentDID");

                entity.Property(e => e.PerformanceCriteria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Disposition09032018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Disposition_09032018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Disposition)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionMid)
                    .HasColumnName("DispositionMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ParentDid).HasColumnName("ParentDID");

                entity.Property(e => e.PerformanceCriteria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Disposition1382018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Disposition_13_8_2018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Disposition)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionMid)
                    .HasColumnName("DispositionMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ParentDid).HasColumnName("ParentDID");

                entity.Property(e => e.PerformanceCriteria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionControlMapping21082018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DispositionControlMapping_21_08_2018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.MappingId)
                    .HasColumnName("MappingID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionControlMappping>(entity =>
            {
                entity.HasKey(e => e.MappingId);

                entity.Property(e => e.MappingId).HasColumnName("MappingID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionControlMappping121020181712>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DispositionControlMappping_12102018_1712");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.MappingId)
                    .HasColumnName("MappingID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("Disposition_LogKey");

                entity.ToTable("Disposition_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Disposition)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ParentDid).HasColumnName("ParentDID");

                entity.Property(e => e.PerformanceCriteria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionMiscDataMapping>(entity =>
            {
                entity.HasKey(e => e.DispositionMdid)
                    .HasName("PK__Disposit__65C1D5BE2268B2B2");

                entity.Property(e => e.DispositionMdid).HasColumnName("DispositionMDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionTypeAccessLevelMapping>(entity =>
            {
                entity.HasKey(e => e.MappingMid);

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultDispositionType).HasDefaultValueSql("((0))");

                entity.Property(e => e.DispositionTypeMid).HasColumnName("DispositionTypeMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionTypeAccessLevelMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultDispositionType).HasDefaultValueSql("((0))");

                entity.Property(e => e.DispositionTypeMid).HasColumnName("DispositionTypeMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionTypeMaster>(entity =>
            {
                entity.HasKey(e => e.DispositionTypeMid);

                entity.Property(e => e.DispositionTypeMid).HasColumnName("DispositionTypeMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispositionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DispositionTypeMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DispositionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionTypeMid).HasColumnName("DispositionTypeMID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DisputeDetails>(entity =>
            {
                entity.HasKey(e => e.DisputeDid);

                entity.Property(e => e.DisputeDid).HasColumnName("DisputeDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Para100)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para101)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para102)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para103)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para104)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para105)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para106)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para107)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para108)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para109)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para110)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para86)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para87)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para88)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para89)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para90)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para91)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para92)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para93)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para94)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para95)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para96)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para97)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para98)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para99)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 for High, 2 for Medium, 3 for Low");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<DisputeDetailsLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DisputeDid).HasColumnName("DisputeDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Para100)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para101)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para102)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para103)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para104)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para105)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para106)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para107)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para108)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para109)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para110)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para86)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para87)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para88)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para89)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para90)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para91)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para92)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para93)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para94)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para95)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para96)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para97)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para98)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Para99)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DynamicDiallerPortalMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AdminServerUrl)
                    .HasColumnName("AdminServerURL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CrmserverUrl)
                    .HasColumnName("CRMServerURL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Crmurl)
                    .HasColumnName("CRMURL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctiport).HasColumnName("CTIPort");

                entity.Property(e => e.Ctiproxy)
                    .HasColumnName("CTIProxy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerPortalMid)
                    .HasColumnName("DiallerPortalMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DiallerVersionMid).HasColumnName("DiallerVersionMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OnMediaWebService)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PortalName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DynamicDiallerServiceMaster>(entity =>
            {
                entity.HasKey(e => e.DiallerServiceMid)
                    .HasName("PK__DynamicD__C51BB00AED169495");

                entity.Property(e => e.DiallerServiceMid).HasColumnName("DiallerServiceMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DynamicDiallerVersionMaster>(entity =>
            {
                entity.HasKey(e => e.DynamicDiallerVersionMid);

                entity.Property(e => e.DynamicDiallerVersionMid).HasColumnName("DynamicDiallerVersionMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiallerTypeMid).HasColumnName("DiallerTypeMID");

                entity.Property(e => e.DiallerVersion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerVersionMid).HasColumnName("DiallerVersionMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Edi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI");

                entity.Property(e => e.ArchiveLocation)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EdiId).HasColumnName("EdiID");

                entity.Property(e => e.EdicampaignUnitId).HasColumnName("EDICampaignUnitID");

                entity.Property(e => e.Ediname)
                    .IsRequired()
                    .HasColumnName("EDIName")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmailRecipients)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.EmailRecipientsBcc)
                    .HasColumnName("EmailRecipientsBCC")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EncryptionCertificate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EncryptionKey)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendedProperties)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FileFormatId).HasColumnName("FileFormatID");

                entity.Property(e => e.FileNameMask).IsUnicode(false);

                entity.Property(e => e.FileTypeId).HasColumnName("FileTypeID");

                entity.Property(e => e.Ftpaddress)
                    .HasColumnName("FTPAddress")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ftpfolder)
                    .HasColumnName("FTPFolder")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Ftppassword)
                    .HasColumnName("FTPPassword")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ftpport).HasColumnName("FTPPort");

                entity.Property(e => e.FtpremoteMachine)
                    .HasColumnName("FTPRemoteMachine")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Ftpuser)
                    .HasColumnName("FTPUser")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IgnoreFtp).HasColumnName("IgnoreFTP");

                entity.Property(e => e.InvalidLocation)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.OnDeadlineCustomNotification).IsUnicode(false);

                entity.Property(e => e.OnErrorCustomNotification).IsUnicode(false);

                entity.Property(e => e.OnPreDeadlineCustomNotification).IsUnicode(false);

                entity.Property(e => e.OnPreValidateErrorCustomNotification).IsUnicode(false);

                entity.Property(e => e.OnPreValidateSuccessCustomNotification).IsUnicode(false);

                entity.Property(e => e.OnSuccessCustomNotification).IsUnicode(false);

                entity.Property(e => e.OnWarningCustomNotification).IsUnicode(false);

                entity.Property(e => e.ProcessingLocation)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingUnitId).HasColumnName("ReportingUnitID");

                entity.Property(e => e.RowTerminatorId).HasColumnName("RowTerminatorID");

                entity.Property(e => e.SFtpkey)
                    .HasColumnName("sFTPKey")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleDeadlineTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SchedulePreDeadlineTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SheetName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SsispackageLocation)
                    .HasColumnName("SSISPackageLocation")
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.StagingTableName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TextQualifier)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.XmlrecordName)
                    .HasColumnName("XMLRecordName")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.XmlrootName)
                    .HasColumnName("XMLRootName")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlxsinil).HasColumnName("XMLXSINIL");

                entity.Property(e => e.ZipFileNameMask)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZipFolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZipPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZipaddDate).HasColumnName("ZIPAddDate");
            });

            modelBuilder.Entity<EdiCuRawDataMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_CU_RawDataMaster");

                entity.Property(e => e.Abm)
                    .HasColumnName("ABM")
                    .HasMaxLength(50);

                entity.Property(e => e.AbmemailId)
                    .HasColumnName("ABMEmailID")
                    .HasMaxLength(200);

                entity.Property(e => e.Abmphone1)
                    .HasColumnName("ABMPhone1")
                    .HasMaxLength(200);

                entity.Property(e => e.Abmphone2)
                    .HasColumnName("ABMPhone2")
                    .HasMaxLength(200);

                entity.Property(e => e.Azgold)
                    .HasColumnName("AZGold")
                    .HasMaxLength(200);

                entity.Property(e => e.Colpep).HasMaxLength(200);

                entity.Property(e => e.ContactPersonName).HasMaxLength(20);

                entity.Property(e => e.CustomerEmailId)
                    .HasColumnName("CustomerEmailID")
                    .HasMaxLength(100);

                entity.Property(e => e.CustomerPhone1).HasMaxLength(50);

                entity.Property(e => e.CustomerPhone2).HasMaxLength(50);

                entity.Property(e => e.CustomerPhone3).HasMaxLength(50);

                entity.Property(e => e.CustomerPhone4).HasMaxLength(50);

                entity.Property(e => e.DepotName).HasMaxLength(200);

                entity.Property(e => e.Division).HasMaxLength(200);

                entity.Property(e => e.DoctorName).HasMaxLength(100);

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.Hemfer).HasMaxLength(200);

                entity.Property(e => e.HemferXt)
                    .HasColumnName("HemferXT")
                    .HasMaxLength(200);

                entity.Property(e => e.HospitalName).HasMaxLength(50);

                entity.Property(e => e.Lincef).HasMaxLength(200);

                entity.Property(e => e.Linokem).HasMaxLength(200);

                entity.Property(e => e.MonthlyLimit).HasMaxLength(200);

                entity.Property(e => e.Mr)
                    .HasColumnName("MR")
                    .HasMaxLength(100);

                entity.Property(e => e.MremailId)
                    .HasColumnName("MREmailID")
                    .HasMaxLength(200);

                entity.Property(e => e.Mrphone1)
                    .HasColumnName("MRPhone1")
                    .HasMaxLength(100);

                entity.Property(e => e.Mrphone2)
                    .HasColumnName("MRPhone2")
                    .HasMaxLength(100);

                entity.Property(e => e.Pipzo).HasMaxLength(200);

                entity.Property(e => e.Prowel).HasMaxLength(200);

                entity.Property(e => e.RawId).HasColumnName("Raw_ID");

                entity.Property(e => e.Rbm)
                    .HasColumnName("RBM")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RbmemailId)
                    .HasColumnName("RBMEmailID")
                    .HasMaxLength(200);

                entity.Property(e => e.Rbmphone1)
                    .HasColumnName("RBMPhone1")
                    .HasMaxLength(50);

                entity.Property(e => e.Rbmphone2)
                    .HasColumnName("RBMPhone2")
                    .HasMaxLength(50);

                entity.Property(e => e.Satrogyl).HasMaxLength(200);

                entity.Property(e => e.Stockist).HasMaxLength(200);

                entity.Property(e => e.System3Id)
                    .HasColumnName("System3ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System4Id)
                    .HasColumnName("System4ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System5Id)
                    .HasColumnName("System5ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System6Id)
                    .HasColumnName("System6ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System7Id)
                    .HasColumnName("System7ID")
                    .HasMaxLength(200);

                entity.Property(e => e.Taxclav).HasMaxLength(200);

                entity.Property(e => e.Trinerve).HasMaxLength(200);

                entity.Property(e => e.Ursokem).HasMaxLength(200);

                entity.Property(e => e.Xone).HasMaxLength(200);

                entity.Property(e => e.XoneSb)
                    .HasColumnName("XoneSB")
                    .HasMaxLength(200);

                entity.Property(e => e.XoneXp)
                    .HasColumnName("XoneXP")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<EdiEuRawDataMaster>(entity =>
            {
                entity.HasKey(e => e.RawId);

                entity.ToTable("EDI_EU_RawDataMaster");

                entity.Property(e => e.RawId).HasColumnName("Raw_ID");

                entity.Property(e => e.Address)
                    .HasColumnName("ADDRESS")
                    .HasMaxLength(200);

                entity.Property(e => e.ContactNo).HasMaxLength(200);

                entity.Property(e => e.DataType).HasMaxLength(50);

                entity.Property(e => e.Department).HasMaxLength(100);

                entity.Property(e => e.Division).HasMaxLength(100);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasMaxLength(200);

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasMaxLength(200);

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(200);

                entity.Property(e => e.EmployeeNo).HasMaxLength(100);

                entity.Property(e => e.EmployeeNoType).HasMaxLength(50);

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(20);

                entity.Property(e => e.Lanid)
                    .HasColumnName("LANID")
                    .HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.LeaverReason).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.ManagerGlobalUserId)
                    .HasColumnName("ManagerGlobalUserID")
                    .HasMaxLength(20);

                entity.Property(e => e.Post).HasMaxLength(100);

                entity.Property(e => e.Reason)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RoleLeaveDate).HasMaxLength(50);

                entity.Property(e => e.RoleStartDate).HasMaxLength(50);

                entity.Property(e => e.System1Id)
                    .HasColumnName("System1ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System2Id)
                    .HasColumnName("System2ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System3Id)
                    .HasColumnName("System3ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System4Id)
                    .HasColumnName("System4ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System5Id)
                    .HasColumnName("System5ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System6Id)
                    .HasColumnName("System6ID")
                    .HasMaxLength(200);

                entity.Property(e => e.System7Id)
                    .HasColumnName("System7ID")
                    .HasMaxLength(200);

                entity.Property(e => e.SystemId)
                    .HasColumnName("SystemID")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<EdiExecution>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_Execution");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.EmailXml).HasColumnName("EmailXML");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionId)
                    .HasColumnName("ExecutionID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.LogXml).HasColumnName("LogXML");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EdiExecutionError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_ExecutionError");

                entity.Property(e => e.ErrorId)
                    .HasColumnName("ErrorID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ErrorSample).IsUnicode(false);

                entity.Property(e => e.ErrorType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionId).HasColumnName("ExecutionID");

                entity.Property(e => e.FieldId).HasColumnName("FieldID");

                entity.Property(e => e.FileFormatId).HasColumnName("FileFormatID");

                entity.Property(e => e.RowId).HasColumnName("RowID");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");
            });

            modelBuilder.Entity<EdiFileFormat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_FileFormat");

                entity.Property(e => e.FileFormatId).HasColumnName("FileFormatID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EdiFileStatus>(entity =>
            {
                entity.ToTable("Edi_FileStatus");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");
            });

            modelBuilder.Entity<EdiFileStatusEu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_FileStatus_EU");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId).HasColumnName("StatusID");
            });

            modelBuilder.Entity<EdiFileUploadMaster>(entity =>
            {
                entity.HasKey(e => e.FileUmid);

                entity.ToTable("EDI_FileUploadMaster");

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.ActualFileName).IsUnicode(false);

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FilePathSystem).IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UploadMid).HasColumnName("UploadMID");
            });

            modelBuilder.Entity<EdiHeaderColumnMappingMaster>(entity =>
            {
                entity.HasKey(e => e.HeaderCmid);

                entity.ToTable("EDI_HeaderColumnMappingMaster");

                entity.Property(e => e.HeaderCmid).HasColumnName("HeaderCMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ColumnCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DataTypeFormat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DbcolumnName)
                    .HasColumnName("DBColumnName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DbdataType)
                    .HasColumnName("DBDataType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Encrypt).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExcelColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadMid).HasColumnName("UploadMID");
            });

            modelBuilder.Entity<EdiProcessParameters>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_ProcessParameters");

                entity.Property(e => e.Description)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.Value)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EdiRowTerminatorType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_RowTerminatorType");

                entity.Property(e => e.RowTerminatorId).HasColumnName("RowTerminatorID");

                entity.Property(e => e.RowTerminatorType)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EdiUploadMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EDI_UploadMaster");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ClientTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataBaseName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DataTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ediid).HasColumnName("EDIID");

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.RawTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.TemplateFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UploadId)
                    .HasColumnName("UploadID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UploadName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ValidateSaveProc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailLog>(entity =>
            {
                entity.HasKey(e => e.EmailLogDid);

                entity.Property(e => e.EmailLogDid).HasColumnName("EmailLogDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.DetailInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("Should contain Mail Header (To,CC,BCC) or Primiary Info for Email log");

                entity.Property(e => e.EmailBody)
                    .IsUnicode(false)
                    .HasComment("Contain HTML body of Email,XML data for corresponding  Email log");

                entity.Property(e => e.LogDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LoginMid)
                    .HasColumnName("LoginMID")
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");
            });

            modelBuilder.Entity<EmailMailAttachmentDetail>(entity =>
            {
                entity.ToTable("Email_MailAttachmentDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttachmentFile).HasColumnName("Attachment_File");

                entity.Property(e => e.AttachmentFileName)
                    .HasColumnName("Attachment_FIle_Name")
                    .IsUnicode(false);

                entity.Property(e => e.ContentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DownloadedOn)
                    .HasColumnName("Downloaded_On")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailDid).HasColumnName("EmailDID");

                entity.Property(e => e.IsInlineAttachment).HasColumnName("Is_Inline_Attachment");
            });

            modelBuilder.Entity<EmailMailBox>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_MailBox");

                entity.Property(e => e.AutoAssign).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoResponseMessage)
                    .HasColumnName("Auto_Response_Message")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseSubject)
                    .HasColumnName("Auto_Response_Subject")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseTat).HasColumnName("Auto_Response_TAT");

                entity.Property(e => e.AwardLogo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailId)
                    .HasColumnName("Email_Id")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.LogoFile).HasColumnName("Logo_File");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NreDescription)
                    .HasColumnName("NRE_Description")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NreIcon)
                    .HasColumnName("NRE_icon")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailId)
                    .HasColumnName("POP3_Email_Id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailPassword)
                    .HasColumnName("POP3_Email_Password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailUser)
                    .HasColumnName("POP3_Email_User")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3Port).HasColumnName("POP3_Port");

                entity.Property(e => e.Pop3ServerIp)
                    .HasColumnName("POP3_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Processing).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessingDate).HasColumnType("datetime");

                entity.Property(e => e.ServerType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpEmailId)
                    .HasColumnName("SMTP_EmailID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpEmailPassword)
                    .HasColumnName("SMTP_Email_Password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpEmailUser)
                    .HasColumnName("SMTP_EmailUser")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpIsSecure).HasColumnName("SMTP_IsSecure");

                entity.Property(e => e.SmtpPort).HasColumnName("SMTP_Port");

                entity.Property(e => e.SmtpServerIp)
                    .HasColumnName("SMTP_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpServerType)
                    .HasColumnName("SMTP_ServerType")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailMailBoxLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_MailBoxLog");

                entity.Property(e => e.AutoAssign).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoResponseMessage)
                    .HasColumnName("Auto_Response_Message")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseSubject)
                    .HasColumnName("Auto_Response_Subject")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseTat).HasColumnName("Auto_Response_TAT");

                entity.Property(e => e.AwardLogo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailId)
                    .HasColumnName("Email_Id")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogId).ValueGeneratedOnAdd();

                entity.Property(e => e.LogoFile).HasColumnName("Logo_File");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NreDescription)
                    .HasColumnName("NRE_Description")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NreIcon)
                    .HasColumnName("NRE_icon")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailId)
                    .HasColumnName("POP3_Email_Id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailPassword)
                    .HasColumnName("POP3_Email_Password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailUser)
                    .HasColumnName("POP3_Email_User")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3Port).HasColumnName("POP3_Port");

                entity.Property(e => e.Pop3ServerIp)
                    .HasColumnName("POP3_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Processing).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessingDate).HasColumnType("datetime");

                entity.Property(e => e.ServerType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpEmailId)
                    .HasColumnName("SMTP_EmailID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpEmailPassword)
                    .HasColumnName("SMTP_Email_Password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpEmailUser)
                    .HasColumnName("SMTP_EmailUser")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpIsSecure).HasColumnName("SMTP_IsSecure");

                entity.Property(e => e.SmtpPort).HasColumnName("SMTP_Port");

                entity.Property(e => e.SmtpServerIp)
                    .HasColumnName("SMTP_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpServerType)
                    .HasColumnName("SMTP_ServerType")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailMailBoxLogOld17012018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_MailBoxLog_Old_17012018");

                entity.Property(e => e.AutoResponseMessage)
                    .HasColumnName("Auto_Response_Message")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseSubject)
                    .HasColumnName("Auto_Response_Subject")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseTat).HasColumnName("Auto_Response_TAT");

                entity.Property(e => e.AwardLogo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailId)
                    .HasColumnName("Email_Id")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogId).ValueGeneratedOnAdd();

                entity.Property(e => e.LogoFile).HasColumnName("Logo_File");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NreDescription)
                    .HasColumnName("NRE_Description")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NreIcon)
                    .HasColumnName("NRE_icon")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailId)
                    .HasColumnName("POP3_Email_Id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailPassword)
                    .HasColumnName("POP3_Email_Password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailUser)
                    .HasColumnName("POP3_Email_User")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3Port).HasColumnName("POP3_Port");

                entity.Property(e => e.Pop3ServerIp)
                    .HasColumnName("POP3_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServerType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpPort).HasColumnName("SMTP_Port");

                entity.Property(e => e.SmtpServerIp)
                    .HasColumnName("SMTP_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailMailDetail>(entity =>
            {
                entity.ToTable("Email_MailDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActualSlabandMid).HasColumnName("ActualSLABandMID");

                entity.Property(e => e.AssignedDateTime).HasColumnType("datetime");

                entity.Property(e => e.AssignedDateTimeUtc)
                    .HasColumnName("AssignedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.AssignedToId).HasColumnName("AssignedToID");

                entity.Property(e => e.AutoAssign).HasColumnName("Auto_Assign");

                entity.Property(e => e.AutoResponseSent).HasColumnName("AutoResponse_Sent");

                entity.Property(e => e.CcEmailId)
                    .HasColumnName("CC_Email_Id")
                    .IsUnicode(false);

                entity.Property(e => e.CurrentSlabandMid).HasColumnName("CurrentSLABandMID");

                entity.Property(e => e.EmailBody)
                    .HasColumnName("Email_Body")
                    .IsUnicode(false);

                entity.Property(e => e.EmailDownloadDt)
                    .HasColumnName("Email_Download_DT")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailSentDt)
                    .HasColumnName("Email_Sent_DT")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailSubject)
                    .HasColumnName("Email_Subject")
                    .IsUnicode(false);

                entity.Property(e => e.EmailType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 - Read From Inbox 1- User Interface Mail not send 2- User Interface Mail Send, 3-Mail send with exe,4- Mail direct send from application not exe");

                entity.Property(e => e.FromEmailId)
                    .HasColumnName("From_Email_Id")
                    .IsUnicode(false);

                entity.Property(e => e.IsAssigned).HasColumnName("Is_Assigned");

                entity.Property(e => e.IsAttachment).HasColumnName("Is_Attachment");

                entity.Property(e => e.MailSendType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 For External, 1 For Internal");

                entity.Property(e => e.MailboxId).HasColumnName("Mailbox_ID");

                entity.Property(e => e.PrimaryTicketDid).HasColumnName("PrimaryTicketDID");

                entity.Property(e => e.PriorityMid).HasColumnName("PriorityMID");

                entity.Property(e => e.RequestType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 - Default 1-Ticket 2-Dispute");

                entity.Property(e => e.SlachangeDateTime)
                    .HasColumnName("SLAChangeDateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.SlachangeDateTimeUtc)
                    .HasColumnName("SLAChangeDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 For Downloaded Mail, 1 For Sent Mail");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.ToEmailId)
                    .HasColumnName("To_Email_Id")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Vip).HasColumnName("VIP");
            });

            modelBuilder.Entity<EmailSlabandMappingDetails>(entity =>
            {
                entity.HasKey(e => e.EmailSlamappingId);

                entity.ToTable("EmailSLABandMappingDetails");

                entity.Property(e => e.EmailSlamappingId).HasColumnName("EmailSLAMappingID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SlabandMid).HasColumnName("SLABandMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailStatusDetail>(entity =>
            {
                entity.HasKey(e => e.EmailSdid)
                    .HasName("PK__EmailSta__5CA578E30F1C2F4A");

                entity.Property(e => e.EmailSdid).HasColumnName("EmailSDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateddateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailBcc)
                    .HasColumnName("EmailBCC")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.EmailBody).IsUnicode(false);

                entity.Property(e => e.EmailCc)
                    .HasColumnName("EmailCC")
                    .IsUnicode(false);

                entity.Property(e => e.EmailDid).HasColumnName("EmailDID");

                entity.Property(e => e.EmailSubject).IsUnicode(false);

                entity.Property(e => e.EmailTo)
                    .HasColumnName("EmailTO")
                    .IsUnicode(false);

                entity.Property(e => e.EmailType).HasComment("0 - SLA breach Mail,1- User Interface Mail not send, 2- User Interface Mail Send not used, 3-Mail send with exe,4- Mail direct send from application not exe");

                entity.Property(e => e.MailBoxId).HasColumnName("MailBoxID");

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TicketClosedCofirm).HasComment("Mail to send after 24 hour of ticket closed, 1-Mail inserted to tis table from sceduled Proc,Null or 0 - ticket closed mail not send");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTemplateMappingMaster>(entity =>
            {
                entity.HasKey(e => e.TemplateMappingMid);

                entity.Property(e => e.TemplateMappingMid).HasColumnName("TemplateMappingMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateMid).HasColumnName("TemplateMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTemplateMappingMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateMappingMid).HasColumnName("TemplateMappingMID");

                entity.Property(e => e.TemplateMid).HasColumnName("TemplateMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTemplateMaster>(entity =>
            {
                entity.HasKey(e => e.TemplateMid);

                entity.Property(e => e.TemplateMid).HasColumnName("TemplateMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailBody).IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTemplateMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailBody).IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateMid).HasColumnName("TemplateMID");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTicketMappingDetailJunk>(entity =>
            {
                entity.HasKey(e => e.EmailMappingJunkDid);

                entity.ToTable("EmailTicketMappingDetail_Junk");

                entity.Property(e => e.EmailMappingJunkDid).HasColumnName("EmailMappingJunkDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailDid).HasColumnName("EmailDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RequestType).HasDefaultValueSql("((1))");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTicketMappingDetails>(entity =>
            {
                entity.HasKey(e => e.EmailMappingDid);

                entity.Property(e => e.EmailMappingDid).HasColumnName("EmailMappingDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailDid).HasColumnName("EmailDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RequestType).HasDefaultValueSql("((1))");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailTocMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_TOC_Master");

                entity.Property(e => e.AutoResponseMessage)
                    .HasColumnName("Auto_Response_Message")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseSubject)
                    .HasColumnName("Auto_Response_Subject")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AutoResponseTat).HasColumnName("Auto_Response_TAT");

                entity.Property(e => e.AwardLogo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasColumnName("Email_Id")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.LogoFile).HasColumnName("Logo_File");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NreDescription)
                    .HasColumnName("NRE_Description")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NreIcon)
                    .HasColumnName("NRE_icon")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailId)
                    .HasColumnName("POP3_Email_Id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailPassword)
                    .HasColumnName("POP3_Email_Password")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3EmailUser)
                    .HasColumnName("POP3_Email_User")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pop3Port).HasColumnName("POP3_Port");

                entity.Property(e => e.Pop3ServerIp)
                    .HasColumnName("POP3_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmtpPort).HasColumnName("SMTP_Port");

                entity.Property(e => e.SmtpServerIp)
                    .HasColumnName("SMTP_Server_IP")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailTypeMaster>(entity =>
            {
                entity.HasKey(e => e.EmailTypeId);

                entity.Property(e => e.EmailTypeId)
                    .HasColumnName("EmailTypeID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EmailType)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<EmailVipMailListDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_VIP_Mail_List_Details");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("Email_Address")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MatchCriteriaId).HasColumnName("Match_Criteria_Id");

                entity.Property(e => e.VipRuleId).HasColumnName("VIP_Rule_Id");

                entity.Property(e => e.VmListId)
                    .HasColumnName("VM_List_Id")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Emaildetails06092016>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("emaildetails06092016");

                entity.Property(e => e.AutoAssign).HasColumnName("Auto_Assign");

                entity.Property(e => e.AutoResponseSent).HasColumnName("AutoResponse_Sent");

                entity.Property(e => e.CcEmailId)
                    .HasColumnName("CC_Email_Id")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EmailBody)
                    .HasColumnName("Email_Body")
                    .IsUnicode(false);

                entity.Property(e => e.EmailDownloadDt)
                    .HasColumnName("Email_Download_DT")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailSentDt)
                    .HasColumnName("Email_Sent_DT")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailSubject)
                    .HasColumnName("Email_Subject")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromEmailId)
                    .HasColumnName("From_Email_Id")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsAssigned).HasColumnName("Is_Assigned");

                entity.Property(e => e.IsAttachment).HasColumnName("Is_Attachment");

                entity.Property(e => e.TicketMasterId).HasColumnName("Ticket_Master_Id");

                entity.Property(e => e.ToEmailId)
                    .HasColumnName("To_Email_Id")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TocId).HasColumnName("Toc_Id");

                entity.Property(e => e.Vip).HasColumnName("VIP");
            });

            modelBuilder.Entity<EmployeeDesignation>(entity =>
            {
                entity.HasKey(e => e.DesignationId);

                entity.Property(e => e.Designation).HasMaxLength(50);

                entity.Property(e => e.EntryBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'dbo')");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmployeeDetails>(entity =>
            {
                entity.HasKey(e => e.EmployeeId);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AttritionDate).HasColumnType("datetime");

                entity.Property(e => e.DateOfJoining).HasColumnType("datetime");

                entity.Property(e => e.Designation).HasMaxLength(100);

                entity.Property(e => e.EmployeeName).HasMaxLength(100);

                entity.Property(e => e.EmployeeNumber).HasMaxLength(50);

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.IsInternalQc).HasColumnName("IsInternalQC");

                entity.Property(e => e.Isactive).HasColumnName("ISActive");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.Process).HasMaxLength(100);

                entity.Property(e => e.ProductionDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SupervisorId)
                    .HasColumnName("SupervisorID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SupervisorName).HasMaxLength(100);

                entity.Property(e => e.WindowsLoginId)
                    .HasColumnName("WindowsLoginID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EmployeeProcess>(entity =>
            {
                entity.HasKey(e => e.ProcessId);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<EmployeeRoleMaster>(entity =>
            {
                entity.HasKey(e => e.RoleId);

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.Isactive)
                    .HasColumnName("ISActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.RoleName).HasMaxLength(100);
            });

            modelBuilder.Entity<Employees>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EntityMaster>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.Property(e => e.EntityId)
                    .HasColumnName("EntityID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeAsPerGp)
                    .HasColumnName("CodeAsPerGP")
                    .HasMaxLength(50);

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(50);

                entity.Property(e => e.EntityName).HasMaxLength(250);
            });

            modelBuilder.Entity<ErrorTracer>(entity =>
            {
                entity.HasKey(e => e.IErrorId)
                    .HasName("PK__ErrorTra__3488012B40860D9E");

                entity.Property(e => e.IErrorId).HasColumnName("iErrorID");

                entity.Property(e => e.DErrorDate)
                    .HasColumnName("dErrorDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.VErrorLine).HasColumnName("vErrorLine");

                entity.Property(e => e.VErrorMsg)
                    .HasColumnName("vErrorMsg")
                    .IsUnicode(false);

                entity.Property(e => e.VErrorNumber).HasColumnName("vErrorNumber");

                entity.Property(e => e.VErrorProc)
                    .HasColumnName("vErrorProc")
                    .IsUnicode(false);

                entity.Property(e => e.VErrorSeverity).HasColumnName("vErrorSeverity");

                entity.Property(e => e.VErrorState).HasColumnName("vErrorState");

                entity.Property(e => e.VHostName)
                    .HasColumnName("vHostName")
                    .IsUnicode(false);

                entity.Property(e => e.VUserName)
                    .HasColumnName("vUserName")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ErrorTracerCrmToDialer>(entity =>
            {
                entity.HasKey(e => e.IErrorId)
                    .HasName("PK__ErrorTra__3488012B1FED07E3");

                entity.ToTable("ErrorTracerCRM_To_Dialer");

                entity.Property(e => e.IErrorId).HasColumnName("iErrorID");

                entity.Property(e => e.DErrorDate)
                    .HasColumnName("dErrorDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.VErrorLine).HasColumnName("vErrorLine");

                entity.Property(e => e.VErrorMsg)
                    .HasColumnName("vErrorMsg")
                    .IsUnicode(false);

                entity.Property(e => e.VErrorNumber).HasColumnName("vErrorNumber");

                entity.Property(e => e.VErrorProc)
                    .HasColumnName("vErrorProc")
                    .IsUnicode(false);

                entity.Property(e => e.VErrorSeverity).HasColumnName("vErrorSeverity");

                entity.Property(e => e.VErrorState).HasColumnName("vErrorState");

                entity.Property(e => e.VHostName)
                    .HasColumnName("vHostName")
                    .IsUnicode(false);

                entity.Property(e => e.VUserName)
                    .HasColumnName("vUserName")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscalationTatmaster>(entity =>
            {
                entity.HasKey(e => e.Tatmid);

                entity.ToTable("EscalationTATMaster");

                entity.Property(e => e.Tatmid).HasColumnName("TATMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EscalationLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tatfrom).HasColumnName("TATFrom");

                entity.Property(e => e.Tatto).HasColumnName("TATTo");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EuFileUploadMaster>(entity =>
            {
                entity.HasKey(e => e.FileUmid)
                    .HasName("PK__EU_FileU__95C825F728CDE297");

                entity.ToTable("EU_FileUploadMaster");

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.ActualFileName).IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataProcessDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('D:\\\\EmployeeDataUpload\\\\EUDataFiles\\\\')");

                entity.Property(e => e.FilePathSystem).IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EuStatusMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EU_StatusMaster");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<EvaluationDetails>(entity =>
            {
                entity.HasKey(e => e.EvaluationId);

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AdvisorWindowsLoginId)
                    .HasColumnName("AdvisorWindowsLoginID")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfProduction).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(100);

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.ErrorDescription).HasMaxLength(500);

                entity.Property(e => e.EvaluationDate).HasMaxLength(50);

                entity.Property(e => e.EvaluationMethod).HasMaxLength(50);

                entity.Property(e => e.EvaluationType).HasMaxLength(50);

                entity.Property(e => e.EvaluationWeek).HasMaxLength(10);

                entity.Property(e => e.EvaluatorWindowsLoginId)
                    .HasColumnName("EvaluatorWindowsLoginID")
                    .HasMaxLength(255);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.QueueType).HasMaxLength(255);

                entity.Property(e => e.Rca)
                    .HasColumnName("RCA")
                    .HasMaxLength(500);

                entity.Property(e => e.ReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.RoleStartDate).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TenureOfAdvisor).HasMaxLength(50);

                entity.Property(e => e.TimeOfProduction).HasMaxLength(255);
            });

            modelBuilder.Entity<EvaluationMethod>(entity =>
            {
                entity.Property(e => e.EvaluationMethodId).HasColumnName("EvaluationMethodID");

                entity.Property(e => e.EvaluationMethod1)
                    .HasColumnName("EvaluationMethod")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<EvaluationType>(entity =>
            {
                entity.HasKey(e => e.EvaluationId);

                entity.Property(e => e.EvaluationId).HasColumnName("EvaluationID");

                entity.Property(e => e.EvaluationType1)
                    .HasColumnName("EvaluationType")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Ewscategory>(entity =>
            {
                entity.HasKey(e => e.Ewscid)
                    .HasName("PK__EWSCateg__4ABC84CEB261E2AD");

                entity.ToTable("EWSCategory");

                entity.Property(e => e.Ewscid).HasColumnName("EWSCID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ewsmid).HasColumnName("EWSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwscategoryLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__EWSCateg__D3261104B0778C2E");

                entity.ToTable("EWSCategoryLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ewscid).HasColumnName("EWSCID");

                entity.Property(e => e.Ewsmid).HasColumnName("EWSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwscategoryOptions>(entity =>
            {
                entity.HasKey(e => e.Ewscoid)
                    .HasName("PK__EWSCateg__133B32BCFBAE3474");

                entity.ToTable("EWSCategoryOptions");

                entity.Property(e => e.Ewscoid).HasColumnName("EWSCOID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ewscid).HasColumnName("EWSCID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OptionName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OptionValue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwscategoryOptionsLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__EWSCateg__D3261104E5F612B9");

                entity.ToTable("EWSCategoryOptionsLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Ewscid).HasColumnName("EWSCID");

                entity.Property(e => e.Ewscoid).HasColumnName("EWSCOID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OptionName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OptionValue)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwsdataDetail>(entity =>
            {
                entity.HasKey(e => e.Ewsdid)
                    .HasName("PK__EWSDataD__4C1E21241B163C2C");

                entity.ToTable("EWSDataDetail");

                entity.Property(e => e.Ewsdid).HasColumnName("EWSDID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmpStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ewsmid).HasColumnName("EWSMID");

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Para1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para10)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para11)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para12)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para13)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para14)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para15)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para16)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para17)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para18)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para19)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para20)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para9)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasComment("1-Data Saved , 2- Marked as EWS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwsdataDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__EWSDataD__D32611049D481785");

                entity.ToTable("EWSDataDetailLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmpStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ewsdid).HasColumnName("EWSDID");

                entity.Property(e => e.Ewsmid).HasColumnName("EWSMID");

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Para1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para10)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para11)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para12)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para13)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para14)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para15)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para16)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para17)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para18)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para19)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para20)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Para9)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwsdataType>(entity =>
            {
                entity.HasKey(e => e.Ewsdtid)
                    .HasName("PK__EWSDataT__D9E94560573E1322");

                entity.ToTable("EWSDataType");

                entity.Property(e => e.Ewsdtid).HasColumnName("EWSDTID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Ewsmaster>(entity =>
            {
                entity.HasKey(e => e.Ewsmid)
                    .HasName("PK__EWSMaste__4ABC84CEC86A8311");

                entity.ToTable("EWSMaster");

                entity.Property(e => e.Ewsmid).HasColumnName("EWSMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasComment("1 Disabled 0 Active 2 Pending");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrmailId)
                    .HasColumnName("HRMailID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubProcessId).HasColumnName("SubProcessID");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwsmasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__EWSMaste__D32611045DD066F2");

                entity.ToTable("EWSMasterLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Ewsmid).HasColumnName("EWSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrmailId)
                    .HasColumnName("HRMailID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubProcessId).HasColumnName("SubProcessID");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwsparameterMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EWSParameterMaster");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Edspmid)
                    .HasColumnName("EDSPMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EwsstatusMaster>(entity =>
            {
                entity.HasKey(e => e.Ewssmid)
                    .HasName("PK__EWSStatu__AC2E1EA1FCB5344A");

                entity.ToTable("EWSStatusMaster");

                entity.Property(e => e.Ewssmid).HasColumnName("EWSSMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EwsstatusMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__EWSStatu__D32611046A2A44EB");

                entity.ToTable("EWSStatusMasterLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Ewssmid).HasColumnName("EWSSMID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExcelDataTypeMaster>(entity =>
            {
                entity.HasKey(e => e.ExcelDataTypeMid);

                entity.Property(e => e.ExcelDataTypeMid).HasColumnName("ExcelDataTypeMID");

                entity.Property(e => e.ExcelDataTypeMaster1)
                    .HasColumnName("ExcelDataTypeMaster")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ExternalDataDispositionMaster>(entity =>
            {
                entity.HasKey(e => e.DispositionMid)
                    .HasName("PK__External__FC59A17E514FC093");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalDataType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<ExternalDncmaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExternalDNCMaster");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<FbcommentsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FBCommentsDetails");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentFrom).IsUnicode(false);

                entity.Property(e => e.CommentId)
                    .HasColumnName("CommentID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CommentUniqueId)
                    .HasColumnName("CommentUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VideoId)
                    .HasColumnName("VideoID")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbcommentsDetailsTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FBCommentsDetails_Temp");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentFrom).IsUnicode(false);

                entity.Property(e => e.CommentUniqueId)
                    .HasColumnName("CommentUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.OriginalCommentId).HasColumnName("OriginalCommentID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ReplyId)
                    .HasColumnName("ReplyID")
                    .IsUnicode(false);

                entity.Property(e => e.TempCommentId)
                    .HasColumnName("TempCommentID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VideoId)
                    .HasColumnName("VideoID")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Fbdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FBDetails");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Post).IsUnicode(false);

                entity.Property(e => e.PostDateTime).IsUnicode(false);

                entity.Property(e => e.PostFrom).IsUnicode(false);

                entity.Property(e => e.PostId)
                    .HasColumnName("PostID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VideoId)
                    .HasColumnName("VideoID")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbdetailsTemp>(entity =>
            {
                entity.HasKey(e => e.PostTempId);

                entity.ToTable("FBDetails_Temp");

                entity.Property(e => e.PostTempId).HasColumnName("PostTempID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.OriginalPostId).HasColumnName("OriginalPostID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Post).IsUnicode(false);

                entity.Property(e => e.PostDateTime).HasColumnType("datetime");

                entity.Property(e => e.PostFrom).IsUnicode(false);

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VideoId)
                    .HasColumnName("VideoID")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbuserMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FBUserMaster");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.ProfilePicUrlsystem)
                    .HasColumnName("ProfilePicURLSystem")
                    .IsUnicode(false);

                entity.Property(e => e.ProfilePicUrlweb)
                    .HasColumnName("ProfilePicURLWeb")
                    .IsUnicode(false);

                entity.Property(e => e.ScreenName).IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FeedBackDetails>(entity =>
            {
                entity.Property(e => e.FeedBackDetailsId)
                    .HasColumnName("FeedBackDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AdvisorFeedback).HasMaxLength(500);

                entity.Property(e => e.BoolCheckFeedbackPageOpen).HasDefaultValueSql("((0))");

                entity.Property(e => e.BoolCheckPageOpen).HasDefaultValueSql("((0))");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("EvaluationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FeedBackDisAgree).HasDefaultValueSql("((0))");

                entity.Property(e => e.FeedBackToAdvisor).HasMaxLength(500);

                entity.Property(e => e.FeedbackAcceptedDate).HasColumnType("datetime");

                entity.Property(e => e.FeedbackAcceptedStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.FeedbackAcceptedUser).HasMaxLength(255);

                entity.Property(e => e.FeedbackDatetime).HasColumnType("datetime");

                entity.Property(e => e.FeedbackGivenBy).HasMaxLength(255);

                entity.Property(e => e.FeedbackGivenDate).HasColumnType("datetime");

                entity.Property(e => e.FeedbackQatlcomment)
                    .HasColumnName("FeedbackQATLComment")
                    .HasMaxLength(500);

                entity.Property(e => e.FeedbackQatldate)
                    .HasColumnName("FeedbackQATLDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeedbackQatluser)
                    .HasColumnName("FeedbackQATLUser")
                    .HasMaxLength(255);

                entity.Property(e => e.FeedbackSessionAcceptedBy).HasMaxLength(255);

                entity.Property(e => e.FeedbackSessionAcceptedDate).HasColumnType("datetime");

                entity.Property(e => e.FeedbackSessionAcceptedStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.FeedbackSessionRequestNumber).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.Result).HasMaxLength(50);

                entity.Property(e => e.SupervisorAvailable).HasDefaultValueSql("((0))");

                entity.Property(e => e.SupervisorName).HasMaxLength(100);
            });

            modelBuilder.Entity<FileStatusMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FileSynkingDetail>(entity =>
            {
                entity.HasKey(e => e.FileSdid);

                entity.Property(e => e.FileSdid).HasColumnName("FileSDID");

                entity.Property(e => e.ContentType)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FileLocation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");
            });

            modelBuilder.Entity<FileUploadMaster>(entity =>
            {
                entity.HasKey(e => e.FileUmid);

                entity.Property(e => e.FileUmid).HasColumnName("FileUMID");

                entity.Property(e => e.ActualFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataProcessDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilePathSystem)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Umid).HasColumnName("UMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<FuFileUploadMasterExternalDnc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FU_FileUploadMasterExternalDNC");

                entity.Property(e => e.ActualFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataProcessDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FilePathSystem)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileUmid)
                    .HasColumnName("FileUMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<GlActivityWorklistTrails>(entity =>
            {
                entity.ToTable("GL_ActivityWorklist_Trails");

                entity.Property(e => e.GlactivityWorklistTrailsId)
                    .HasColumnName("GLActivityWorklistTrailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CompletedDateTime).HasMaxLength(50);

                entity.Property(e => e.Disposition).HasMaxLength(100);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.GltaskMasterId)
                    .HasColumnName("GLTaskMasterID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NextRunDate).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.Responsibility).HasMaxLength(200);

                entity.Property(e => e.ScheduleTaskId)
                    .HasColumnName("ScheduleTaskID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StartTime).HasMaxLength(50);
            });

            modelBuilder.Entity<GlActivityWorklistTrailsBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GL_ActivityWorklist_Trails_Backup");

                entity.Property(e => e.BackupDate)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BackupUser)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('dbo')");

                entity.Property(e => e.CompletedDateTime).HasMaxLength(50);

                entity.Property(e => e.Disposition).HasMaxLength(100);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.GlactivityWorklistTrailsId)
                    .HasColumnName("GLActivityWorklistTrailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GltaskMasterId)
                    .HasColumnName("GLTaskMasterID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NextRunDate).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.Responsibility).HasMaxLength(200);

                entity.Property(e => e.StartTime).HasMaxLength(50);
            });

            modelBuilder.Entity<GlDisposition>(entity =>
            {
                entity.HasKey(e => e.DispositionId);

                entity.ToTable("GL_Disposition");

                entity.Property(e => e.DispositionId)
                    .HasColumnName("DispositionID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Disposition).HasMaxLength(200);

                entity.Property(e => e.Responsibility).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<GlResponsibility>(entity =>
            {
                entity.HasKey(e => e.ResponsibilityId);

                entity.ToTable("GL_Responsibility");

                entity.Property(e => e.ResponsibilityId)
                    .HasColumnName("ResponsibilityID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Responsibility).HasMaxLength(200);
            });

            modelBuilder.Entity<GlactivityMaster>(entity =>
            {
                entity.ToTable("GLActivityMaster");

                entity.Property(e => e.GlactivityMasterId)
                    .HasColumnName("GLActivityMasterID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Activity).HasMaxLength(500);

                entity.Property(e => e.ActivityGroup).HasMaxLength(100);

                entity.Property(e => e.ActivitySubGroup).HasMaxLength(100);

                entity.Property(e => e.EntryDate)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser).HasMaxLength(50);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModuleName).HasMaxLength(50);
            });

            modelBuilder.Entity<GlobalUserCallSystemMapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AlttelephonyId)
                    .HasColumnName("ALTTelephonyID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserCallSystemId)
                    .HasColumnName("GlobalUserCallSystemID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.NetworkId)
                    .HasColumnName("NetworkID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId01)
                    .HasColumnName("SystemUserID01")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId02)
                    .HasColumnName("SystemUserID02")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId03)
                    .HasColumnName("SystemUserID03")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId04)
                    .HasColumnName("SystemUserID04")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId05)
                    .HasColumnName("SystemUserID05")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId06)
                    .HasColumnName("SystemUserID06")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId07)
                    .HasColumnName("SystemUserID07")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId08)
                    .HasColumnName("SystemUserID08")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId09)
                    .HasColumnName("SystemUserID09")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId10)
                    .HasColumnName("SystemUserID10")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TelephonyLogon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalViewId)
                    .HasColumnName("TotalViewID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalViewLogon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Vbopslogon)
                    .HasColumnName("VBOPSLogon")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GlobalUserCallSystemMappingDefinitions>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.SystemUserId01hostSystem)
                    .HasColumnName("SystemUserID01HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId02hostSystem)
                    .HasColumnName("SystemUserID02HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId03hostSystem)
                    .HasColumnName("SystemUserID03HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId04hostSystem)
                    .HasColumnName("SystemUserID04HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId05hostSystem)
                    .HasColumnName("SystemUserID05HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId06hostSystem)
                    .HasColumnName("SystemUserID06HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId07hostSystem)
                    .HasColumnName("SystemUserID07HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId08hostSystem)
                    .HasColumnName("SystemUserID08HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId09hostSystem)
                    .HasColumnName("SystemUserID09HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId10hostSystem)
                    .HasColumnName("SystemUserID10HostSystem")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GlobalUserClients>(entity =>
            {
                entity.HasKey(e => e.GlobalUserClientId);

                entity.Property(e => e.GlobalUserClientId).HasColumnName("GlobalUserClientID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.GlobalUser)
                    .WithMany(p => p.GlobalUserClients)
                    .HasForeignKey(d => d.GlobalUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GlobalUserClients_GlobalUserID");
            });

            modelBuilder.Entity<GlobalUserProcesss>(entity =>
            {
                entity.HasKey(e => e.GlobalUserProcessId);

                entity.Property(e => e.GlobalUserProcessId).HasColumnName("GlobalUserProcessID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.DefaultProcess).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.GlobalUser)
                    .WithMany(p => p.GlobalUserProcesss)
                    .HasForeignKey(d => d.GlobalUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GlobalUserProcesss_GlobalUserID");
            });

            modelBuilder.Entity<GlobalUserQueueMapping>(entity =>
            {
                entity.HasKey(e => e.GlobalUserQueueMid);

                entity.Property(e => e.GlobalUserQueueMid).HasColumnName("GlobalUserQueueMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.QueueMid).HasColumnName("QueueMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<GlobalUserRoleTypes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.GlobalUserRoleTypeId)
                    .HasColumnName("GlobalUserRoleTypeID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ParentGlobalUserRoleTypeId).HasColumnName("ParentGlobalUserRoleTypeID");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GlobalUserRoles>(entity =>
            {
                entity.HasKey(e => e.GlobalUserRoleId);

                entity.Property(e => e.GlobalUserRoleId).HasColumnName("GlobalUserRoleID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([datetime],'2099/12/31',(0)))");

                entity.Property(e => e.FreezeDate).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.GlobalUserRoleTypeId).HasColumnName("GlobalUserRoleTypeID");

                entity.Property(e => e.ParentGlobalUserId).HasColumnName("ParentGlobalUserID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Team)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.GlobalUser)
                    .WithMany(p => p.GlobalUserRolesGlobalUser)
                    .HasForeignKey(d => d.GlobalUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GlobalUserRoles_GlobalUserID");

                entity.HasOne(d => d.ParentGlobalUser)
                    .WithMany(p => p.GlobalUserRolesParentGlobalUser)
                    .HasForeignKey(d => d.ParentGlobalUserId)
                    .HasConstraintName("FK_GlobalUserRoles_ParentGlobalUserID");
            });

            modelBuilder.Entity<GlobalUserScript>(entity =>
            {
                entity.Property(e => e.GlobalUserScriptId).HasColumnName("GlobalUserScriptID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultScript).HasDefaultValueSql("((0))");

                entity.Property(e => e.DiallerMode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 For Manual, 1 For Predictive, 2 For Preview");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.IsDiallerApplicable).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualServiceId).HasColumnName("ManualServiceID");

                entity.Property(e => e.PreviewServiceId).HasColumnName("PreviewServiceID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<GlobalUserScriptLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.GlobalUserScriptId).HasColumnName("GlobalUserScriptID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ManualServiceId).HasColumnName("ManualServiceID");

                entity.Property(e => e.PreviewServiceId).HasColumnName("PreviewServiceID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<GlobalUserSkillMapping>(entity =>
            {
                entity.HasKey(e => e.GlobalUserSkillMid);

                entity.Property(e => e.GlobalUserSkillMid).HasColumnName("GlobalUserSkillMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.SkillMid).HasColumnName("SkillMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<GlobalUserSubProcess>(entity =>
            {
                entity.Property(e => e.GlobalUserSubProcessId).HasColumnName("GlobalUserSubProcessID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.DefaultSubProcess).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.GlobalUser)
                    .WithMany(p => p.GlobalUserSubProcess)
                    .HasForeignKey(d => d.GlobalUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GlobalUserSubProcess_GlobalUserID");
            });

            modelBuilder.Entity<GlobalUsers>(entity =>
            {
                entity.HasKey(e => e.GlobalUserId);

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dob).HasColumnName("DOB");

                entity.Property(e => e.Doj).HasColumnName("DOJ");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<GltaskMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLTaskMaster");

                entity.Property(e => e.Activity)
                    .IsRequired()
                    .HasMaxLength(260);

                entity.Property(e => e.ActivityGroup).HasMaxLength(100);

                entity.Property(e => e.ActivitySubGroup).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.DiffInMinutes).HasDefaultValueSql("((8))");

                entity.Property(e => e.EntryDate).HasMaxLength(50);

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.GltaskMasterId)
                    .HasColumnName("GLTaskMasterID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsMecactivity)
                    .HasColumnName("IsMECActivity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Process)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RecurrenceType).HasMaxLength(30);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TimeZoneId).HasColumnName("TimeZoneID");

                entity.Property(e => e.WindowsLoginId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HeaderColumnMappingMaster>(entity =>
            {
                entity.HasKey(e => e.HeaderCmmid);

                entity.Property(e => e.HeaderCmmid).HasColumnName("HeaderCMMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Software')");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DataTypeFormat)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DbcolumnName)
                    .HasColumnName("DBColumnName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExcelColumnName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExcelName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<HeroFincorpClearedCases>(entity =>
            {
                entity.HasKey(e => e.CaseDid)
                    .HasName("PK__HeroFinc__44601660F9D6664A");

                entity.ToTable("HeroFincorp_ClearedCases");

                entity.Property(e => e.CaseDid).HasColumnName("CaseDID");

                entity.Property(e => e.Bucket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CaseClearDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HfclEdsSoftData>(entity =>
            {
                entity.ToTable("HFCL_EDS_SoftData");

                entity.Property(e => e.ActivityScheduledDate).HasColumnType("datetime");

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CollectableAmount).HasMaxLength(50);

                entity.Property(e => e.Consignee).HasMaxLength(500);

                entity.Property(e => e.ConsigneeAddress).HasMaxLength(500);

                entity.Property(e => e.Dc)
                    .HasColumnName("DC")
                    .HasMaxLength(50);

                entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.PickupDate).HasColumnType("datetime");

                entity.Property(e => e.Pincode).HasMaxLength(50);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.RegisteredDate).HasColumnType("datetime");

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(100);

                entity.Property(e => e.TelecommentLatestUploadedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Hrdepartments>(entity =>
            {
                entity.HasKey(e => e.HrdepartmentMid);

                entity.ToTable("HRDepartments");

                entity.Property(e => e.HrdepartmentMid).HasColumnName("HRDepartmentMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrdepartmentName)
                    .HasColumnName("HRDepartmentName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourceDepartmentId).HasColumnName("HRSourceDepartmentID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HrdepartmentsLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__HRDepart__5E5499A86497E884");

                entity.ToTable("HRDepartmentsLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrdepartmentMid).HasColumnName("HRDepartmentMID");

                entity.Property(e => e.HrdepartmentName)
                    .HasColumnName("HRDepartmentName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourceDepartmentId).HasColumnName("HRSourceDepartmentID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Hrdivisions>(entity =>
            {
                entity.HasKey(e => e.HrdivisionMid);

                entity.ToTable("HRDivisions");

                entity.Property(e => e.HrdivisionMid).HasColumnName("HRDivisionMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrdivisionName)
                    .HasColumnName("HRDivisionName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourceDivisionId).HasColumnName("HRSourceDivisionID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HrdivisionsLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__HRDivisi__5E5499A868687968");

                entity.ToTable("HRDivisionsLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrdivisionMid).HasColumnName("HRDivisionMID");

                entity.Property(e => e.HrdivisionName)
                    .HasColumnName("HRDivisionName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourceDivisionId).HasColumnName("HRSourceDivisionID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Hrposts>(entity =>
            {
                entity.HasKey(e => e.HrpostMid);

                entity.ToTable("HRPosts");

                entity.Property(e => e.HrpostMid).HasColumnName("HRPostMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserRoleTypeId).HasColumnName("GlobalUserRoleTypeID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrpostName)
                    .HasColumnName("HRPostName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrpostRoleDescription)
                    .HasColumnName("HRPostRoleDescription")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourcePostId).HasColumnName("HRSourcePostID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HrpostsLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__HRPostsL__5E5499A86C390A4C");

                entity.ToTable("HRPostsLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserRoleTypeId).HasColumnName("GlobalUserRoleTypeID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrpostName)
                    .HasColumnName("HRPostName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrpostRoleDescription)
                    .HasColumnName("HRPostRoleDescription")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrpostsMid).HasColumnName("HRPostsMID");

                entity.Property(e => e.HrsourcePostId).HasColumnName("HRSourcePostID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Hrsites>(entity =>
            {
                entity.HasKey(e => e.HrsiteMid);

                entity.ToTable("HRSites");

                entity.Property(e => e.HrsiteMid).HasColumnName("HRSiteMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrsiteName)
                    .HasColumnName("HRSiteName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourceSiteId).HasColumnName("HRSourceSiteID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HrsitesLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__HRSitesL__5E5499A870099B30");

                entity.ToTable("HRSitesLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrsiteMid).HasColumnName("HRSiteMID");

                entity.Property(e => e.HrsiteName)
                    .HasColumnName("HRSiteName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsourceSiteId).HasColumnName("HRSourceSiteID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HrsystemSources>(entity =>
            {
                entity.HasKey(e => e.HrsystemSourcesMid);

                entity.ToTable("HRSystemSources");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrsystemSourceShortCode)
                    .HasColumnName("HRSystemSourceShortCode")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.HrsystemSourcesDescription)
                    .HasColumnName("HRSystemSourcesDescription")
                    .IsUnicode(false);

                entity.Property(e => e.HrsystemSourcesName)
                    .HasColumnName("HRSystemSourcesName")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HrsystemSourcesLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HRSystemSourcesLog");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrsystemSourceShortCode)
                    .HasColumnName("HRSystemSourceShortCode")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.HrsystemSourcesDescription)
                    .HasColumnName("HRSystemSourcesDescription")
                    .IsUnicode(false);

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.HrsystemSourcesName)
                    .HasColumnName("HRSystemSourcesName")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<HruserRolesGlobalUsers>(entity =>
            {
                entity.HasKey(e => e.HruserRolesGlobalUsersRoleId);

                entity.ToTable("HRUserRolesGlobalUsers");

                entity.Property(e => e.HruserRolesGlobalUsersRoleId).HasColumnName("HRUserRolesGlobalUsersRoleID");

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HrdepartmentMid).HasColumnName("HRDepartmentMID");

                entity.Property(e => e.HrdivisionMid).HasColumnName("HRDivisionMID");

                entity.Property(e => e.HrpostMid).HasColumnName("HRPostMID");

                entity.Property(e => e.HrsiteMid).HasColumnName("HRSiteMID");

                entity.Property(e => e.HrsourceRoleId).HasColumnName("HRSourceRoleID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.RoleLeaveDate).HasColumnType("datetime");

                entity.Property(e => e.RoleStartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TeamId).HasColumnName("TeamID");

                entity.Property(e => e.TelephonyId)
                    .HasColumnName("TelephonyID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<HruserRolesGlobalUsers15032018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HRUserRolesGlobalUsers_15032018");

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HrdepartmentMid).HasColumnName("HRDepartmentMID");

                entity.Property(e => e.HrdivisionMid).HasColumnName("HRDivisionMID");

                entity.Property(e => e.HrpostMid).HasColumnName("HRPostMID");

                entity.Property(e => e.HrsiteMid).HasColumnName("HRSiteMID");

                entity.Property(e => e.HrsourceRoleId).HasColumnName("HRSourceRoleID");

                entity.Property(e => e.HrsystemSourcesMid).HasColumnName("HRSystemSourcesMID");

                entity.Property(e => e.HruserRolesGlobalUsersRoleId)
                    .HasColumnName("HRUserRolesGlobalUsersRoleID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RoleLeaveDate).HasColumnType("datetime");

                entity.Property(e => e.RoleStartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TeamId).HasColumnName("TeamID");

                entity.Property(e => e.TelephonyId)
                    .HasColumnName("TelephonyID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<KbarticleMaster>(entity =>
            {
                entity.HasKey(e => e.Kbamid)
                    .HasName("PK_KBActivityMaster");

                entity.ToTable("KBArticleMaster");

                entity.Property(e => e.Kbamid).HasColumnName("KBAMID");

                entity.Property(e => e.ArticleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KbarticleMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_KBActivityMasterLog");

                entity.ToTable("KBArticleMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ArticleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbamid).HasColumnName("KBAMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KbcategoryMaster>(entity =>
            {
                entity.HasKey(e => e.Kbcmid);

                entity.ToTable("KBCategoryMaster");

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KbcategoryMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("KBCategoryMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KbsubCategoryMaster>(entity =>
            {
                entity.HasKey(e => e.Kbsmid);

                entity.ToTable("KBSubCategoryMaster");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.SubCategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KbsubCategoryMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("KBSubCategoryMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseAccessLevelMapping>(entity =>
            {
                entity.HasKey(e => e.Kbalmid);

                entity.Property(e => e.Kbalmid).HasColumnName("KBALMID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");
            });

            modelBuilder.Entity<KnowledgeBaseAccessLevelMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbalmid).HasColumnName("KBALMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseAnalysis>(entity =>
            {
                entity.HasKey(e => e.AnalysisMid)
                    .HasName("PK__KnowledgeBase__0D6808F55D59A375");

                entity.Property(e => e.AnalysisMid).HasColumnName("AnalysisMID");

                entity.Property(e => e.AnalysisType).HasDefaultValueSql("((1))");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Createddatetime)
                    .HasColumnName("createddatetime")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.SeachTerm)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SearchType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('D')");
            });

            modelBuilder.Entity<KnowledgeBaseApprovalMessageDetail>(entity =>
            {
                entity.HasKey(e => e.Kamid);

                entity.ToTable("KnowledgeBase_ApprovalMessageDetail");

                entity.Property(e => e.Kamid).HasColumnName("KAMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.MessageCategoryId).HasColumnName("MessageCategoryID");

                entity.Property(e => e.MessageText)
                    .HasColumnName("Message_Text")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTitle)
                    .HasColumnName("Message_Title")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTypeName)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseAttachmentDetail>(entity =>
            {
                entity.HasKey(e => e.Kbadid);

                entity.Property(e => e.Kbadid).HasColumnName("KBADID");

                entity.Property(e => e.ActualFileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Filepath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");
            });

            modelBuilder.Entity<KnowledgeBaseAttachmentDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ActualFileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Filepath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbadid).HasColumnName("KBADID");

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseDepartmentLevelMapping>(entity =>
            {
                entity.HasKey(e => e.Kbdmid);

                entity.Property(e => e.Kbdmid).HasColumnName("KBDMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");
            });

            modelBuilder.Entity<KnowledgeBaseDepartmentLevelMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK_KnowledgeBaseDepartmentLevelMappingLog_1");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.Kbdmid).HasColumnName("KBDMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseDetail>(entity =>
            {
                entity.HasKey(e => e.Kbdid);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.ArticleNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.Title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vid)
                    .HasColumnName("VID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ArticleNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.Title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vid)
                    .HasColumnName("VID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseDetailMapping>(entity =>
            {
                entity.HasKey(e => e.Kbdmid)
                    .HasName("PK__Knowledg__01241E9D780C9888");

                entity.Property(e => e.Kbdmid).HasColumnName("KBDMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.ParentKbdid).HasColumnName("ParentKBDID");

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Vid)
                    .HasColumnName("VID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseDetailMapping31072018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KnowledgeBaseDetailMapping_31072018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbdmid)
                    .HasColumnName("KBDMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.ParentKbdid).HasColumnName("ParentKBDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseDetailMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbdmid).HasColumnName("KBDMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentKbdid).HasColumnName("ParentKBDID");

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Vid)
                    .HasColumnName("VID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseFaqaccessDetails>(entity =>
            {
                entity.HasKey(e => e.AccessDid);

                entity.ToTable("KnowledgeBaseFAQAccessDetails");

                entity.Property(e => e.AccessDid).HasColumnName("AccessDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.SearchDid).HasColumnName("SearchDID");

                entity.Property(e => e.StartDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<KnowledgeBaseFaqmapping>(entity =>
            {
                entity.HasKey(e => e.Kbfmmid)
                    .HasName("PK__KnowledgeBaseFAQMapping");

                entity.ToTable("KnowledgeBaseFAQMapping");

                entity.Property(e => e.Kbfmmid).HasColumnName("KBFMMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseFaqmappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK__KnowledgeBaseFAQMappingLog");

                entity.ToTable("KnowledgeBaseFAQMappingLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");

                entity.Property(e => e.Kbfmmid).HasColumnName("KBFMMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseFaqmaster>(entity =>
            {
                entity.HasKey(e => e.Kbfmid);

                entity.ToTable("KnowledgeBaseFAQMaster");

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Faqnumber)
                    .HasColumnName("FAQNumber")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kbfaqanswer).HasColumnName("KBFAQAnswer");

                entity.Property(e => e.Kbfaqquestion).HasColumnName("KBFAQQuestion");

                entity.Property(e => e.Kbfaqtype)
                    .HasColumnName("KBFAQType")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kbmid)
                    .HasColumnName("KBMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseFaqmasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("KnowledgeBaseFAQMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Faqnumber)
                    .HasColumnName("FAQNumber")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kbfaqanswer)
                    .HasColumnName("KBFAQAnswer")
                    .IsUnicode(false);

                entity.Property(e => e.Kbfaqquestion)
                    .HasColumnName("KBFAQQuestion")
                    .IsUnicode(false);

                entity.Property(e => e.Kbfaqtype)
                    .HasColumnName("KBFAQType")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kbfmid).HasColumnName("KBFMID");

                entity.Property(e => e.Kbmid)
                    .HasColumnName("KBMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseFaqsearchDetails>(entity =>
            {
                entity.HasKey(e => e.SearchDid);

                entity.ToTable("KnowledgeBaseFAQSearchDetails");

                entity.Property(e => e.SearchDid).HasColumnName("SearchDID");

                entity.Property(e => e.AccessLmid)
                    .HasColumnName("AccessLMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid)
                    .HasColumnName("ClientMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataRows).HasDefaultValueSql("((0))");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.Kbmid)
                    .HasColumnName("KBMID")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.SearchText)
                    .HasMaxLength(5000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseFaqtype>(entity =>
            {
                entity.HasKey(e => e.Kbftmid);

                entity.ToTable("KnowledgeBaseFAQType");

                entity.Property(e => e.Kbftmid).HasColumnName("KBFTMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbfaqtype)
                    .HasColumnName("KBFAQType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<KnowledgeBaseFeedbackDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Feedback)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbfdid)
                    .HasColumnName("KBFDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");
            });

            modelBuilder.Entity<KnowledgeBaseFeedbackDetailLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Feedback)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbfdid).HasColumnName("KBFDID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogMid)
                    .HasColumnName("LogMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");
            });

            modelBuilder.Entity<KnowledgeBaseKeywordsMapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Keywords)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.KnowledgeBaseDid).HasColumnName("KnowledgeBaseDID");

                entity.Property(e => e.MappingDid)
                    .HasColumnName("MappingDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<KnowledgeBaseKeywordsMappingLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Keywords)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.KnowledgeBaseDid).HasColumnName("KnowledgeBaseDID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogMid)
                    .HasColumnName("LogMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<KnowledgeBaseLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseMaster>(entity =>
            {
                entity.HasKey(e => e.Kbmid);

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbamid).HasColumnName("KBAMID");

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.KnowledgeBaseType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Vid)
                    .HasColumnName("VID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK_KnowledgeBaseMasterLog_1");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbamid).HasColumnName("KBAMID");

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Vid)
                    .HasColumnName("VID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseNodeAnalysis>(entity =>
            {
                entity.HasKey(e => e.AnalysisNodeMid)
                    .HasName("PK__KnowledgeBaseNodeAnalysis");

                entity.Property(e => e.AnalysisNodeMid).HasColumnName("AnalysisNodeMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Createddatetime)
                    .HasColumnName("createddatetime")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.SeachTerm)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseProcessLevelMapping>(entity =>
            {
                entity.HasKey(e => e.Kbpmid);

                entity.Property(e => e.Kbpmid).HasColumnName("KBPMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            });

            modelBuilder.Entity<KnowledgeBaseProcessLevelMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK_KnowledgeBaseProcessLevelMappingLog_1");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbpmid).HasColumnName("KBPMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            });

            modelBuilder.Entity<KnowledgeBaseScriptLevelMapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbsmid)
                    .HasColumnName("KBSMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<KnowledgeBaseScriptLevelMappingLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(':::1')");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogMid)
                    .HasColumnName("LogMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<KnowledgeBaseStatusHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KnowledgeBaseStatus_History");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbname)
                    .HasColumnName("KBNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbshmid)
                    .HasColumnName("KBSHMID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<KnowledgeBaseStatusHistoryLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KnowledgeBaseStatus_HistoryLog");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbname)
                    .HasColumnName("KBNAME")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Kbshmid)
                    .HasColumnName("KBSHMID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<KnowledgeBaseVersionDetail>(entity =>
            {
                entity.HasKey(e => e.Kbvdid);

                entity.Property(e => e.Kbvdid).HasColumnName("KBVDID");

                entity.Property(e => e.ArticleNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbvmid).HasColumnName("KBVMID");

                entity.Property(e => e.Title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VersionLevel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseVersionDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbvdid).HasColumnName("KBVDID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VersionLevel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseVersionDetailMapping>(entity =>
            {
                entity.HasKey(e => e.Kbvdmid)
                    .HasName("PK__KnowledgeBaseVersionDetailMapping");

                entity.Property(e => e.Kbvdmid).HasColumnName("KBVDMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbdmid).HasColumnName("KBDMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbvdid).HasColumnName("KBVDID");

                entity.Property(e => e.Kbvmid).HasColumnName("KBVMID");

                entity.Property(e => e.ParentKbdid).HasColumnName("ParentKBDID");

                entity.Property(e => e.ParentKbvdid)
                    .HasColumnName("ParentKBVDID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VersionLevel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseVersionDetailMappingLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbdid).HasColumnName("KBDID");

                entity.Property(e => e.Kbdmid).HasColumnName("KBDMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbvdmid).HasColumnName("KBVDMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentKbdid).HasColumnName("ParentKBDID");

                entity.Property(e => e.ParentKbvdid)
                    .HasColumnName("ParentKBVDID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VersionLevel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseVersionMaster>(entity =>
            {
                entity.HasKey(e => e.Kbvmid);

                entity.Property(e => e.Kbvmid).HasColumnName("KBVMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.Kbamid).HasColumnName("KBAMID");

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.KnowledgeBaseType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.VersionLevel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KnowledgeBaseVersionMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid)
                    .HasName("PK_KnowledgeBaseVersionMasterLog_1");

                entity.Property(e => e.LogMid)
                    .HasColumnName("LogMID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kbamid).HasColumnName("KBAMID");

                entity.Property(e => e.Kbcmid).HasColumnName("KBCMID");

                entity.Property(e => e.Kbmid).HasColumnName("KBMID");

                entity.Property(e => e.Kbsmid).HasColumnName("KBSMID");

                entity.Property(e => e.Kbvmid).HasColumnName("KBVMID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VersionLevel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LanguageMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host).HasMaxLength(500);

                entity.Property(e => e.LangKey)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Lmid)
                    .HasColumnName("LMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginLogDetail>(entity =>
            {
                entity.HasKey(e => e.LoginLdid);

                entity.Property(e => e.LoginLdid).HasColumnName("LoginLDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.LoginServerId)
                    .HasColumnName("LoginServerID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LoginState).HasDefaultValueSql("((0))");

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.LogoutTime).HasColumnType("datetime");

                entity.Property(e => e.TrackLoginLdid).HasColumnName("TrackLoginLDID");

                entity.Property(e => e.TrackLoginMid).HasColumnName("TrackLoginMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginMaster>(entity =>
            {
                entity.HasKey(e => e.LoginMid);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.Adauthentication).HasColumnName("ADAuthentication");

                entity.Property(e => e.AdloginName)
                    .HasColumnName("ADLoginName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Admid).HasColumnName("ADMID");

                entity.Property(e => e.BatchMid).HasColumnName("BatchMID");

                entity.Property(e => e.BlockedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultClientMid).HasColumnName("DefaultClientMID");

                entity.Property(e => e.DefaultProcessMid).HasColumnName("DefaultProcessMID");

                entity.Property(e => e.DefaultScriptMid).HasColumnName("DefaultScriptMID");

                entity.Property(e => e.DefaultSubProcessMid).HasColumnName("DefaultSubProcessMID");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(101)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(([FirstName]+' ')+[LastName])");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalEmployeeId)
                    .HasColumnName("GlobalEmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginPassword)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordUpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SaltKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginMaster17072018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LoginMaster_17072018");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.Adauthentication).HasColumnName("ADAuthentication");

                entity.Property(e => e.AdloginName)
                    .HasColumnName("ADLoginName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Admid).HasColumnName("ADMID");

                entity.Property(e => e.BatchMid).HasColumnName("BatchMID");

                entity.Property(e => e.BlockedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultClientMid).HasColumnName("DefaultClientMID");

                entity.Property(e => e.DefaultProcessMid).HasColumnName("DefaultProcessMID");

                entity.Property(e => e.DefaultScriptMid).HasColumnName("DefaultScriptMID");

                entity.Property(e => e.DefaultSubProcessMid).HasColumnName("DefaultSubProcessMID");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalEmployeeId)
                    .HasColumnName("GlobalEmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid)
                    .HasColumnName("LoginMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginPassword)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordUpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SaltKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginMasterBackUp02012019>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("loginMaster_BackUp_02012019");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.Adauthentication).HasColumnName("ADAuthentication");

                entity.Property(e => e.AdloginName)
                    .HasColumnName("ADLoginName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Admid).HasColumnName("ADMID");

                entity.Property(e => e.BatchMid).HasColumnName("BatchMID");

                entity.Property(e => e.BlockedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultClientMid).HasColumnName("DefaultClientMID");

                entity.Property(e => e.DefaultProcessMid).HasColumnName("DefaultProcessMID");

                entity.Property(e => e.DefaultScriptMid).HasColumnName("DefaultScriptMID");

                entity.Property(e => e.DefaultSubProcessMid).HasColumnName("DefaultSubProcessMID");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalEmployeeId)
                    .HasColumnName("GlobalEmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid)
                    .HasColumnName("LoginMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginPassword)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordUpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SaltKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.Adauthentication).HasColumnName("ADAuthentication");

                entity.Property(e => e.AdloginName)
                    .HasColumnName("ADLoginName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Admid).HasColumnName("ADMID");

                entity.Property(e => e.BatchMid).HasColumnName("BatchMID");

                entity.Property(e => e.BlockedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultClientMid).HasColumnName("DefaultClientMID");

                entity.Property(e => e.DefaultProcessMid).HasColumnName("DefaultProcessMID");

                entity.Property(e => e.DefaultScriptMid).HasColumnName("DefaultScriptMID");

                entity.Property(e => e.DefaultSubProcessMid).HasColumnName("DefaultSubProcessMID");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalEmployeeId)
                    .HasColumnName("GlobalEmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginPasswod)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordUpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SaltKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginMasterRamu02052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("loginMasterRamu02052018");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.Adauthentication).HasColumnName("ADAuthentication");

                entity.Property(e => e.AdloginName)
                    .HasColumnName("ADLoginName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Admid).HasColumnName("ADMID");

                entity.Property(e => e.BatchMid).HasColumnName("BatchMID");

                entity.Property(e => e.BlockedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultClientMid).HasColumnName("DefaultClientMID");

                entity.Property(e => e.DefaultProcessMid).HasColumnName("DefaultProcessMID");

                entity.Property(e => e.DefaultScriptMid).HasColumnName("DefaultScriptMID");

                entity.Property(e => e.DefaultSubProcessMid).HasColumnName("DefaultSubProcessMID");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalEmployeeId)
                    .HasColumnName("GlobalEmployeeID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid)
                    .HasColumnName("LoginMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginPassword)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordUpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MailGroupMaster>(entity =>
            {
                entity.HasKey(e => e.MailGroupMid);

                entity.Property(e => e.MailGroupMid).HasColumnName("MailGroupMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ipyes)
                    .HasColumnName("IPYes")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MailFromId)
                    .HasColumnName("MailFromID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailIp)
                    .HasColumnName("MailIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailPort)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MailUserId)
                    .HasColumnName("MailUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MailGroupMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ipyes)
                    .HasColumnName("IPYes")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailFromId)
                    .HasColumnName("MailFromID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailGroupMid).HasColumnName("MailGroupMID");

                entity.Property(e => e.MailGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailIp)
                    .HasColumnName("MailIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailPort)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MailUserId)
                    .HasColumnName("MailUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ManualSmssend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ManualSMSSend");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DataName).HasMaxLength(200);

                entity.Property(e => e.Smsid)
                    .HasColumnName("SMSID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Smstype)
                    .HasColumnName("SMSType")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<MarketMaster>(entity =>
            {
                entity.HasKey(e => e.MarketId);

                entity.Property(e => e.MarketId)
                    .HasColumnName("MarketID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EntityId)
                    .HasColumnName("EntityID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MarketName).HasMaxLength(200);

                entity.HasOne(d => d.Entity)
                    .WithMany(p => p.MarketMaster)
                    .HasForeignKey(d => d.EntityId)
                    .HasConstraintName("FK_MarketMaster_EntityMaster");
            });

            modelBuilder.Entity<MenuMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MenuMasterDetail>(entity =>
            {
                entity.HasKey(e => e.MenuMdid);

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientId)
                    .HasColumnName("ClientID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomiseRdid).HasColumnName("CustomiseRDID");

                entity.Property(e => e.Exception).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoBack)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderPart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iscustomise).HasColumnName("ISCustomise");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MenuParentId).HasColumnName("MenuParentID");

                entity.Property(e => e.Menutype).HasDefaultValueSql("((0))");

                entity.Property(e => e.PageName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RdlreportType)
                    .HasColumnName("RDLReportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailId).HasColumnName("ReportDetailID");

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MenuMasterDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("MenuMasterDetail_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientId)
                    .HasColumnName("ClientID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomiseRdid).HasColumnName("CustomiseRDID");

                entity.Property(e => e.Exception).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoBack)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderPart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iscustomise).HasColumnName("ISCustomise");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MenuParentId).HasColumnName("MenuParentID");

                entity.Property(e => e.PageName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RdlreportType)
                    .HasColumnName("RDLReportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailId).HasColumnName("ReportDetailID");

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MenuMasterExceptionDetail>(entity =>
            {
                entity.HasKey(e => e.Mmedid);

                entity.Property(e => e.Mmedid).HasColumnName("MMEDID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MenuMasterExceptionDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MenuMdid).HasColumnName("MenuMDID");

                entity.Property(e => e.Mmedid).HasColumnName("MMEDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageBroadcast>(entity =>
            {
                entity.HasKey(e => e.MessageMid);

                entity.Property(e => e.MessageMid).HasColumnName("MessageMID");

                entity.Property(e => e.AccessType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageBody).IsUnicode(false);

                entity.Property(e => e.MessageCategoryId).HasColumnName("MessageCategoryID");

                entity.Property(e => e.MessageTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MessageType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 For Text, 1 For Image,2 for PDF,3 for word, 4 for Audio");

                entity.Property(e => e.ScriptMid)
                    .HasColumnName("ScriptMID")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageBroadcastCategory>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("CategoryID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MessageCategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MessageBroadcastLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("MessageBroadcast_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.AccessType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageBody).IsUnicode(false);

                entity.Property(e => e.MessageCategoryId).HasColumnName("MessageCategoryID");

                entity.Property(e => e.MessageMid).HasColumnName("MessageMID");

                entity.Property(e => e.MessageTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid)
                    .HasColumnName("ScriptMID")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageBroadcastLog1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MessageBroadcastLog");

                entity.Property(e => e.Bolevel1).HasColumnName("BOLevel1");

                entity.Property(e => e.Bolevel2).HasColumnName("BOLevel2");

                entity.Property(e => e.Bolevel3).HasColumnName("BOLevel3");

                entity.Property(e => e.Cdd).HasColumnName("CDD");

                entity.Property(e => e.Cdm).HasColumnName("CDM");

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Md).HasColumnName("MD");

                entity.Property(e => e.MessageBody)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTitle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Misexecutive).HasColumnName("MISExecutive");

                entity.Property(e => e.Mismanager).HasColumnName("MISManager");

                entity.Property(e => e.Qa).HasColumnName("QA");

                entity.Property(e => e.Qbp).HasColumnName("QBP");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tm).HasColumnName("TM");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageBroadcastMapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MappingMid)
                    .HasColumnName("MappingMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageBroadcastMappingLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageBroadcastRead>(entity =>
            {
                entity.ToTable("MessageBroadcast_Read");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.MessageMid).HasColumnName("MessageMID");
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey })
                    .HasName("PK_dbo.__MigrationHistory");

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<MilestoneDetails>(entity =>
            {
                entity.HasKey(e => e.MilestoneDid);

                entity.Property(e => e.MilestoneDid).HasColumnName("MilestoneDID");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AttachmentFileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilestoneName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 For Service Ticket, 2 For Dispute");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscColValidationMaster>(entity =>
            {
                entity.HasKey(e => e.MiscColMid);

                entity.Property(e => e.MiscColMid)
                    .HasColumnName("MiscColMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValidationType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MiscColumnMaster>(entity =>
            {
                entity.HasKey(e => e.MiscMid);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ContainsInTab)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.IsCli).HasColumnName("IsCLI");

                entity.Property(e => e.MailBoxId)
                    .HasColumnName("MailBoxID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MailTemplate)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Marks).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColPosition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SectionHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscColumnMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ContainsInTab)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.IsCli).HasColumnName("IsCLI");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailBoxId)
                    .HasColumnName("MailBoxID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MailTemplate)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Marks).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColPosition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SectionHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscColumnMasterRamu03052018>(entity =>
            {
                entity.HasKey(e => e.MiscMid)
                    .HasName("PK_MiscColumnMaster_1");

                entity.ToTable("MiscColumnMasterRamu_03052018");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ColumnDataType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 For General, 1 For Name, 2 For Phone, 3 For Email");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ContainsInTab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DupCheck).HasDefaultValueSql("((0))");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCli)
                    .HasColumnName("IsCLI")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMasterRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPhoneNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.MailBoxId)
                    .HasColumnName("MailBoxID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MailTemplate)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Marks).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MiscColIsMandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColPosition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 for textbox, 1 for dropdownlist");

                entity.Property(e => e.MiscColValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SectionHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscExternalDataColMaster>(entity =>
            {
                entity.HasKey(e => e.MiscMid);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscExternalTypeMid).HasColumnName("MiscExternalTypeMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscExternalDataColMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("MiscExternalDataColMaster_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscExternalTypeMid).HasColumnName("MiscExternalTypeMID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscExternalDataTypeMaster>(entity =>
            {
                entity.HasKey(e => e.MiscEdtmid);

                entity.Property(e => e.MiscEdtmid).HasColumnName("MiscEDTMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscExternalDataType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscExternalDataTypeMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("MiscExternalDataTypeMaster_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscEdtmid).HasColumnName("MiscEDTMID");

                entity.Property(e => e.MiscExternalDataType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscExternalListDataMaster>(entity =>
            {
                entity.HasKey(e => e.MiscDid);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.MiscData)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ParentMiscDid).HasColumnName("ParentMiscDID");

                entity.Property(e => e.ParentMiscMid).HasColumnName("ParentMiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscExternalListDataMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("MiscExternalListDataMaster_Log");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.MiscData)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ParentMiscDid).HasColumnName("ParentMiscDID");

                entity.Property(e => e.ParentMiscMid).HasColumnName("ParentMiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscListDataMaster>(entity =>
            {
                entity.HasKey(e => e.MiscDid);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MiscData)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ParentMiscDid).HasColumnName("ParentMiscDID");

                entity.Property(e => e.ParentMiscMid).HasColumnName("ParentMiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscListDataMaster18052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MiscListDataMaster_18052018");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MiscData)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid)
                    .HasColumnName("MiscDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ParentMiscDid).HasColumnName("ParentMiscDID");

                entity.Property(e => e.ParentMiscMid).HasColumnName("ParentMiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscListDataMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscData)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.ParentMiscDid).HasColumnName("ParentMiscDID");

                entity.Property(e => e.ParentMiscMid).HasColumnName("ParentMiscMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscSearchDataColMaster>(entity =>
            {
                entity.HasKey(e => e.MiscSdmid);

                entity.Property(e => e.MiscSdmid).HasColumnName("MiscSDMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsCli)
                    .HasColumnName("IsCLI")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MiscMasterColLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMasterColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscSearchTypeMid).HasColumnName("MiscSearchTypeMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SqlsearchType)
                    .HasColumnName("SQLSearchType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscSearchDataMaster>(entity =>
            {
                entity.HasKey(e => e.SearchDmid);

                entity.Property(e => e.SearchDmid).HasColumnName("SearchDMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscSearchTypeMid).HasColumnName("MiscSearchTypeMID");

                entity.Property(e => e.Para1).IsUnicode(false);

                entity.Property(e => e.Para10).IsUnicode(false);

                entity.Property(e => e.Para11).IsUnicode(false);

                entity.Property(e => e.Para12).IsUnicode(false);

                entity.Property(e => e.Para13).IsUnicode(false);

                entity.Property(e => e.Para14).IsUnicode(false);

                entity.Property(e => e.Para15).IsUnicode(false);

                entity.Property(e => e.Para16).IsUnicode(false);

                entity.Property(e => e.Para17).IsUnicode(false);

                entity.Property(e => e.Para18).IsUnicode(false);

                entity.Property(e => e.Para19).IsUnicode(false);

                entity.Property(e => e.Para2).IsUnicode(false);

                entity.Property(e => e.Para20).IsUnicode(false);

                entity.Property(e => e.Para21).IsUnicode(false);

                entity.Property(e => e.Para22).IsUnicode(false);

                entity.Property(e => e.Para23).IsUnicode(false);

                entity.Property(e => e.Para24).IsUnicode(false);

                entity.Property(e => e.Para25).IsUnicode(false);

                entity.Property(e => e.Para26).IsUnicode(false);

                entity.Property(e => e.Para27).IsUnicode(false);

                entity.Property(e => e.Para28).IsUnicode(false);

                entity.Property(e => e.Para29).IsUnicode(false);

                entity.Property(e => e.Para3).IsUnicode(false);

                entity.Property(e => e.Para30).IsUnicode(false);

                entity.Property(e => e.Para31).IsUnicode(false);

                entity.Property(e => e.Para32).IsUnicode(false);

                entity.Property(e => e.Para33).IsUnicode(false);

                entity.Property(e => e.Para34).IsUnicode(false);

                entity.Property(e => e.Para35).IsUnicode(false);

                entity.Property(e => e.Para36).IsUnicode(false);

                entity.Property(e => e.Para37).IsUnicode(false);

                entity.Property(e => e.Para38).IsUnicode(false);

                entity.Property(e => e.Para39).IsUnicode(false);

                entity.Property(e => e.Para4).IsUnicode(false);

                entity.Property(e => e.Para40).IsUnicode(false);

                entity.Property(e => e.Para41).IsUnicode(false);

                entity.Property(e => e.Para42).IsUnicode(false);

                entity.Property(e => e.Para43).IsUnicode(false);

                entity.Property(e => e.Para44).IsUnicode(false);

                entity.Property(e => e.Para45).IsUnicode(false);

                entity.Property(e => e.Para46).IsUnicode(false);

                entity.Property(e => e.Para47).IsUnicode(false);

                entity.Property(e => e.Para48).IsUnicode(false);

                entity.Property(e => e.Para49).IsUnicode(false);

                entity.Property(e => e.Para5).IsUnicode(false);

                entity.Property(e => e.Para50).IsUnicode(false);

                entity.Property(e => e.Para6).IsUnicode(false);

                entity.Property(e => e.Para7).IsUnicode(false);

                entity.Property(e => e.Para8).IsUnicode(false);

                entity.Property(e => e.Para9).IsUnicode(false);

                entity.Property(e => e.RawDmid).HasColumnName("RawDMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MiscSearchMaster>(entity =>
            {
                entity.HasKey(e => e.SearchMid)
                    .HasName("PK_MiscSearchMaster_1");

                entity.Property(e => e.SearchMid).HasColumnName("SearchMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.FreezeStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MiscColLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<MiscSearchTypeMaster>(entity =>
            {
                entity.HasKey(e => e.MiscSearchTypeMid);

                entity.Property(e => e.MiscSearchTypeMid).HasColumnName("MiscSearchTypeMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscSearchType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObScriptTypeMaster>(entity =>
            {
                entity.HasKey(e => e.ScriptTmid);

                entity.Property(e => e.ScriptTmid).HasColumnName("ScriptTMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObscriptDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OBScriptDetails");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScripdDid)
                    .HasColumnName("ScripdDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptHtml).IsUnicode(false);

                entity.Property(e => e.ScriptMenuName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObscriptDetailsLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OBScriptDetailsLog");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScripdDid).HasColumnName("ScripdDID");

                entity.Property(e => e.ScriptHtml).IsUnicode(false);

                entity.Property(e => e.ScriptMenuName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObscriptMaster>(entity =>
            {
                entity.HasKey(e => e.ScriptMid);

                entity.ToTable("OBScriptMaster");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.CallingType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailApplicable)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.GroupingRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderCenterText)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLeftImage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderRightImage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsApplicable).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.IsCallingApplicable).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDiallerApplicable).HasDefaultValueSql("((0))");

                entity.Property(e => e.MailExeConfig)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Mail should be send through Exe or with application. 0 with Application and 1 with exe.");

                entity.Property(e => e.MailVerification)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Specify that Mail should be verified by senior or not. 0 means no verification and 1 means verification");

                entity.Property(e => e.PerformanceCriteria).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.PrimaryScriptMid).HasColumnName("PrimaryScriptMID");

                entity.Property(e => e.Queue).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.QueuePreference).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.ReportDumpName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptType).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.Skill).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.SkillPreference).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.Slaapplicable).HasColumnName("SLAApplicable");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.TeamLead).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.Telecaller).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.TicketApplicable)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.TopPreference).HasComment("0- NA, 1- No, 2- Yes");

                entity.Property(e => e.Tzmid).HasColumnName("TZMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Verifier).HasComment("0- NA, 1- No, 2- Yes");
            });

            modelBuilder.Entity<ObscriptMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("OBScriptMasterLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CallingType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GroupingRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderCenterText)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLeftImage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderRightImage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsCallingApplicable).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDiallerApplicable).HasDefaultValueSql("((0))");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailExeConfig)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Mail should be send through Exe or with application. 0 with Application and 1 with exe.");

                entity.Property(e => e.MailVerification)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Specify that Mail should be verified by senior or not. 0 means no verification and 1 means verification");

                entity.Property(e => e.PrimaryScriptMid).HasColumnName("PrimaryScriptMID");

                entity.Property(e => e.ReportDumpName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.ScriptName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Slaapplicable).HasColumnName("SLAApplicable");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.Tzmid).HasColumnName("TZMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OcrData>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OCR_Data");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MsData).HasColumnName("MS_Data");

                entity.Property(e => e.Xmldata)
                    .HasColumnName("XMLData")
                    .HasColumnType("xml");
            });

            modelBuilder.Entity<OnHoldResolution>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("On_Hold_Resolution");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status).HasMaxLength(250);
            });

            modelBuilder.Entity<OperatorMaster>(entity =>
            {
                entity.HasKey(e => e.OperatorMid);

                entity.Property(e => e.OperatorMid).HasColumnName("OperatorMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.OperatorName).HasMaxLength(200);

                entity.Property(e => e.OperatorSymbol).HasMaxLength(500);

                entity.Property(e => e.TextBoxDataType).HasMaxLength(100);
            });

            modelBuilder.Entity<OutcomeControlAccessLevelDetail>(entity =>
            {
                entity.HasKey(e => e.OutcomeAlid);

                entity.Property(e => e.OutcomeAlid).HasColumnName("OutcomeALID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OutcomeControlAccessLevelDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeAlid).HasColumnName("OutcomeALID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OutcomeControlMappingDetail>(entity =>
            {
                entity.HasKey(e => e.MappingDid);

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OutcomeControlMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OutcomeMaster>(entity =>
            {
                entity.HasKey(e => e.OutcomeMid);

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Outcome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OutcomeMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Outcome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PriorityMaster>(entity =>
            {
                entity.HasKey(e => e.PriorityMid);

                entity.Property(e => e.PriorityMid).HasColumnName("PriorityMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PriorityUsers>(entity =>
            {
                entity.HasKey(e => e.UserMid);

                entity.Property(e => e.UserMid).HasColumnName("UserMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PriorityUsersLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserMid).HasColumnName("UserMID");
            });

            modelBuilder.Entity<ProcessLoginMappingDetail>(entity =>
            {
                entity.HasKey(e => e.ProcessLmdid)
                    .HasName("PK__ProcessLo__0F88C6761920BF5C");

                entity.Property(e => e.ProcessLmdid).HasColumnName("ProcessLMDID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcessLoginMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__ProcessLo__5E5499A81CF15040");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ProcessLmdid).HasColumnName("ProcessLMDID");

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcessLoginMappingDetailLogRamu14052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProcessLoginMappingDetailLog_ramu14052018");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ProcessLmdid).HasColumnName("ProcessLMDID");

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcessMaster>(entity =>
            {
                entity.HasKey(e => e.ProcessMid);

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcessMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcessorEscalationTrails>(entity =>
            {
                entity.Property(e => e.ProcessorEscalationTrailsId)
                    .HasColumnName("ProcessorEscalationTrailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.EscalationComments).HasMaxLength(500);

                entity.Property(e => e.Tlcomments)
                    .HasColumnName("TLComments")
                    .HasMaxLength(1000);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<ProcessorTrailsDetails>(entity =>
            {
                entity.Property(e => e.ProcessorTrailsDetailsId)
                    .HasColumnName("ProcessorTrailsDetailsID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ApproductionDetailsId)
                    .HasColumnName("APProductionDetailsID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AptinSeconds)
                    .HasColumnName("APTInSeconds")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntryUser)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TrailsType).HasMaxLength(50);
            });

            modelBuilder.Entity<ProjectAccessMappingMaster>(entity =>
            {
                entity.HasKey(e => e.ProjectAccessMid);

                entity.Property(e => e.ProjectAccessMid).HasColumnName("ProjectAccessMID");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.CreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectAccess).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PublishKeyMapDialler>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerTableMid).HasColumnName("DiallerTableMID");

                entity.Property(e => e.PublishKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PublishKeyMid)
                    .HasColumnName("PublishKeyMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QmsAuditSheetCategoryConfigMaster>(entity =>
            {
                entity.HasKey(e => e.AuditSccid)
                    .HasName("PK_AuditSheetCategoryConfigMaster");

                entity.ToTable("QMS_AuditSheetCategoryConfigMaster");

                entity.Property(e => e.AuditSccid).HasColumnName("AuditSCCID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1ScoreColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1ScoreColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1SectionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1SectionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2ScoreColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2ScoreColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2SectionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2SectionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ImageName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OptionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OptionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDetailColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDetailColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QmsAuditSheetConfiguration>(entity =>
            {
                entity.HasKey(e => e.AuditScid)
                    .HasName("PK_AuditSheetConfiguration");

                entity.ToTable("QMS_AuditSheetConfiguration");

                entity.Property(e => e.AuditScid).HasColumnName("AuditSCID");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderLevel1ScoreColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1ScoreColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1SectionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1SectionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2ScoreColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2ScoreColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2SectionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2SectionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OptionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OptionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDetailColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDetailColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QmsAuditSheetConfigurationLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QMS_AuditSheetConfigurationLog");

                entity.Property(e => e.AuditScid).HasColumnName("AuditSCID");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderLevel1ScoreColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1ScoreColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1SectionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel1SectionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2ScoreColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2ScoreColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2SectionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderLevel2SectionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.OptionColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OptionColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDetailColSpan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDetailColWidth)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QmsAuditSheetMaster>(entity =>
            {
                entity.HasKey(e => e.AuditSmid);

                entity.ToTable("QMS_AuditSheetMaster");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.AuditSccid).HasColumnName("AuditSCCID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ConfigurationType).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailValidationOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaximumValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MinimumValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ScoreHeaderText)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SheetName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QmsAuditSheetMasterlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QMS_AuditSheetMasterlog");

                entity.Property(e => e.AuditSccid).HasColumnName("AuditSCCID");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ConfigurationType).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailValidationOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MaximumValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MinimumValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ScoreHeaderText)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SheetName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QmsAuditSheetScriptMapping>(entity =>
            {
                entity.HasKey(e => e.AuditScmid);

                entity.ToTable("QMS_AuditSheetScriptMapping");

                entity.Property(e => e.AuditScmid).HasColumnName("AuditSCMID");

                entity.Property(e => e.AllTm)
                    .IsRequired()
                    .HasColumnName("AllTM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AuditAttachmentActualName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AuditAttachmentName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AuditAttachmentRequired).HasDefaultValueSql("((0))");

                entity.Property(e => e.AuditMailToTmstatus).HasColumnName("AuditMailToTMStatus");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DuplicacyCheckOnUrn).HasColumnName("DuplicacyCheckOnURN");

                entity.Property(e => e.DuplicacyCheckWithMiscMid1).HasColumnName("DuplicacyCheckWithMiscMID1");

                entity.Property(e => e.DuplicacyCheckWithMiscMid2).HasColumnName("DuplicacyCheckWithMiscMID2");

                entity.Property(e => e.EditAccessLmids)
                    .HasColumnName("EditAccessLMIDs")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackScorePercentage)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LinkName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SendEvaluationInQuery)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Tmaccess)
                    .IsRequired()
                    .HasColumnName("TMAccess")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TmfeedbackOn)
                    .HasColumnName("TMfeedbackOn")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TmfeedbackRequired)
                    .HasColumnName("TMFeedbackRequired")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TmfeedbackScoreFrom)
                    .HasColumnName("TMFeedbackScoreFrom")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TmfeedbackScoreTo)
                    .HasColumnName("TMFeedbackScoreTo")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QmsAuditSheetScriptMappingLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QMS_AuditSheetScriptMappingLog");

                entity.Property(e => e.AllTm).HasColumnName("AllTM");

                entity.Property(e => e.AuditAttachmentActualName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AuditAttachmentName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AuditMailToTmstatus).HasColumnName("AuditMailToTMStatus");

                entity.Property(e => e.AuditScmid).HasColumnName("AuditSCMID");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DuplicacyCheckOnUrn).HasColumnName("DuplicacyCheckOnURN");

                entity.Property(e => e.DuplicacyCheckWithMiscMid1).HasColumnName("DuplicacyCheckWithMiscMID1");

                entity.Property(e => e.DuplicacyCheckWithMiscMid2).HasColumnName("DuplicacyCheckWithMiscMID2");

                entity.Property(e => e.EditAccessLmids)
                    .HasColumnName("EditAccessLMIDs")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackScorePercentage)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LinkName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Tmaccess).HasColumnName("TMAccess");

                entity.Property(e => e.TmfeedbackOn)
                    .HasColumnName("TMfeedbackOn")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TmfeedbackRequired).HasColumnName("TMFeedbackRequired");

                entity.Property(e => e.TmfeedbackScoreFrom)
                    .HasColumnName("TMFeedbackScoreFrom")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TmfeedbackScoreTo)
                    .HasColumnName("TMFeedbackScoreTo")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QmsScoreSectionVisibility>(entity =>
            {
                entity.HasKey(e => e.ScoreSectionVisibiltyId);

                entity.ToTable("QMS_ScoreSectionVisibility");

                entity.Property(e => e.ScoreSectionName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QmsVwAuditViewSheetMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QMS_VW_AuditViewSheetMaster");

                entity.Property(e => e.AllTm).HasColumnName("AllTM");

                entity.Property(e => e.AuditMailToTmstatus).HasColumnName("AuditMailToTMStatus");

                entity.Property(e => e.AuditScmid).HasColumnName("AuditSCMID");

                entity.Property(e => e.AuditSmid).HasColumnName("AuditSMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DuplicacyCheckOnUrn).HasColumnName("DuplicacyCheckOnURN");

                entity.Property(e => e.DuplicacyCheckWithMiscMid1).HasColumnName("DuplicacyCheckWithMiscMID1");

                entity.Property(e => e.DuplicacyCheckWithMiscMid2).HasColumnName("DuplicacyCheckWithMiscMID2");

                entity.Property(e => e.EmailOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailValidationOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackScorePercentage)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.LinkName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MaximumValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MinimumValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ScoreHeaderText)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SheetName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Tmaccess).HasColumnName("TMAccess");

                entity.Property(e => e.TmfeedbackOn)
                    .HasColumnName("TMfeedbackOn")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TmfeedbackRequired).HasColumnName("TMFeedbackRequired");

                entity.Property(e => e.TmfeedbackScoreFrom)
                    .HasColumnName("TMFeedbackScoreFrom")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TmfeedbackScoreTo)
                    .HasColumnName("TMFeedbackScoreTo")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<QueryTypeMaster>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.QueryType).HasMaxLength(100);
            });

            modelBuilder.Entity<QueueMaster>(entity =>
            {
                entity.HasKey(e => e.QueueMid);

                entity.Property(e => e.QueueMid).HasColumnName("QueueMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.QueueName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<QueueMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.QueueMid).HasColumnName("QueueMID");

                entity.Property(e => e.QueueName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReTweetDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentFrom).IsUnicode(false);

                entity.Property(e => e.CommentId)
                    .HasColumnName("CommentID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CommentUniqueId)
                    .HasColumnName("CommentUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.MediaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .IsUnicode(false);

                entity.Property(e => e.XmlRawId).HasColumnName("XmlRawID");
            });

            modelBuilder.Entity<ReTweetDetailsTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReTweetDetails_Temp");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentFrom).IsUnicode(false);

                entity.Property(e => e.CommentUniqueId)
                    .HasColumnName("CommentUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.MediaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalCommentId).HasColumnName("OriginalCommentID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ReplyId)
                    .HasColumnName("ReplyID")
                    .IsUnicode(false);

                entity.Property(e => e.TempCommentId)
                    .HasColumnName("TempCommentID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ReportDetailPackGenerator>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ReportServer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reportpath)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportDumpPackMaster>(entity =>
            {
                entity.HasKey(e => e.ReportId);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid)
                    .HasColumnName("LoginMID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentGlobalUserId)
                    .HasColumnName("ParentGlobalUserID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid)
                    .HasColumnName("ScriptMID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SystemDateTime).HasColumnType("datetime");

                entity.Property(e => e.SystemUpdatedDateTime).HasColumnType("date");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.WebFileStatus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ReportDumpPackMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid)
                    .HasColumnName("LoginMID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentGlobalUserId)
                    .HasColumnName("ParentGlobalUserID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid)
                    .HasColumnName("ScriptMID")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SystemDateTime).HasColumnType("datetime");

                entity.Property(e => e.SystemUpdatedDateTime).HasColumnType("date");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportFolder>(entity =>
            {
                entity.HasKey(e => e.ReportFid)
                    .HasName("PK__ReportFo__031CC7098C0E18C5");

                entity.Property(e => e.ReportFid).HasColumnName("ReportFID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FolderPath)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportSid).HasColumnName("ReportSID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportFolder10052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportFolder_10052018");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FolderPath)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportFid)
                    .HasColumnName("ReportFID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ReportSid).HasColumnName("ReportSID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportGroupMaster>(entity =>
            {
                entity.ToTable("Report_GroupMaster");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Default)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1-BI,2-QMS,0 Specific");

                entity.Property(e => e.Freeze).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.ReportType).HasComment("Standard(0),Client(1)");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Report_Master");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AirIndiaFrequentFlierProgramNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AlternateAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BillingAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CallBackDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallStDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CalledPhoneNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CardFeeRenuelDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CardType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cseid)
                    .HasColumnName("CSEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentCardRewardPoints)
                    .HasColumnName("Current_card_reward_points")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentCardType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentCreditLimit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentalGrocerySpends)
                    .HasColumnName("Departmental_grocery_spends")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiningSpends)
                    .HasColumnName("Dining_spends")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EligibleCardRewardPoints)
                    .HasColumnName("Eligible_card_reward_points")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EligibleCardType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InternationalSpends)
                    .HasColumnName("International_spends")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Isverified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ivgid).HasColumnName("IVGID");

                entity.Property(e => e.LandlineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Lob)
                    .HasColumnName("LOB")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LoyaltyTier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.McRevisedCreditLimit)
                    .HasColumnName("MC_RevisedCreditLimit")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.McScCreditLimit)
                    .HasColumnName("MC_SC_CreditLimit")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.McTotalCreditLimit)
                    .HasColumnName("MC_TotalCreditLimit")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Milestone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Multi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OnlineSpends)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutComeCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OutComeDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentOutcomeId).HasColumnName("ParentOutcomeID");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTo).HasColumnName("Reporting_to");

                entity.Property(e => e.RevisedCreditLimit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rmid)
                    .HasColumnName("RMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.SubProgram)
                    .HasColumnName("Sub_Program")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBenefit)
                    .HasColumnName("Total_Benefit")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalSpends)
                    .HasColumnName("Total_Spends")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TravelActive)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");

                entity.Property(e => e.VerificationType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VerifierCseid)
                    .HasColumnName("VerifierCSEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VerifierOutcomeId).HasColumnName("VerifierOutcomeID");

                entity.Property(e => e.VerifierRemarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterAdditionalDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ControlPlacement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMandatory).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");

                entity.Property(e => e.ParameterControlType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 For DropDownList, 2 For MultiSelection Dropdown");

                entity.Property(e => e.ParameterLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentControl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RdlparameterName)
                    .HasColumnName("RDLParameterName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.Spparameter)
                    .HasColumnName("SPParameter")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdvanceFilter).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoLoad).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExcelName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsClientReport).HasDefaultValueSql("((0))");

                entity.Property(e => e.RdlchartName)
                    .HasColumnName("RDLChartName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RdldetailName)
                    .HasColumnName("RDLDetailName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rdlname)
                    .HasColumnName("RDLName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeaderChart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeaderGrid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterDetail10052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportMasterDetail_10052018");

                entity.Property(e => e.ExcelName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RdlchartName)
                    .HasColumnName("RDLChartName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RdldetailName)
                    .HasColumnName("RDLDetailName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rdlname)
                    .HasColumnName("RDLName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeaderChart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeaderGrid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__ReportMasterDetailLog__3214EC27634EBE90");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AdvanceFilter).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoLoad).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExcelName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExportToTxt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogLogCreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RdlchartName)
                    .HasColumnName("RDLChartName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RdldetailName)
                    .HasColumnName("RDLDetailName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rdlname)
                    .HasColumnName("RDLName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeaderChart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportHeaderGrid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterUidetail>(entity =>
            {
                entity.ToTable("ReportMasterUIDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agent)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdm)
                    .HasColumnName("CDM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CheckGroup)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Circle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomiseRdid)
                    .HasColumnName("CustomiseRDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EvaluationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Language)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pg)
                    .HasColumnName("PG")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pilot)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Project)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qa)
                    .HasColumnName("QA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReportType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportUiname)
                    .HasColumnName("ReportUIName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .HasColumnName("SITE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tm)
                    .HasColumnName("TM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkDivision)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkItem)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Zone)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterUidetail10052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportMasterUIDetail_10052018");

                entity.Property(e => e.Agent)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdm)
                    .HasColumnName("CDM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CheckGroup)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Circle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomiseRdid)
                    .HasColumnName("CustomiseRDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EvaluationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GroupBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Language)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pg)
                    .HasColumnName("PG")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pilot)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Project)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qa)
                    .HasColumnName("QA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReportType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportUiname)
                    .HasColumnName("ReportUIName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .HasColumnName("SITE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tm)
                    .HasColumnName("TM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkDivision)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkItem)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Zone)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterUidetailExt>(entity =>
            {
                entity.ToTable("ReportMasterUIDetailExt");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agent)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdm)
                    .HasColumnName("CDM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Circle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Language)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pg)
                    .HasColumnName("PG")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pilot)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Project)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qa)
                    .HasColumnName("QA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportMasterUiid).HasColumnName("ReportMasterUIID");

                entity.Property(e => e.ReportTypeRadio1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeRadio2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeRadio3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeRadio4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tm)
                    .HasColumnName("TM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkDivision)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorkGroup)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorkItem)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Zone)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterUidetailExt10052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportMasterUIDetailExt_10052018");

                entity.Property(e => e.Agent)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdm)
                    .HasColumnName("CDM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Circle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Language)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pg)
                    .HasColumnName("PG")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pilot)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Project)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qa)
                    .HasColumnName("QA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportMasterUiid).HasColumnName("ReportMasterUIID");

                entity.Property(e => e.ReportTypeRadio1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeRadio2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeRadio3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeRadio4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tm)
                    .HasColumnName("TM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkDivision)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorkGroup)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorkItem)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Zone)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportMasterUistaticData>(entity =>
            {
                entity.ToTable("ReportMasterUIStaticData");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agent)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Cdm)
                    .HasColumnName("CDM")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Client)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Project)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Qa)
                    .HasColumnName("QA")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.Tm)
                    .HasColumnName("TM")
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportServer>(entity =>
            {
                entity.HasKey(e => e.ReportSid)
                    .HasName("PK__ReportSe__0C41EE850915D206");

                entity.Property(e => e.ReportSid).HasColumnName("ReportSID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportServer1)
                    .HasColumnName("ReportServer")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportServer10052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportServer_10052018");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportServer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportSid)
                    .HasColumnName("ReportSID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ServerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportStatusMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Freezestatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReportStatusMid)
                    .HasColumnName("ReportStatusMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportTypeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTypeId)
                    .HasColumnName("ReportTypeID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<RtmprocessMaster>(entity =>
            {
                entity.HasKey(e => e.ProcessId)
                    .HasName("RTMPK_ProcessMaster");

                entity.ToTable("RTMProcessMaster");

                entity.Property(e => e.ProcessId)
                    .HasColumnName("ProcessID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ProcessName).HasMaxLength(200);
            });

            modelBuilder.Entity<RtmtimeZoneMaster>(entity =>
            {
                entity.HasKey(e => e.Tzmid)
                    .HasName("RTMPK_TimeZones");

                entity.ToTable("RTMTimeZoneMaster");

                entity.Property(e => e.Tzmid).HasColumnName("TZMID");

                entity.Property(e => e.AppDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.Dbdefault)
                    .HasColumnName("DBDefault")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dsapplicable).HasColumnName("DSApplicable");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StandardName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Utcoffset).HasColumnName("UTCOffset");

                entity.Property(e => e.WebDefault).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SameDayDuplicateEntryLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Age)
                    .HasColumnName("AGE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.AgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IsComingFrom)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Keywords)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NetPremiumPaid)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OfferDetail)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OfferPage)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentFail)
                    .HasColumnName("paymentFail")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentPage)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Publisher)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RecordGetDateTime).HasColumnType("datetime");

                entity.Property(e => e.RiskStartDate).HasColumnType("datetime");

                entity.Property(e => e.Si)
                    .HasColumnName("SI")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Samlclients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SAMLClients");

                entity.Property(e => e.AssertionConsumerServiceUrl)
                    .HasColumnName("AssertionConsumerServiceURL")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime)
                    .HasColumnName("createddatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Domain)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Freezestatus)
                    .HasColumnName("freezestatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Issuer)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Samlcertificate).HasColumnName("SAMLCertificate");

                entity.Property(e => e.TargetUrl)
                    .HasColumnName("TargetURL")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScenarioMaster>(entity =>
            {
                entity.HasKey(e => e.ScenarioId);

                entity.Property(e => e.ScenarioId).HasColumnName("ScenarioID");

                entity.Property(e => e.ScenarioName).HasMaxLength(100);
            });

            modelBuilder.Entity<ScheduleTask>(entity =>
            {
                entity.Property(e => e.ScheduleTaskId).HasColumnName("ScheduleTaskID");

                entity.Property(e => e.EndDate).HasMaxLength(50);

                entity.Property(e => e.GltaskMasterId).HasColumnName("GLTaskMasterID");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastRefreshDate)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastRunDate).HasMaxLength(50);

                entity.Property(e => e.Market).HasMaxLength(50);

                entity.Property(e => e.NextRunDate).HasMaxLength(50);

                entity.Property(e => e.RecurrenceType).HasMaxLength(30);

                entity.Property(e => e.StartDate).HasMaxLength(50);

                entity.Property(e => e.WeekDayName).HasMaxLength(30);

                entity.Property(e => e.WeekDayNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<ScriptDiallerPortalMappingMaster>(entity =>
            {
                entity.HasKey(e => e.ScriptDpmmid)
                    .HasName("PK__ScriptDi__0D7C18D31A1FD30B");

                entity.Property(e => e.ScriptDpmmid).HasColumnName("ScriptDPMMID");

                entity.Property(e => e.AdminServerUrl)
                    .HasColumnName("AdminServerURL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CrmserverUrl)
                    .HasColumnName("CRMServerURL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Crmurl)
                    .HasColumnName("CRMURL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctiport).HasColumnName("CTIPort");

                entity.Property(e => e.Ctiproxy)
                    .HasColumnName("CTIProxy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HrsiteMid).HasColumnName("HRSiteMID");

                entity.Property(e => e.OnMediaWebService)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PortalName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScriptDiallerSetting>(entity =>
            {
                entity.HasKey(e => e.ScriptDiallerMid);

                entity.Property(e => e.ScriptDiallerMid).HasColumnName("ScriptDiallerMID");

                entity.Property(e => e.AdvanceToolbar).HasDefaultValueSql("((0))");

                entity.Property(e => e.CallbackCode).IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ConsultDialNumberField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Crmmode)
                    .HasColumnName("CRMMode")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DialNumberField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerReq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerServiceMid).HasColumnName("DiallerServiceMID");

                entity.Property(e => e.DiallerTypeMid)
                    .HasColumnName("DiallerTypeMID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerVersionMid)
                    .HasColumnName("DiallerVersionMID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvrkeyPad).HasColumnName("IVRKeyPad");

                entity.Property(e => e.LoginPageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ManualCode).IsUnicode(false);

                entity.Property(e => e.NextPage)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PreviousPage)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.ScriptPath).IsUnicode(false);

                entity.Property(e => e.ToolBarMode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueIdindex).HasColumnName("UniqueIDIndex");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScriptDiallerSettingRamu04052018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ScriptDiallerSetting_ramu04052018");

                entity.Property(e => e.CallbackCode).IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ConsultDialNumberField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Crmmode)
                    .HasColumnName("CRMMode")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DialNumberField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerReq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerServiceMid).HasColumnName("DiallerServiceMID");

                entity.Property(e => e.DiallerTypeMid)
                    .HasColumnName("DiallerTypeMID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiallerVersionMid)
                    .HasColumnName("DiallerVersionMID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IvrkeyPad).HasColumnName("IVRKeyPad");

                entity.Property(e => e.LoginPageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ManualCode).IsUnicode(false);

                entity.Property(e => e.NextPage)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PreviousPage)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptDiallerMid)
                    .HasColumnName("ScriptDiallerMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.ScriptPath).IsUnicode(false);

                entity.Property(e => e.UniqueIdindex).HasColumnName("UniqueIDIndex");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScriptMailboxMappingDetail>(entity =>
            {
                entity.HasKey(e => e.MappingDid);

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MailboxId).HasColumnName("MailboxID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScriptMailboxMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MailboxId).HasColumnName("MailboxID");

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScriptMailing>(entity =>
            {
                entity.HasKey(e => e.MailId);

                entity.ToTable("Script_Mailing");

                entity.Property(e => e.MailId).HasColumnName("MailID");

                entity.Property(e => e.Body)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MailFrom)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MailTo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Port)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.SignatureImage)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScriptMiscSettings>(entity =>
            {
                entity.HasKey(e => e.MiscParamMid);

                entity.Property(e => e.MiscParamMid).HasColumnName("MiscParamMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterValue).IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScriptTabMaster>(entity =>
            {
                entity.HasKey(e => e.TabMid);

                entity.Property(e => e.TabMid).HasColumnName("TabMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Section1Header)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Section2Header)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Section3Header)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TabHeader)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScriptTabMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Section1Header)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Section2Header)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Section3Header)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TabHeader)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TabMid).HasColumnName("TabMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScrubbingOperatorMaster>(entity =>
            {
                entity.HasKey(e => e.OperatorMid);

                entity.Property(e => e.OperatorMid).HasColumnName("OperatorMID");

                entity.Property(e => e.ExpressionToSearchHeading).HasMaxLength(250);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.OperatorName).HasMaxLength(200);

                entity.Property(e => e.OperatorSymbol).HasMaxLength(500);

                entity.Property(e => e.ReplacementValueHeading).HasMaxLength(250);

                entity.HasOne(d => d.DataType)
                    .WithMany(p => p.ScrubbingOperatorMaster)
                    .HasForeignKey(d => d.DataTypeId)
                    .HasConstraintName("ExcelDataType_scrubbing_datatype");
            });

            modelBuilder.Entity<SecurityQuestions>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Question)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ServerMaster>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AppUrl)
                    .HasColumnName("AppURL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ServerIp)
                    .HasColumnName("ServerIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServerType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SessionDataColumnMaster>(entity =>
            {
                entity.HasKey(e => e.SessionDid);

                entity.Property(e => e.SessionDid).HasColumnName("SessionDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SkillMaster>(entity =>
            {
                entity.HasKey(e => e.SkillMid);

                entity.Property(e => e.SkillMid).HasColumnName("SkillMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SkillName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SkillMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SkillMid).HasColumnName("SkillMID");

                entity.Property(e => e.SkillName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SlabandMaster>(entity =>
            {
                entity.HasKey(e => e.SlabandMid);

                entity.ToTable("SLABandMaster");

                entity.Property(e => e.SlabandMid).HasColumnName("SLABandMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityMid).HasColumnName("PriorityMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Slaband)
                    .HasColumnName("SLABand")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Slalabel)
                    .HasColumnName("SLALabel")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SmedepartmentMappingDetails>(entity =>
            {
                entity.HasKey(e => e.MappingDid);

                entity.ToTable("SMEDepartmentMappingDetails");

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MiscDid).HasColumnName("MiscDID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Smeid).HasColumnName("SMEID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Smemaster>(entity =>
            {
                entity.HasKey(e => e.Smeid);

                entity.ToTable("SMEMaster");

                entity.Property(e => e.Smeid).HasColumnName("SMEID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.SmeemailId)
                    .HasColumnName("SMEEmailID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Smename)
                    .HasColumnName("SMEName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SmsTemplate>(entity =>
            {
                entity.ToTable("SMS_Template");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Smsmessage)
                    .IsRequired()
                    .HasColumnName("SMSMessage")
                    .IsUnicode(false);

                entity.Property(e => e.Smstype)
                    .IsRequired()
                    .HasColumnName("SMSType")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Smsddetails>(entity =>
            {
                entity.HasKey(e => e.Smsdid);

                entity.ToTable("SMSDDetails");

                entity.Property(e => e.Smsdid).HasColumnName("SMSDID");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.RefDataDid).HasColumnName("RefDataDID");

                entity.Property(e => e.SmssendCount)
                    .HasColumnName("SMSSendCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SmssentFlag)
                    .HasColumnName("SMSSentFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smssource).HasColumnName("SMSSource");

                entity.Property(e => e.SmstypeMid).HasColumnName("SMSTypeMID");
            });

            modelBuilder.Entity<SmsddetailsLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SMSDDetails_Log");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.RefDataDid).HasColumnName("RefDataDID");

                entity.Property(e => e.Smsdid).HasColumnName("SMSDID");

                entity.Property(e => e.SmslogMid)
                    .HasColumnName("SMSLogMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SmsreturnCode)
                    .HasColumnName("SMSReturnCode")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SmssendDateTime)
                    .HasColumnName("SMSSendDateTime")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SmssentNumber)
                    .HasColumnName("SMSSentNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Smssource)
                    .HasColumnName("SMSSource")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smstext).HasColumnName("SMSText");

                entity.Property(e => e.Smstype)
                    .HasColumnName("SMSType")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Confirmation')");

                entity.Property(e => e.SmstypeMid).HasColumnName("SMSTypeMID");
            });

            modelBuilder.Entity<SmstextMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SMSTextMaster");

                entity.Property(e => e.Bucket)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DispositionMid).HasColumnName("DispositionMID");

                entity.Property(e => e.Language)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Smstext).HasColumnName("SMSText");

                entity.Property(e => e.SmstextMid)
                    .HasColumnName("SMSTextMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Smstype)
                    .HasColumnName("SMSType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SmstypeMaster>(entity =>
            {
                entity.HasKey(e => e.SmstypeMid)
                    .HasName("PK__SMSTypeM__60D7B59D8BF73F04");

                entity.ToTable("SMSTypeMaster");

                entity.Property(e => e.SmstypeMid).HasColumnName("SMSTypeMID");

                entity.Property(e => e.AdditionalQuery).IsUnicode(false);

                entity.Property(e => e.Bucket)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Smstemplate)
                    .HasColumnName("SMSTemplate")
                    .IsUnicode(false);

                entity.Property(e => e.Smstype)
                    .HasColumnName("SMSType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SmstypeMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogMid);

                entity.ToTable("SMSTypeMasterLog");

                entity.Property(e => e.LogMid).HasColumnName("LogMID");

                entity.Property(e => e.AdditionalQuery).IsUnicode(false);

                entity.Property(e => e.Bucket)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Smstemplate)
                    .HasColumnName("SMSTemplate")
                    .IsUnicode(false);

                entity.Property(e => e.Smstype)
                    .HasColumnName("SMSType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SmstypeMid).HasColumnName("SMSTypeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SocialMediaComment>(entity =>
            {
                entity.HasKey(e => e.CommentId);

                entity.Property(e => e.CommentId).HasColumnName("CommentID");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentFrom).IsUnicode(false);

                entity.Property(e => e.CommentUniqueId)
                    .HasColumnName("CommentUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<SocialMediaCommentTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SocialMediaComment_Temp");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentFrom).IsUnicode(false);

                entity.Property(e => e.CommentId)
                    .HasColumnName("CommentID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CommentUniqueId)
                    .HasColumnName("CommentUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.OriginalCommentId).HasColumnName("OriginalCommentID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ParentCommentId).HasColumnName("ParentCommentID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ReplyId)
                    .HasColumnName("ReplyID")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<SocialMediaPageConfiguration>(entity =>
            {
                entity.HasKey(e => e.PageId);

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.AccessToken).IsUnicode(false);

                entity.Property(e => e.AccessTokenSecret).IsUnicode(false);

                entity.Property(e => e.AppId)
                    .HasColumnName("AppID")
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ConsumerKey).IsUnicode(false);

                entity.Property(e => e.ConsumerSecret).IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.PageName).IsUnicode(false);

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TokenExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.TokenKey).IsUnicode(false);

                entity.Property(e => e.Type).HasComment("1 for facebook,2 for twitter");

                entity.Property(e => e.UpdatedBy).HasColumnType("datetime");

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaPageConfigurationLog>(entity =>
            {
                entity.HasKey(e => e.PageLogId);

                entity.ToTable("SocialMediaPageConfiguration_Log");

                entity.Property(e => e.PageLogId).HasColumnName("PageLogID");

                entity.Property(e => e.AccessToken).IsUnicode(false);

                entity.Property(e => e.AccessTokenSecret).IsUnicode(false);

                entity.Property(e => e.AppId)
                    .HasColumnName("AppID")
                    .IsUnicode(false);

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ConsumerKey).IsUnicode(false);

                entity.Property(e => e.ConsumerSecret).IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageName).IsUnicode(false);

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TokenExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.TokenKey).IsUnicode(false);

                entity.Property(e => e.Type).HasComment("1 for facebook,2 for twitter");

                entity.Property(e => e.UpdatedBy).HasColumnType("datetime");

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaPost>(entity =>
            {
                entity.HasKey(e => e.PostId);

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Post).IsUnicode(false);

                entity.Property(e => e.PostDateTime).HasColumnType("datetime");

                entity.Property(e => e.PostFrom).IsUnicode(false);

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<SocialMediaPostTemp>(entity =>
            {
                entity.HasKey(e => e.PostId);

                entity.ToTable("SocialMediaPost_Temp");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.OriginalPostId).HasColumnName("OriginalPostID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Post).IsUnicode(false);

                entity.Property(e => e.PostDateTime).HasColumnType("datetime");

                entity.Property(e => e.PostFrom).IsUnicode(false);

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<SocialMediaXml>(entity =>
            {
                entity.ToTable("SocialMediaXML");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PageId)
                    .HasColumnName("PageID")
                    .IsUnicode(false);

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TokenId)
                    .HasColumnName("TokenID")
                    .IsUnicode(false);

                entity.Property(e => e.Xmldata)
                    .HasColumnName("XMLData")
                    .HasColumnType("xml");
            });

            modelBuilder.Entity<StaticPagesMaster>(entity =>
            {
                entity.HasKey(e => e.StaticPagesId);

                entity.Property(e => e.StaticPagesId).HasColumnName("StaticPagesID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MenuName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatusMaster>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FieldName).HasMaxLength(500);

                entity.Property(e => e.ModuleName).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<SubOutcomeMaster>(entity =>
            {
                entity.HasKey(e => e.SubOutcomeMid);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.CallbackType).HasDefaultValueSql("((0))");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DialerCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.SubOutcome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeType).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubOutcomeMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DialerCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeMid).HasColumnName("OutcomeMID");

                entity.Property(e => e.SubOutcome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubOutcomeMid).HasColumnName("SubOutcomeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubOutcomeTypeMaster>(entity =>
            {
                entity.HasKey(e => e.SubOutcomeTypeMid);

                entity.Property(e => e.SubOutcomeTypeMid).HasColumnName("SubOutcomeTypeMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubOutcomeType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubProcessLoginMappingDetail>(entity =>
            {
                entity.HasKey(e => e.SubProcessLmdid)
                    .HasName("PK__SubProcessLo__0F88C6761920BF5C");

                entity.Property(e => e.SubProcessLmdid).HasColumnName("SubProcessLMDID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubProcessLoginMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__SubProcessLo__5E5499A81CF15040");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.BatchGuid).HasColumnName("BatchGUID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.SubProcessLmdid).HasColumnName("SubProcessLMDID");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubProcessMaster>(entity =>
            {
                entity.HasKey(e => e.SubProcessMid);

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.SubProcessName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubProcessMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessMid).HasColumnName("ProcessMID");

                entity.Property(e => e.SubProcessMid).HasColumnName("SubProcessMID");

                entity.Property(e => e.SubProcessName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubQueueMaster>(entity =>
            {
                entity.HasKey(e => e.SubQueueId);

                entity.Property(e => e.SubQueueId)
                    .HasColumnName("SubQueueID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ModuleName).HasMaxLength(50);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.SubQueue).HasMaxLength(200);
            });

            modelBuilder.Entity<SyncMappingDetail>(entity =>
            {
                entity.HasKey(e => e.SyncMdid)
                    .HasName("PK__SyncMapp__50827EF21244A50E");

                entity.Property(e => e.SyncMdid).HasColumnName("SyncMDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncTmid).HasColumnName("SyncTMID");
            });

            modelBuilder.Entity<SyncMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__SyncMapp__5E5499A86F2B50E7");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncMdid).HasColumnName("SyncMDID");

                entity.Property(e => e.SyncTmid).HasColumnName("SyncTMID");
            });

            modelBuilder.Entity<SyncStatusDetail>(entity =>
            {
                entity.HasKey(e => e.SyncSdid)
                    .HasName("PK__SyncStat__B82FAF91B6F1BC2F");

                entity.Property(e => e.SyncSdid).HasColumnName("SyncSDID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DataEndDate).HasColumnType("datetime");

                entity.Property(e => e.DataStartDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorMsg).HasColumnName("ErrorMSG");

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.SyncMdid).HasColumnName("SyncMDID");

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SyncTableMaster>(entity =>
            {
                entity.HasKey(e => e.SyncTmid)
                    .HasName("PK__SyncTabl__9A9B88E413B7F59C");

                entity.Property(e => e.SyncTmid).HasColumnName("SyncTMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsertFetch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SyncTableName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SyncTid).HasColumnName("SyncTID");

                entity.Property(e => e.UpdateFetch)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SyncTypeMaster>(entity =>
            {
                entity.HasKey(e => e.SyncTid)
                    .HasName("PK__SyncType__D4324A8879A8DF5A");

                entity.Property(e => e.SyncTid)
                    .HasColumnName("SyncTID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TableChangeLogMaster>(entity =>
            {
                entity.HasKey(e => e.ChangeLogId);

                entity.Property(e => e.ChangeLogId).HasColumnName("ChangeLogID");

                entity.Property(e => e.ChangeColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeDatabaseName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Insert, Update, Delete");

                entity.Property(e => e.ColumnDataType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnDefaultValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnIsIdentity).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TaxMaster>(entity =>
            {
                entity.HasKey(e => e.TaxId);

                entity.Property(e => e.TaxId)
                    .HasColumnName("TaxID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MarketName).HasMaxLength(200);

                entity.Property(e => e.TaxPercentage).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TblCourse>(entity =>
            {
                entity.HasKey(e => e.CourseId)
                    .HasName("PK__tblCours__C92D71A72E051E95");

                entity.ToTable("tblCourse");

                entity.Property(e => e.CourseId).ValueGeneratedNever();

                entity.Property(e => e.Courses)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl_Customer");

                entity.Property(e => e.CustomerAddress)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CustomerId).ValueGeneratedOnAdd();

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Orders)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<TblEmailSearchAutocomplete>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEmailSearch_Autocomplete");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<TblInsertTransCommit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblInsertTransCommit");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl_Orders");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CutomerAddress)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.OrderId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TblState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("PK__tblState__C3BA3B3A847D6DD4");

                entity.ToTable("tblState");

                entity.Property(e => e.StateId).ValueGeneratedNever();

                entity.Property(e => e.State)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblStudent>(entity =>
            {
                entity.ToTable("tblStudent");

                entity.Property(e => e.Gender)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pincode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.TblStudent)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK__tblStuden__Cours__210505A2");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.TblStudent)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK__tblStuden__Cours__2010E169");
            });

            modelBuilder.Entity<TblWebServicesAuthentication>(entity =>
            {
                entity.ToTable("TBL_WebServices_Authentication");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Freeze).HasDefaultValueSql("((0))");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessUse)
                    .HasColumnName("Process_Use")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeamMailGroupMappingDetail>(entity =>
            {
                entity.HasKey(e => e.MappingMid);

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MailGroupMid).HasColumnName("MailGroupMID");

                entity.Property(e => e.TeamMid).HasColumnName("TeamMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TeamMailGroupMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailGroupMid).HasColumnName("MailGroupMID");

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.TeamMid).HasColumnName("TeamMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TeamMaster>(entity =>
            {
                entity.HasKey(e => e.TeamMid);

                entity.Property(e => e.TeamMid).HasColumnName("TeamMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TeamName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasDefaultValueSql("((0))")
                    .HasComment("To check that Team is Agent or L2 Team, 0- Agent,1- L2 Team");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TeamMasterLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TeamMid).HasColumnName("TeamMID");

                entity.Property(e => e.TeamName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasDefaultValueSql("((0))")
                    .HasComment("To check that Team is Agent or L2 Team, 0- Agent,1- L2 Team");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TeamTicketMappingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LtwoAssignToId).HasColumnName("LTwo_AssignToID");

                entity.Property(e => e.RequestType).HasDefaultValueSql("((1))");

                entity.Property(e => e.TeamId).HasColumnName("TeamID");

                entity.Property(e => e.TeamTicketMappingId)
                    .HasColumnName("TeamTicketMappingID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.Type).HasComment("Type for checking the Team is L2 team or other team");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TeamUserMappingDetail>(entity =>
            {
                entity.HasKey(e => e.MappingMid);

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.TeamMid).HasColumnName("TeamMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TeamUserMappingDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.GlobalUserId).HasColumnName("GlobalUserID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.MappingMid).HasColumnName("MappingMID");

                entity.Property(e => e.TeamMid).HasColumnName("TeamMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TempMenuMasterDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_MenuMasterDetail");

                entity.Property(e => e.AccessLmid).HasColumnName("AccessLMID");

                entity.Property(e => e.ClientId)
                    .HasColumnName("ClientID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomiseRdid).HasColumnName("CustomiseRDID");

                entity.Property(e => e.GoBack)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderPart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iscustomise).HasColumnName("ISCustomise");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.MenuMdid)
                    .HasColumnName("MenuMDID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MenuName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MenuParentId).HasColumnName("MenuParentID");

                entity.Property(e => e.PageName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RdlreportType)
                    .HasColumnName("RDLReportType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDetailId).HasColumnName("ReportDetailID");

                entity.Property(e => e.ReportUidetailId).HasColumnName("ReportUIDetailID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tempdata>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessId)
                    .HasColumnName("ProcessID")
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ThemeMaster>(entity =>
            {
                entity.HasKey(e => e.ThemeMid)
                    .HasName("PK__ThemeMas__676DDC930055DCE9");

                entity.Property(e => e.ThemeMid)
                    .HasColumnName("ThemeMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Csskey)
                    .HasColumnName("CSSKey")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImagePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ThemeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketAssignmentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AssignedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AssignedDateTimeUtc)
                    .HasColumnName("AssignedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.AssigneeId).HasColumnName("AssigneeID");

                entity.Property(e => e.AssignerId).HasColumnName("AssignerID");

                entity.Property(e => e.Did).HasColumnName("DID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RequestType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1 - Ticket 2- Dispute");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<TicketDescription>(entity =>
            {
                entity.HasKey(e => e.TicketDdid);

                entity.Property(e => e.TicketDdid).HasColumnName("TicketDDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Para111).IsUnicode(false);

                entity.Property(e => e.Para112).IsUnicode(false);

                entity.Property(e => e.Para113).IsUnicode(false);

                entity.Property(e => e.Para114).IsUnicode(false);

                entity.Property(e => e.Para115).IsUnicode(false);

                entity.Property(e => e.Para116).IsUnicode(false);

                entity.Property(e => e.Para117).IsUnicode(false);

                entity.Property(e => e.Para118).IsUnicode(false);

                entity.Property(e => e.Para119).IsUnicode(false);

                entity.Property(e => e.Para120).IsUnicode(false);

                entity.Property(e => e.Para121).IsUnicode(false);

                entity.Property(e => e.Para122).IsUnicode(false);

                entity.Property(e => e.Para123).IsUnicode(false);

                entity.Property(e => e.Para124).IsUnicode(false);

                entity.Property(e => e.Para125).IsUnicode(false);

                entity.Property(e => e.Para126).IsUnicode(false);

                entity.Property(e => e.Para127).IsUnicode(false);

                entity.Property(e => e.Para128).IsUnicode(false);

                entity.Property(e => e.Para129).IsUnicode(false);

                entity.Property(e => e.Para130).IsUnicode(false);

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketDescriptionLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("TicketDescription_Log");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogCreatedDateTimeUtc)
                    .HasColumnName("LogCreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Para111).IsUnicode(false);

                entity.Property(e => e.Para112).IsUnicode(false);

                entity.Property(e => e.Para113).IsUnicode(false);

                entity.Property(e => e.Para114).IsUnicode(false);

                entity.Property(e => e.Para115).IsUnicode(false);

                entity.Property(e => e.Para116).IsUnicode(false);

                entity.Property(e => e.Para117).IsUnicode(false);

                entity.Property(e => e.Para118).IsUnicode(false);

                entity.Property(e => e.Para119).IsUnicode(false);

                entity.Property(e => e.Para120).IsUnicode(false);

                entity.Property(e => e.Para121).IsUnicode(false);

                entity.Property(e => e.Para122).IsUnicode(false);

                entity.Property(e => e.Para123).IsUnicode(false);

                entity.Property(e => e.Para124).IsUnicode(false);

                entity.Property(e => e.Para125).IsUnicode(false);

                entity.Property(e => e.Para126).IsUnicode(false);

                entity.Property(e => e.Para127).IsUnicode(false);

                entity.Property(e => e.Para128).IsUnicode(false);

                entity.Property(e => e.Para129).IsUnicode(false);

                entity.Property(e => e.Para130).IsUnicode(false);

                entity.Property(e => e.TicketDdid).HasColumnName("TicketDDID");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketDetails>(entity =>
            {
                entity.HasKey(e => e.TicketDid);

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.CallerId).HasColumnName("CallerID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Para131).IsUnicode(false);

                entity.Property(e => e.Para132).IsUnicode(false);

                entity.Property(e => e.Para133).IsUnicode(false);

                entity.Property(e => e.Para134).IsUnicode(false);

                entity.Property(e => e.Para135).IsUnicode(false);

                entity.Property(e => e.Para136).IsUnicode(false);

                entity.Property(e => e.Para137).IsUnicode(false);

                entity.Property(e => e.Para138).IsUnicode(false);

                entity.Property(e => e.Para139).IsUnicode(false);

                entity.Property(e => e.Para140).IsUnicode(false);

                entity.Property(e => e.Para141).IsUnicode(false);

                entity.Property(e => e.Para142).IsUnicode(false);

                entity.Property(e => e.Para143).IsUnicode(false);

                entity.Property(e => e.Para144).IsUnicode(false);

                entity.Property(e => e.Para145).IsUnicode(false);

                entity.Property(e => e.Para146).IsUnicode(false);

                entity.Property(e => e.Para147).IsUnicode(false);

                entity.Property(e => e.Para148).IsUnicode(false);

                entity.Property(e => e.Para149).IsUnicode(false);

                entity.Property(e => e.Para150).IsUnicode(false);

                entity.Property(e => e.Para151).IsUnicode(false);

                entity.Property(e => e.Para152).IsUnicode(false);

                entity.Property(e => e.Para153).IsUnicode(false);

                entity.Property(e => e.Para154).IsUnicode(false);

                entity.Property(e => e.Para155).IsUnicode(false);

                entity.Property(e => e.Para156).IsUnicode(false);

                entity.Property(e => e.Para157).IsUnicode(false);

                entity.Property(e => e.Para158).IsUnicode(false);

                entity.Property(e => e.Para159).IsUnicode(false);

                entity.Property(e => e.Para160).IsUnicode(false);

                entity.Property(e => e.Para66).IsUnicode(false);

                entity.Property(e => e.Para67).IsUnicode(false);

                entity.Property(e => e.Para68).IsUnicode(false);

                entity.Property(e => e.Para69).IsUnicode(false);

                entity.Property(e => e.Para70).IsUnicode(false);

                entity.Property(e => e.Para71).IsUnicode(false);

                entity.Property(e => e.Para72).IsUnicode(false);

                entity.Property(e => e.Para73).IsUnicode(false);

                entity.Property(e => e.Para74).IsUnicode(false);

                entity.Property(e => e.Para75).IsUnicode(false);

                entity.Property(e => e.Para76).IsUnicode(false);

                entity.Property(e => e.Para77).IsUnicode(false);

                entity.Property(e => e.Para78).IsUnicode(false);

                entity.Property(e => e.Para79).IsUnicode(false);

                entity.Property(e => e.Para80).IsUnicode(false);

                entity.Property(e => e.Para81).IsUnicode(false);

                entity.Property(e => e.Para82).IsUnicode(false);

                entity.Property(e => e.Para83).IsUnicode(false);

                entity.Property(e => e.Para84).IsUnicode(false);

                entity.Property(e => e.Para85).IsUnicode(false);

                entity.Property(e => e.Priority)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 for High, 2 for Medium, 3 for Low");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketDetailsLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_LogID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CallerId).HasColumnName("CallerID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogCreatedDateTimeUtc)
                    .HasColumnName("LogCreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.Para131).IsUnicode(false);

                entity.Property(e => e.Para132).IsUnicode(false);

                entity.Property(e => e.Para133).IsUnicode(false);

                entity.Property(e => e.Para134).IsUnicode(false);

                entity.Property(e => e.Para135).IsUnicode(false);

                entity.Property(e => e.Para136).IsUnicode(false);

                entity.Property(e => e.Para137).IsUnicode(false);

                entity.Property(e => e.Para138).IsUnicode(false);

                entity.Property(e => e.Para139).IsUnicode(false);

                entity.Property(e => e.Para140).IsUnicode(false);

                entity.Property(e => e.Para141).IsUnicode(false);

                entity.Property(e => e.Para142).IsUnicode(false);

                entity.Property(e => e.Para143).IsUnicode(false);

                entity.Property(e => e.Para144).IsUnicode(false);

                entity.Property(e => e.Para145).IsUnicode(false);

                entity.Property(e => e.Para146).IsUnicode(false);

                entity.Property(e => e.Para147).IsUnicode(false);

                entity.Property(e => e.Para148).IsUnicode(false);

                entity.Property(e => e.Para149).IsUnicode(false);

                entity.Property(e => e.Para150).IsUnicode(false);

                entity.Property(e => e.Para151).IsUnicode(false);

                entity.Property(e => e.Para152).IsUnicode(false);

                entity.Property(e => e.Para153).IsUnicode(false);

                entity.Property(e => e.Para154).IsUnicode(false);

                entity.Property(e => e.Para155).IsUnicode(false);

                entity.Property(e => e.Para156).IsUnicode(false);

                entity.Property(e => e.Para157).IsUnicode(false);

                entity.Property(e => e.Para158).IsUnicode(false);

                entity.Property(e => e.Para159).IsUnicode(false);

                entity.Property(e => e.Para160).IsUnicode(false);

                entity.Property(e => e.Para66).IsUnicode(false);

                entity.Property(e => e.Para67).IsUnicode(false);

                entity.Property(e => e.Para68).IsUnicode(false);

                entity.Property(e => e.Para69).IsUnicode(false);

                entity.Property(e => e.Para70).IsUnicode(false);

                entity.Property(e => e.Para71).IsUnicode(false);

                entity.Property(e => e.Para72).IsUnicode(false);

                entity.Property(e => e.Para73).IsUnicode(false);

                entity.Property(e => e.Para74).IsUnicode(false);

                entity.Property(e => e.Para75).IsUnicode(false);

                entity.Property(e => e.Para76).IsUnicode(false);

                entity.Property(e => e.Para77).IsUnicode(false);

                entity.Property(e => e.Para78).IsUnicode(false);

                entity.Property(e => e.Para79).IsUnicode(false);

                entity.Property(e => e.Para80).IsUnicode(false);

                entity.Property(e => e.Para81).IsUnicode(false);

                entity.Property(e => e.Para82).IsUnicode(false);

                entity.Property(e => e.Para83).IsUnicode(false);

                entity.Property(e => e.Para84).IsUnicode(false);

                entity.Property(e => e.Para85).IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketSmeemailDetails>(entity =>
            {
                entity.HasKey(e => e.MappingDid);

                entity.ToTable("TicketSMEEmailDetails");

                entity.Property(e => e.MappingDid).HasColumnName("MappingDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailDid).HasColumnName("EmailDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Smeid).HasColumnName("SMEID");

                entity.Property(e => e.TicketDid).HasColumnName("TicketDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketStatusMaster>(entity =>
            {
                entity.HasKey(e => e.StatusMid);

                entity.Property(e => e.StatusMid).HasColumnName("StatusMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TimeZoneMaster>(entity =>
            {
                entity.HasKey(e => e.Tzmid)
                    .HasName("PK_TimeZones");

                entity.Property(e => e.Tzmid).HasColumnName("TZMID");

                entity.Property(e => e.AppDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.Dbdefault)
                    .HasColumnName("DBDefault")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dsapplicable).HasColumnName("DSApplicable");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StandardName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Utcoffset).HasColumnName("UTCOffset");

                entity.Property(e => e.WebDefault).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TimezoneDlconfig>(entity =>
            {
                entity.HasKey(e => e.TzconfigId)
                    .HasName("PK__Timezone__D1F4ACF012E8442D");

                entity.ToTable("TimezoneDLConfig");

                entity.Property(e => e.TzconfigId).HasColumnName("TZConfigID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Enddate).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tzmid).HasColumnName("TZMID");
            });

            modelBuilder.Entity<TweetDetails>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.MediaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.Post).IsUnicode(false);

                entity.Property(e => e.PostDateTime).HasColumnType("datetime");

                entity.Property(e => e.PostFrom).IsUnicode(false);

                entity.Property(e => e.PostId)
                    .HasColumnName("PostID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.XmlrawId).HasColumnName("XMLRawID");
            });

            modelBuilder.Entity<TweetDetailsTemp>(entity =>
            {
                entity.HasKey(e => e.PostTempId);

                entity.ToTable("TweetDetails_Temp");

                entity.Property(e => e.PostTempId).HasColumnName("PostTempID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.MediaPathSystem).IsUnicode(false);

                entity.Property(e => e.MediaPathWeb).IsUnicode(false);

                entity.Property(e => e.MediaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalPostId).HasColumnName("OriginalPostID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageUniqueId)
                    .HasColumnName("PageUniqueID")
                    .IsUnicode(false);

                entity.Property(e => e.Post).IsUnicode(false);

                entity.Property(e => e.PostDateTime).HasColumnType("datetime");

                entity.Property(e => e.PostFrom).IsUnicode(false);

                entity.Property(e => e.PostUniqueId)
                    .HasColumnName("PostUniqueID")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TwitterTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TemplateBody).IsUnicode(false);

                entity.Property(e => e.TemplateId)
                    .HasColumnName("TemplateID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TwitterUserMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.ProfilePicUrlsystem)
                    .HasColumnName("ProfilePicURLSystem")
                    .IsUnicode(false);

                entity.Property(e => e.ProfilePicUrlweb)
                    .HasColumnName("ProfilePicURLWeb")
                    .IsUnicode(false);

                entity.Property(e => e.ScreenName).IsUnicode(false);

                entity.Property(e => e.UniqueUserId)
                    .HasColumnName("UniqueUserID")
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserDefaultRedirect>(entity =>
            {
                entity.HasKey(e => e.RedirectMid);

                entity.ToTable("User_DefaultRedirect");

                entity.Property(e => e.RedirectMid).HasColumnName("RedirectMID");

                entity.Property(e => e.LinkType).HasDefaultValueSql("((0))");

                entity.Property(e => e.NextLevelPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("Path of the Page which is to be hit after the current page level");

                entity.Property(e => e.PageLevel).HasComment("Level of the page regarding the script to be hit");

                entity.Property(e => e.PageName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Urltitle)
                    .HasColumnName("URLTitle")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserProfile>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__UserProf__1788CC4C04266DCD");

                entity.HasIndex(e => e.UserName)
                    .HasName("UQ__UserProf__C9F2845617394241")
                    .IsUnique();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(56);
            });

            modelBuilder.Entity<UserProfileDetail>(entity =>
            {
                entity.HasKey(e => e.UserPdid)
                    .HasName("PK__UserProf__6D399C9607F6FEB1");

                entity.Property(e => e.UserPdid).HasColumnName("UserPDID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ThemeMid).HasColumnName("ThemeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserImageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserImagePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserProfileDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__UserProf__5E5499A80BC78F95");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogHostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ThemeMid).HasColumnName("ThemeMID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserImageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserImagePath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserPdid).HasColumnName("UserPDID");
            });

            modelBuilder.Entity<UserSecuirtyQuestions>(entity =>
            {
                entity.Property(e => e.Answer)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<UserSecuirtyQuestionsLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Answer)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDatetime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<VendorMaster>(entity =>
            {
                entity.Property(e => e.VendorMasterId)
                    .HasColumnName("VendorMasterID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Glcode)
                    .HasColumnName("GLCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Gldescription)
                    .HasColumnName("GLDescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Market).HasMaxLength(50);

                entity.Property(e => e.MarketId)
                    .HasColumnName("MarketID")
                    .HasMaxLength(50);

                entity.Property(e => e.MarketName).HasMaxLength(250);

                entity.Property(e => e.VendorId)
                    .HasColumnName("VendorID")
                    .HasMaxLength(50);

                entity.Property(e => e.VendorName).HasMaxLength(50);
            });

            modelBuilder.Entity<WatActionStatusDetail>(entity =>
            {
                entity.HasKey(e => e.StatusDid);

                entity.ToTable("WAT_ActionStatusDetail");

                entity.Property(e => e.StatusDid).HasColumnName("StatusDID");

                entity.Property(e => e.ActionComments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ActionEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.ActionEndDateTimeUtc)
                    .HasColumnName("ActionEndDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionSmid).HasColumnName("ActionSMID");

                entity.Property(e => e.ActionStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.ActionStartDateTimeUtc)
                    .HasColumnName("ActionStartDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActiveWorkStatusDid).HasColumnName("ActiveWorkStatusDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");
            });

            modelBuilder.Entity<WatActionStatusMaster>(entity =>
            {
                entity.HasKey(e => e.ActionSmid);

                entity.ToTable("WAT_ActionStatusMaster");

                entity.Property(e => e.ActionSmid)
                    .HasColumnName("ActionSMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ActionGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActionImage)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ActionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('::1')");

                entity.Property(e => e.StatusMessage)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<WatActivityDataDetail>(entity =>
            {
                entity.HasKey(e => e.ActivityDid);

                entity.ToTable("WAT_ActivityDataDetail");

                entity.Property(e => e.ActivityDid).HasColumnName("ActivityDID");

                entity.Property(e => e.ActionEndDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ActionEndDateTimeUtc)
                    .HasColumnName("ActionEndDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.ActionStartDateTimeUtc)
                    .HasColumnName("ActionStartDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.CallHistoryMid).HasColumnName("CallHistoryMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedDateTimeUtc)
                    .HasColumnName("CreatedDateTimeUTC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataDid).HasColumnName("DataDID");

                entity.Property(e => e.FreezeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalUserId)
                    .HasColumnName("GlobalUserID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginMid).HasColumnName("LoginMID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusDid).HasColumnName("StatusDID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDateTimeUtc)
                    .HasColumnName("UpdatedDateTimeUTC")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<WebApiMaster>(entity =>
            {
                entity.HasKey(e => e.WebApiMid);

                entity.Property(e => e.WebApiMid).HasColumnName("WebApiMID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Method)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ResponseContentType).HasComment("0- JSON, 1-XML");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TabName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Token)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TokenName)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WebApiOutputDetail>(entity =>
            {
                entity.HasKey(e => e.WebApiOdid);

                entity.Property(e => e.WebApiOdid).HasColumnName("WebApiODID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.OutputName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.WebApiMid).HasColumnName("WebApiMID");

                entity.Property(e => e.Xmlnodes)
                    .HasColumnName("XMLNodes")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("Use multiple seperated by comma(,)");
            });

            modelBuilder.Entity<WebApiParameterDetail>(entity =>
            {
                entity.HasKey(e => e.WebApiPdid);

                entity.Property(e => e.WebApiPdid).HasColumnName("WebApiPDID");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.ControlType).HasComment("1- Textbox, 2 Dropdown, 3 static values, 4 calender");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiscMid).HasColumnName("MiscMID");

                entity.Property(e => e.Parameter)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.WebApiMid).HasColumnName("WebApiMID");
            });

            modelBuilder.Entity<Webapimaster9may2019>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("webapimaster_9May2019");

                entity.Property(e => e.ClientMid).HasColumnName("ClientMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Createddatetime).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Method)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ScriptMid).HasColumnName("ScriptMID");

                entity.Property(e => e.TabName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Token)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TokenName)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WebApiMid)
                    .HasColumnName("WebApiMID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<WeekMaster>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.WeekId)
                    .HasColumnName("WeekID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WeekMid)
                    .HasColumnName("WeekMID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.WeekName)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.HasSequence<int>("SequenceTicket");

            modelBuilder.HasSequence<int>("SequenceTicketCallerID");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
